@inproceedings{10.1145/3084226.3084238,
author = {Garousi, Vahid and Felderer, Michael},
title = {Experience-based guidelines for effective and efficient data extraction in systematic reviews in software engineering},
year = {2017},
isbn = {9781450348041},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3084226.3084238},
doi = {10.1145/3084226.3084238},
abstract = {To systematically collect evidence and to structure a given area in software engineering (SE), Systematic Literature Reviews (SLR) and Systematic Mapping (SM) studies have become common. Data extraction is one of the main phases (activities) when conducting an SM or an SLR, whose objective is to extract required data from the primary studies and to accurately record the information researchers need to answer the questions of the SM/SLR study. Based on experience in a large number of SM/SLR studies, we and many other researchers have found the data extraction in SLRs to be time consuming and error-prone, thus raising the real need for heuristics and guidelines for effective and efficient data extraction in these studies, especially to be learnt by junior and young researchers. As a 'guideline' paper, this paper contributes a synthesized list of challenges usually faced during SLRs' data extraction phase and the corresponding solutions (guidelines). For our synthesis, we consider two data sources: (1) the pool of 16 SLR studies in which the authors have been involved in, as well as (2) a review of challenges and guidelines in the existing literature. Our experience in utilizing the presented guidelines in the near past have helped our junior colleagues to conduct data extractions more effectively and efficiently.},
booktitle = {Proceedings of the 21st International Conference on Evaluation and Assessment in Software Engineering},
pages = {170–179},
numpages = {10},
keywords = {SLR, SM, Systematic mapping studies, data extraction, empirical software engineering, research methodology, systematic literature reviews},
location = {Karlskrona, Sweden},
series = {EASE '17}
}

@article{10.1145/3561383,
author = {Patnaik, Nikhil and Dwyer, Andrew and Hallett, Joseph and Rashid, Awais},
title = {SLR: From Saltzer and Schroeder to 2021…47 Years of Research on the Development and Validation of Security API Recommendations},
year = {2023},
issue_date = {May 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {32},
number = {3},
issn = {1049-331X},
url = {https://doi.org/10.1145/3561383},
doi = {10.1145/3561383},
abstract = {Producing secure software is challenging. The poor usability of security Application Programming Interfaces (APIs) makes this even harder. Many recommendations have been proposed to support developers by improving the usability of cryptography libraries—rooted in wider best practice guidance in software engineering and API design. In this SLR, we systematize knowledge regarding these recommendations. We identify and analyze 65 papers, offering 883 recommendations. Through thematic analysis, we identify seven core ways to improve usability of APIs. Most of the recommendations focus on helping API developers to construct and structure their code and make it more usable and easier for programmers to understand. There is less focus, however, on documentation, writing requirements, code quality assessment, and the impact of organizational software development practices. By tracing and analyzing paper ancestry, we map how this knowledge becomes validated and translated over time. We find that very few API usability recommendations are empirically validated, and that recommendations specific to usable security APIs lag even further behind.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = apr,
articleno = {60},
numpages = {31},
keywords = {API, usability, security, SLR, recommendations}
}

@inproceedings{10.1145/3021460.3021489,
author = {Barn, Balbir and Barat, Souvik and Clark, Tony},
title = {Conducting Systematic Literature Reviews and Systematic Mapping Studies},
year = {2017},
isbn = {9781450348560},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3021460.3021489},
doi = {10.1145/3021460.3021489},
abstract = {Context: An essential part of conducting software engineering (SE) research is the ability to identify extant research on tools, technologies, concepts and methods in order to evaluate and make rational and scientific decisions. The domain from which such knowledge is extracted is typically existing research literature found in journals, conference proceedings, books and gray literature. Empirical approaches that include various systematic review (SR) methodologies such as systematic literature review (SLR) and systematic mapping study (SMS) are found to be effective in this context. They adopt rigorous planning, follow repeatable and well-defined processes, and produce unbiased and evidence-based outcomes. Despite these significant benefits, the general trend on using these systematic review (SR) methodologies is not encouraging in SE research. The primary reasons emerging are twofold - a) SR methodologies are largely cited as time-consuming activities and b) lack of guidance to conduct systematic reviews. This tutorial discusses these concerns and describes an effective way of using SR methodologies for SE research.Objectives: Attendees will be introduced to the key concepts, methods and processes for conducting systematic literature reviews (SLR) and systematic mapping studies (SMS). The benefits, limitations, guidelines for using SR methodologies in an effective manner will discussed in the session. Attendees will be guided on the appropriate formulation of a research question and sub questions; the development of a review protocol such as inclusion criteria, exclusion criteria, quality criteria and classification structures; and execution of review protocol using digital libraries and syntheses of review data. A web based software tool1, for supporting the systematic literature review process will be demonstrated and attendees will get the opportunity to use the tool to conduct the review to help in identification of relevant research and extraction and synthesis of data.Method: We will use a blend of information presentation, interactive hands-on session and knowledge sharing session. The presentation will introduce the key concepts, benefits, limitations and how to overcome the limitations; hands on session will illustrate a review process with a case study, and finally the knowledge sharing session will discuss the experiences, best practices and the lesson learnt.},
booktitle = {Proceedings of the 10th Innovations in Software Engineering Conference},
pages = {212–213},
numpages = {2},
keywords = {Literature Review, Meta Modeling, Model Based Literature Review, Systematic Literature Review, Systematic Mapping Study},
location = {Jaipur, India},
series = {ISEC '17}
}

@article{10.1145/3356773.3356797,
author = {Kamei, Fernando Kenji},
title = {The Use of Grey Literature Review as Evidence for Practitioners},
year = {2020},
issue_date = {July 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {44},
number = {3},
issn = {0163-5948},
url = {https://doi.org/10.1145/3356773.3356797},
doi = {10.1145/3356773.3356797},
abstract = {Context: In the last years, diverse research areas increased their interest in Grey Literature (GL). In Software Engineering (SE), SE practitioners became heavy consumers of GL, by way of contrast to traditional research papers. Problem: This is unfortunate, in particular, although the increase of Systematic Literature Reviews (SLR) published, researchers, claim to the lack of them of connection to the practice. Goal: Propose and evaluate a set of guidelines to help SE researchers to conduct a Grey Literature Review (GLR) that are more in line with practitioners' needs. Method: First, we are conducting a tertiary study to understand how secondary studies use GL. Second, we plan to employ qualitative research with researchers of SLRs and SE practitioners. Third, we plan to review and analyze the use of GL source according to the context in SE. Fourth, we plan to conduct a GLR. Finally, we plan to perform and evaluate our guideline. Preliminary Results: The tertiary study retrieved a total of 14,043 papers. We removed the duplicate studies and also which were not peer-reviewed articles. Currently, we are solving the conflicts of disagreement of the selection process. Conclusions: We present preliminary findings, show our proposed approach and the next steps.},
journal = {SIGSOFT Softw. Eng. Notes},
month = oct,
pages = {23},
numpages = {1},
keywords = {evidence- based software engineering, grey literature, systematic literature review}
}

@inproceedings{10.1145/3475716.3484189,
author = {Sultana, Sayma and Sarker, Jaydeb and Bosu, Amiangshu},
title = {A Rubric to Identify Misogynistic and Sexist Texts from Software Developer Communications},
year = {2021},
isbn = {9781450386654},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3475716.3484189},
doi = {10.1145/3475716.3484189},
abstract = {Background: As contemporary software development organizations are dominated by males, occurrences of misogynistic and sexist remarks are abundant in many communities. Such remarks are barriers to promoting diversity and inclusion in the software engineering (SE) domain.Aims: This study aims to develop a rubric to identify misogynistic remarks and sexist jokes specifically from software developer communications.Method: We have followed the systematic literature review protocol to identify 10 primary studies that have characterized misogynistic and sexist texts in various domains.Results: Based on our syntheses of the primary studies, we have developed a rubric to manually identity various categories of misogynistic or sexist remarks. We have also provided SE domain specific examples of those categories.Conclusions: Our annotation guideline will pave the path towards building automated misogynistic text classifier for the SE domain.},
booktitle = {Proceedings of the 15th ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
articleno = {27},
numpages = {6},
keywords = {misogynistic text, sexist joke, software developer},
location = {Bari, Italy},
series = {ESEM '21}
}

@inproceedings{10.1145/2372251.2372257,
author = {Jalali, Samireh and Wohlin, Claes},
title = {Systematic literature studies: database searches vs. backward snowballing},
year = {2012},
isbn = {9781450310567},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2372251.2372257},
doi = {10.1145/2372251.2372257},
abstract = {Systematic studies of the literature can be done in different ways. In particular, different guidelines propose different first steps in their recommendations, e.g. start with search strings in different databases or start with the reference lists of a starting set of papers.In software engineering, the main recommended first step is using search strings in a number of databases, while in information systems, snowballing has been recommended as the first step. This paper compares the two different search approaches for conducting literature review studies.The comparison is conducted by searching for articles addressing "Agile practices in global software engineering". The focus of the paper is on evaluating the two different search approaches.Despite the differences in the included papers, the conclusions and the patterns found in both studies are quite similar. The strengths and weaknesses of each first step are discussed separately and in comparison with each other.It is concluded that none of the first steps is outperforming the other, and the choice of guideline to follow, and hence the first step, may be context-specific, i.e. depending on the area of study.},
booktitle = {Proceedings of the ACM-IEEE International Symposium on Empirical Software Engineering and Measurement},
pages = {29–38},
numpages = {10},
keywords = {agile practices, global software engineering, snowballing, systematic literature review},
location = {Lund, Sweden},
series = {ESEM '12}
}

