@article{ZHANG2021106607,
title = {Processes, challenges and recommendations of Gray Literature Review: An experience report},
journal = {Information and Software Technology},
volume = {137},
pages = {106607},
year = {2021},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2021.106607},
url = {https://www.sciencedirect.com/science/article/pii/S0950584921000847},
author = {He Zhang and Runfeng Mao and Huang Huang and Qiming Dai and Xin Zhou and Haifeng Shen and Guoping Rong},
keywords = {Gray literature review, Evidence-based software engineering, DevSecOps},
abstract = {Context:
Systematic Literature Review (SLR), as a tool of Evidence-Based Software Engineering (EBSE), has been widely used in Software Engineering (SE). However, for certain topics in SE, especially those that are trendy or industry driven, academic literature is generally scarce and consequently Gray Literature (GL) becomes a major source of evidence. In recent years, the adoption of Gray Literature Review (GLR) or Multivocal Literature Review (MLR) is rising steadily to provide the state-of-the-practice of a specific topic where SLR is not a viable option.
Objective:
Although some SLR guidelines recommend the use of GL and several MLR guidelines have already been proposed in SE, researchers still have conflicting views on the value of GL and commonly accepted GLR or MLR studies are generally lacking in terms of publication. This experience report aims to shed some light on GLR through a case study that uses SLR and MLR guidelines to conduct a GLR on an emerging topic in SE to specifically answer the questions related to the reasons of using GL, the processes of conducting GL, and the impacts of GL on review results.
Method:
We retrospect the review process of conducting a GLR on the topic of DevSecOps with reference to Kitchenham’s SLR and Garousi’s MLR guidelines. We specifically reflect on the processes we had to adapt in order to tackle the challenges we faced. We also compare and contrast our GLR with existing MLRs or GLRs in SE to contextualize our reflections.
Results:
We distill ten challenges in nine activities of a GLR process. We provide reasons for these challenges and further suggest ways to tackle them during a GLR process. We also discuss the decision process of selecting a suitable review methodology among SLR, MLR and GLR and elaborate the impacts of GL on our review results.
Conclusion:
Although our experience on GLR is mainly derived from a specific case study on DevSecOps, we conjecture that it is relevant and would be beneficial to other GLR or MLR studies. We also expect our experience would contribute to future GLR or MLR guidelines, in a way similar to how SLR guidelines learned from the SLR experience report a dozen years ago. In addition, other researchers may find our decision making process useful before they conduct their own reviews.}
}
@article{GAROUSI2019101,
title = {Guidelines for including grey literature and conducting multivocal literature reviews in software engineering},
journal = {Information and Software Technology},
volume = {106},
pages = {101-121},
year = {2019},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2018.09.006},
url = {https://www.sciencedirect.com/science/article/pii/S0950584918301939},
author = {Vahid Garousi and Michael Felderer and Mika V. Mäntylä},
keywords = {Multivocal literature review, Grey literature, Guidelines, Systematic literature review, Systematic mapping study, Literature study, Evidence-based software engineering},
abstract = {Context
A Multivocal Literature Review (MLR) is a form of a Systematic Literature Review (SLR) which includes the grey literature (e.g., blog posts, videos and white papers) in addition to the published (formal) literature (e.g., journal and conference papers). MLRs are useful for both researchers and practitioners since they provide summaries both the state-of-the art and –practice in a given area. MLRs are popular in other fields and have recently started to appear in software engineering (SE). As more MLR studies are conducted and reported, it is important to have a set of guidelines to ensure high quality of MLR processes and their results.
Objective
There are several guidelines to conduct SLR studies in SE. However, several phases of MLRs differ from those of traditional SLRs, for instance with respect to the search process and source quality assessment. Therefore, SLR guidelines are only partially useful for conducting MLR studies. Our goal in this paper is to present guidelines on how to conduct MLR studies in SE.
Method
To develop the MLR guidelines, we benefit from several inputs: (1) existing SLR guidelines in SE, (2), a literature survey of MLR guidelines and experience papers in other fields, and (3) our own experiences in conducting several MLRs in SE. We took the popular SLR guidelines of Kitchenham and Charters as the baseline and extended/adopted them to conduct MLR studies in SE. All derived guidelines are discussed in the context of an already-published MLR in SE as the running example.
Results
The resulting guidelines cover all phases of conducting and reporting MLRs in SE from the planning phase, over conducting the review to the final reporting of the review. In particular, we believe that incorporating and adopting a vast set of experience-based recommendations from MLR guidelines and experience papers in other fields have enabled us to propose a set of guidelines with solid foundations.
Conclusion
Having been developed on the basis of several types of experience and evidence, the provided MLR guidelines will support researchers to effectively and efficiently conduct new MLRs in any area of SE. The authors recommend the researchers to utilize these guidelines in their MLR studies and then share their lessons learned and experiences.}
}
@article{NAVEED2024107423,
title = {Model driven engineering for machine learning components: A systematic literature review},
journal = {Information and Software Technology},
volume = {169},
pages = {107423},
year = {2024},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2024.107423},
url = {https://www.sciencedirect.com/science/article/pii/S0950584924000284},
author = {Hira Naveed and Chetan Arora and Hourieh Khalajzadeh and John Grundy and Omar Haggag},
keywords = {Model driven engineering, Software engineering, Artificial intelligence, Machine learning, Systematic literature review},
abstract = {Context:
Machine Learning (ML) has become widely adopted as a component in many modern software applications. Due to the large volumes of data available, organizations want to increasingly leverage their data to extract meaningful insights and enhance business profitability. ML components enable predictive capabilities, anomaly detection, recommendation, accurate image and text processing, and informed decision-making. However, developing systems with ML components is not trivial; it requires time, effort, knowledge, and expertise in ML, data processing, and software engineering. There have been several studies on the use of model-driven engineering (MDE) techniques to address these challenges when developing traditional software and cyber–physical systems. Recently, there has been a growing interest in applying MDE for systems with ML components.
Objective:
The goal of this study is to further explore the promising intersection of MDE with ML (MDE4ML) through a systematic literature review (SLR). Through this SLR, we wanted to analyze existing studies, including their motivations, MDE solutions, evaluation techniques, key benefits and limitations.
Method:
Our SLR is conducted following the well-established guidelines by Kitchenham. We started by devising a protocol and systematically searching seven databases, which resulted in 3934 papers. After iterative filtering, we selected 46 highly relevant primary studies for data extraction, synthesis, and reporting.
Results:
We analyzed selected studies with respect to several areas of interest and identified the following: (1) the key motivations behind using MDE4ML; (2) a variety of MDE solutions applied, such as modeling languages, model transformations, tool support, targeted ML aspects, contributions and more; (3) the evaluation techniques and metrics used; and (4) the limitations and directions for future work. We also discuss the gaps in existing literature and provide recommendations for future research.
Conclusion:
This SLR highlights current trends, gaps and future research directions in the field of MDE4ML, benefiting both researchers and practitioners.}
}
@article{HODA201760,
title = {Systematic literature reviews in agile software development: A tertiary study},
journal = {Information and Software Technology},
volume = {85},
pages = {60-70},
year = {2017},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2017.01.007},
url = {https://www.sciencedirect.com/science/article/pii/S0950584917300538},
author = {Rashina Hoda and Norsaremah Salleh and John Grundy and Hui Mien Tee},
keywords = {Agile software development, Tertiary study, Systematic literature reviews, Mapping study},
abstract = {Context
A number of systematic literature reviews and mapping studies (SLRs) covering numerous primary research studies on various aspects of agile software development (ASD) exist.
Objective
The aim of this paper is to provide an overview of the SLRs on ASD research topics for software engineering researchers and practitioners.
Method
We followed the tertiary study guidelines by Kitchenham et al. to find SLRs published between late 1990s to December 2015.
Results
We found 28 SLRs focusing on ten different ASD research areas: adoption, methods, practices, human and social aspects, CMMI, usability, global software engineering (GSE), organizational agility, embedded systems, and software product line engineering. The number of SLRs on ASD topics, similar to those on software engineering (SE) topics in general, is on the rise. A majority of the SLRs applied standardized guidelines and the quality of these SLRs on ASD topics was found to be slightly higher for journal publications than for conferences. While some individuals and institutions seem to lead this area, the spread of authors and institutions is wide. With respect to prior review recommendations, significant progress was noticed in the area of connecting agile to established domains such as usability, CMMI, and GSE; and considerable progress was observed in focusing on management-oriented approaches as Scrum and sustaining ASD in different contexts such as embedded systems.
Conclusion
SLRs of ASD studies are on the rise and cover a variety of ASD aspects, ranging from early adoption issues to newer applications of ASD such as in product line engineering. ASD research can benefit from further primary and secondary studies on evaluating benefits and challenges of ASD methods, agile hybrids in large-scale setups, sustainability, motivation, teamwork, and project management; as well as a fresh review of empirical studies in ASD to cover the period post 2008.}
}
@article{MENDES2020110607,
title = {When to update systematic literature reviews in software engineering},
journal = {Journal of Systems and Software},
volume = {167},
pages = {110607},
year = {2020},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2020.110607},
url = {https://www.sciencedirect.com/science/article/pii/S0164121220300856},
author = {Emilia Mendes and Claes Wohlin and Katia Felizardo and Marcos Kalinowski},
keywords = {Systematic literature review update, Systematic literature reviews, Software engineering},
abstract = {[Context] Systematic Literature Reviews (SLRs) have been adopted by the Software Engineering (SE) community for approximately 15 years to provide meaningful summaries of evidence on several topics. Many of these SLRs are now potentially outdated, and there are no systematic proposals on when to update SLRs in SE. [Objective] The goal of this paper is to provide recommendations on when to update SLRs in SE. [Method] We evaluated, using a three-step approach, a third-party decision framework (3PDF) employed in other fields, to decide whether SLRs need updating. First, we conducted a literature review of SLR updates in SE and contacted the authors to obtain their feedback relating to the usefulness of the 3PDF within the context of SLR updates in SE. Second, we used these authors’ feedback to see whether the framework needed any adaptation; none was suggested. Third, we applied the 3PDF to the SLR updates identified in our literature review. [Results] The 3PDF showed that 14 of the 20 SLRs did not need updating. This supports the use of a decision support mechanism (such as the 3PDF) to help the SE community decide when to update SLRs. [Conclusions] We put forward that the 3PDF should be adopted by the SE community to keep relevant evidence up to date and to avoid wasting effort with unnecessary updates.}
}
@article{DASILVA2011899,
title = {Six years of systematic literature reviews in software engineering: An updated tertiary study},
journal = {Information and Software Technology},
volume = {53},
number = {9},
pages = {899-913},
year = {2011},
note = {Studying work practices in Global Software Engineering},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2011.04.004},
url = {https://www.sciencedirect.com/science/article/pii/S0950584911001017},
author = {Fabio Q.B. {da Silva} and André L.M. Santos and Sérgio Soares and A. César C. França and Cleviton V.F. Monteiro and Felipe Farias Maciel},
keywords = {Systematic reviews, Mapping studies, Software engineering, Tertiary studies},
abstract = {Context
Since the introduction of evidence-based software engineering in 2004, systematic literature review (SLR) has been increasingly used as a method for conducting secondary studies in software engineering. Two tertiary studies, published in 2009 and 2010, identified and analysed 54 SLRs published in journals and conferences in the period between 1st January 2004 and 30th June 2008.
Objective
In this article, our goal was to extend and update the two previous tertiary studies to cover the period between 1st July 2008 and 31st December 2009. We analysed the quality, coverage of software engineering topics, and potential impact of published SLRs for education and practice.
Method
We performed automatic and manual searches for SLRs published in journals and conference proceedings, analysed the relevant studies, and compared and integrated our findings with the two previous tertiary studies.
Results
We found 67 new SLRs addressing 24 software engineering topics. Among these studies, 15 were considered relevant to the undergraduate educational curriculum, and 40 appeared of possible interest to practitioners. We found that the number of SLRs in software engineering is increasing, the overall quality of the studies is improving, and the number of researchers and research organisations worldwide that are conducting SLRs is also increasing and spreading.
Conclusion
Our findings suggest that the software engineering research community is starting to adopt SLRs consistently as a research method. However, the majority of the SLRs did not evaluate the quality of primary studies and fail to provide guidelines for practitioners, thus decreasing their potential impact on software engineering practice.}
}
@article{ALI2018133,
title = {Reliability of search in systematic reviews: Towards a quality assessment framework for the automated-search strategy},
journal = {Information and Software Technology},
volume = {99},
pages = {133-147},
year = {2018},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2018.02.002},
url = {https://www.sciencedirect.com/science/article/pii/S0950584917304263},
author = {Nauman Bin Ali and Muhammad Usman},
keywords = {Secondary studies, Systematic literature reviews, Search strategies, Reliability, Credibility, Guidelines},
abstract = {Context
The trust in systematic literature reviews (SLRs) to provide credible recommendations is critical for establishing evidence-based software engineering (EBSE) practice. The reliability of SLR as a method is not a given and largely depends on the rigor of the attempt to identify, appraise and aggregate evidence. Previous research, by comparing SLRs on the same topic, has identified search as one of the reasons for discrepancies in the included primary studies. This affects the reliability of an SLR, as the papers identified and included in it are likely to influence its conclusions.
Objective
We aim to propose a comprehensive evaluation checklist to assess the reliability of an automated-search strategy used in an SLR.
Method
Using a literature review, we identified guidelines for designing and reporting automated-search as a primary search strategy. Using the aggregated design, reporting and evaluation guidelines, we formulated a comprehensive evaluation checklist. The value of this checklist was demonstrated by assessing the reliability of search in 27 recent SLRs.
Results
Using the proposed evaluation checklist, several additional issues (not captured by the current evaluation checklist) related to the reliability of search in recent SLRs were identified. These issues severely limit the coverage of literature by the search and also the possibility to replicate it.
Conclusion
Instead of solely relying on expensive replications to assess the reliability of SLRs, this work provides means to objectively assess the likely reliability of a search-strategy used in an SLR. It highlights the often-assumed aspect of repeatability of search when using automated-search. Furthermore, by explicitly considering repeatability and consistency as sub-characteristics of a reliable search, it provides a more comprehensive evaluation checklist than the ones currently used in EBSE.}
}
@article{UZUN201830,
title = {Model-driven architecture based testing: A systematic literature review},
journal = {Information and Software Technology},
volume = {102},
pages = {30-48},
year = {2018},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2018.05.004},
url = {https://www.sciencedirect.com/science/article/pii/S0950584918300880},
author = {Burak Uzun and Bedir Tekinerdogan},
keywords = {Model-based testing, Software architecture, Systematic review},
abstract = {Context
Model-driven architecture based testing (MDABT) adopts architectural models of a system under test and/or its environment to derive test artifacts. In the literature, different MDABT approaches have been provided together with the corresponding lessons results and lessons learned.
Objective
The overall objective of this paper is to identify the published concerns for applying MDABT, identify the proposed solutions, and describe the current research directions for MDABT.
Method
To this end we have provided a systematic literature review (SLR) that is conducted by a multi-phase study selection process using the published literature in major software engineering journals and conference proceedings.
Results
We reviewed 739 papers that are discovered using a well-planned review protocol, and 31 of them were assessed as primary studies related to our research questions. Based on the analysis of the data extraction process, we discuss the primary trends and approaches and present the identified obstacles.
Conclusion
This study shows that although a generic process the approaches different in various ways with different goals, modeling abstractions and results. Further, based on the synthesis process in the SLR we can state that the potential of MDABT has not been fully exploited yet.}
}
@article{BANO2015148,
title = {A systematic review on the relationship between user involvement and system success},
journal = {Information and Software Technology},
volume = {58},
pages = {148-169},
year = {2015},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2014.06.011},
url = {https://www.sciencedirect.com/science/article/pii/S0950584914001505},
author = {Muneera Bano and Didar Zowghi},
keywords = {User involvement, Software development, Systematic Literature Review},
abstract = {Context
For more than four decades it has been intuitively accepted that user involvement (UI) during system development lifecycle leads to system success. However when the researchers have evaluated the user involvement and system success (UI-SS) relationship empirically, the results were not always positive.
Objective
Our objective was to explore the UI-SS relationship by synthesizing the results of all the studies that have empirically investigated this complex phenomenon.
Method
We performed a Systematic Literature Review (SLR) following the steps provided in the guidelines of Evidence Based Software Engineering. From the resulting studies we extracted data to answer our 9 research questions related to the UI-SS relationship, identification of users, perspectives of UI, benefits, problems and challenges of UI, degree and level of UI, relevance of stages of software development lifecycle (SDLC) and the research method employed on the UI-SS relationship.
Results
Our systematic review resulted in selecting 87 empirical studies published during the period 1980–2012. Among 87 studies reviewed, 52 reported that UI positively contributes to system success, 12 suggested a negative contribution and 23 were uncertain. The UI-SS relationship is neither direct nor binary, and there are various confounding factors that play their role. The identification of users, their degree/level of involvement, stage of SDLC for UI, and choice of research method have been claimed to have impact on the UI-SS relationship. However, there is not sufficient empirical evidence available to support these claims.
Conclusion
Our results have revealed that UI does contribute positively to system success. But it is a double edged sword and if not managed carefully it may cause more problems than benefits. Based on the analysis of 87 studies, we were able to identify factors for effective management of UI alluding to the causes for inconsistency in the results of published literature.}
}
@article{CHUECA2024107330,
title = {The consolidation of game software engineering: A systematic literature review of software engineering for industry-scale computer games},
journal = {Information and Software Technology},
volume = {165},
pages = {107330},
year = {2024},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2023.107330},
url = {https://www.sciencedirect.com/science/article/pii/S0950584923001854},
author = {Jorge Chueca and Javier Verón and Jaime Font and Francisca Pérez and Carlos Cetina},
keywords = {Computer games, Video games, Game software engineering, Systematic literature review, SLR, Industry-scale},
abstract = {Context:
Game Software Engineering (GSE) is a branch of Software Engineering (SE) that focuses on the development of video game applications. In past years, GSE has achieved enough volume, differences from traditional software engineering, and interest by the community to be considered an independent scientific domain, veering out from traditional SE.
Objective:
This study evaluates the current state of the art in software engineering for industry-scale computer games identifying gaps and consolidating the magnitude and growth of this field.
Method:
A Systematic Literature Review is performed following best practices to ensure the relevance of the studies included in the review. We analyzed 98 GSE studies to extract the current intensity, topics, methods, and quality of GSE.
Results:
The GSE research community has been growing over the years, producing over four times more research than before the previous GSE survey. However, this community is still very dispersed, with no main venues holding most of the GSE scientific studies. A broader range of topics is covered in this area, evolving towards those of a mature field such as architecture and design. Also, the reviewed studies employ more elaborated empirical research methods, even though the study reports need to be more rigorous in sections related to the critical examination of the work.
Conclusion:
The results of the SLR lead to the identification of 13 potential future research directions for this domain. GSE is an independent, mature, and growing field that presents new ways of software creation where the gap between industry and academia is narrowing. Video games present themselves as powerful tools to push the boundaries of software knowledge.}
}
@article{GARCIAPENALVO20231023,
title = {Explainable Rules and Heuristics in AI Algorithm Recommendation Approaches—A Systematic Literature Review and Mapping Study},
journal = {CMES - Computer Modeling in Engineering and Sciences},
volume = {136},
number = {2},
pages = {1023-1051},
year = {2023},
issn = {1526-1492},
doi = {https://doi.org/10.32604/cmes.2023.023897},
url = {https://www.sciencedirect.com/science/article/pii/S152614922300276X},
author = {Francisco José García-Peñalvo and Andrea Vázquez-Ingelmo and Alicia García-Holgado},
keywords = {SLR, systematic literature review, artificial intelligence, machine learning, algorithm recommendation, heuristics, explainability},
abstract = {The exponential use of artificial intelligence (AI) to solve and automated complex tasks has catapulted its popularity generating some challenges that need to be addressed. While AI is a powerful means to discover interesting patterns and obtain predictive models, the use of these algorithms comes with a great responsibility, as an incomplete or unbalanced set of training data or an unproper interpretation of the models’ outcomes could result in misleading conclusions that ultimately could become very dangerous. For these reasons, it is important to rely on expert knowledge when applying these methods. However, not every user can count on this specific expertise; non-AI-expert users could also benefit from applying these powerful algorithms to their domain problems, but they need basic guidelines to obtain the most out of AI models. The goal of this work is to present a systematic review of the literature to analyze studies whose outcomes are explainable rules and heuristics to select suitable AI algorithms given a set of input features. The systematic review follows the methodology proposed by Kitchenham and other authors in the field of software engineering. As a result, 9 papers that tackle AI algorithm recommendation through tangible and traceable rules and heuristics were collected. The reduced number of retrieved papers suggests a lack of reporting explicit rules and heuristics when testing the suitability and performance of AI algorithms.}
}
@article{LWAKATARE2020106368,
title = {Large-scale machine learning systems in real-world industrial settings: A review of challenges and solutions},
journal = {Information and Software Technology},
volume = {127},
pages = {106368},
year = {2020},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2020.106368},
url = {https://www.sciencedirect.com/science/article/pii/S0950584920301373},
author = {Lucy Ellen Lwakatare and Aiswarya Raj and Ivica Crnkovic and Jan Bosch and Helena Holmström Olsson},
keywords = {Machine learning systems, Software engineering, Industrial settings, Challenges, Solutions, SLR},
abstract = {Background: Developing and maintaining large scale machine learning (ML) based software systems in an industrial setting is challenging. There are no well-established development guidelines, but the literature contains reports on how companies develop and maintain deployed ML-based software systems. Objective: This study aims to survey the literature related to development and maintenance of large scale ML-based systems in industrial settings in order to provide a synthesis of the challenges that practitioners face. In addition, we identify solutions used to address some of these challenges. Method: A systematic literature review was conducted and we identified 72 papers related to development and maintenance of large scale ML-based software systems in industrial settings. The selected articles were qualitatively analyzed by extracting challenges and solutions. The challenges and solutions were thematically synthesized into four quality attributes: adaptability, scalability, safety and privacy. The analysis was done in relation to ML workflow, i.e. data acquisition, training, evaluation, and deployment. Results: We identified a total of 23 challenges and 8 solutions related to development and maintenance of large scale ML-based software systems in industrial settings including six different domains. Challenges were most often reported in relation to adaptability and scalability. Safety and privacy challenges had the least reported solutions. Conclusion: The development and maintenance on large-scale ML-based systems in industrial settings introduce new challenges specific for ML, and for the known challenges characteristic for these types of systems, require new methods in overcoming the challenges. The identified challenges highlight important concerns in ML system development practice and the lack of solutions point to directions for future research.}
}
@article{MOLLERI2023111771,
title = {Backsourcing of IT with focus on software development—A systematic literature review},
journal = {Journal of Systems and Software},
volume = {204},
pages = {111771},
year = {2023},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2023.111771},
url = {https://www.sciencedirect.com/science/article/pii/S0164121223001668},
author = {Jefferson Seide Molléri and Casper Lassenius and Magne Jørgensen},
keywords = {Backsourcing, Software development, Software engineering management, Information technology, Systematic literature review},
abstract = {Context:
Backsourcing is the process of insourcing previously outsourced activities. Backsourcing can be a viable alternative when companies experience environmental or strategic changes, or challenges with outsourcing. While outsourcing and related processes have been extensively studied, few studies report experiences with backsourcing.
Objectives:
We summarize the results of the research literature on backsourcing of IT, with a focus on software development. By identifying practically relevant experience, we present findings that may help companies considering backsourcing. In addition, we identify gaps in the current research literature and point out areas for future work.
Method:
Our systematic literature review (SLR) started with a search for empirical studies on the backsourcing of IT. From each study, we identified the context in which backsourcing occurred, the factors leading to the decision, the backsourcing process, and the outcomes of backsourcing. We employed inductive coding to extract textual data from the papers and qualitative cross-case analysis to synthesize the evidence.
Results:
We identified 17 papers that reported 26 cases of backsourcing, six of which were related to software development. The cases came from a variety of contexts. The most common reasons for backsourcing were improving quality, reducing costs, and regaining control of outsourced activities. We model the backsourcing process as containing five sub-processes: change management, vendor relationship management, competence building, organizational build-up, and transfer of ownership. We identified 14 positive outcomes and nine negative outcomes of backsourcing. We also aggregated the evidence and detailed three relationships of potential use to companies considering backsourcing. Finally, we have highlighted the knowledge areas of software engineering associated with the backsourcing of software development.
Conclusion:
The backsourcing of IT is a complex process; its implementation depends on the prior outsourcing relationship and other contextual factors. Our systematic literature review contributes to a better understanding of this process by identifying its components and their relationships based on the peer-reviewed literature. Our results can serve as a motivation and baseline for further research on backsourcing and provide guidelines and process fragments from which practitioners can benefit when they engage in backsourcing.}
}
@article{ZHANG2011625,
title = {Identifying relevant studies in software engineering},
journal = {Information and Software Technology},
volume = {53},
number = {6},
pages = {625-637},
year = {2011},
note = {Special Section: Best papers from the APSEC},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2010.12.010},
url = {https://www.sciencedirect.com/science/article/pii/S0950584910002260},
author = {He Zhang and Muhammad Ali Babar and Paolo Tell},
keywords = {Search strategy, Quasi-gold standard, Systematic literature review, Evidence-based software engineering},
abstract = {Context
Systematic literature review (SLR) has become an important research methodology in software engineering since the introduction of evidence-based software engineering (EBSE) in 2004. One critical step in applying this methodology is to design and execute appropriate and effective search strategy. This is a time-consuming and error-prone step, which needs to be carefully planned and implemented. There is an apparent need for a systematic approach to designing, executing, and evaluating a suitable search strategy for optimally retrieving the target literature from digital libraries.
Objective
The main objective of the research reported in this paper is to improve the search step of undertaking SLRs in software engineering (SE) by devising and evaluating systematic and practical approaches to identifying relevant studies in SE.
Method
We have systematically selected and analytically studied a large number of papers (SLRs) to understand the state-of-the-practice of search strategies in EBSE. Having identified the limitations of the current ad-hoc nature of search strategies used by SE researchers for SLRs, we have devised a systematic and evidence-based approach to developing and executing optimal search strategies in SLRs. The proposed approach incorporates the concept of ‘quasi-gold standard’ (QGS), which consists of collection of known studies, and corresponding ‘quasi-sensitivity’ into the search process for evaluating search performance.
Results
We conducted two participant–observer case studies to demonstrate and evaluate the adoption of the proposed QGS-based systematic search approach in support of SLRs in SE research.
Conclusion
We report their findings based on the case studies that the approach is able to improve the rigor of search process in an SLR, as well as it can serve as a supplement to the guidelines for SLRs in EBSE. We plan to further evaluate the proposed approach using a series of case studies on varying research topics in SE.}
}
@article{ALI201948,
title = {A critical appraisal tool for systematic literature reviews in software engineering},
journal = {Information and Software Technology},
volume = {112},
pages = {48-50},
year = {2019},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2019.04.006},
url = {https://www.sciencedirect.com/science/article/pii/S0950584919300771},
author = {Nauman bin Ali and Muhammad Usman},
keywords = {Systematic literature reviews, Quality assessment, Software engineering, Critical appraisal tools, AMSTAR},
abstract = {Context: Methodological research on systematic literature reviews (SLRs) in Software Engineering (SE) has so far focused on developing and evaluating guidelines for conducting systematic reviews. However, the support for quality assessment of completed SLRs has not received the same level of attention. Objective: To raise awareness of the need for a critical appraisal tool (CAT) for assessing the quality of SLRs in SE. To initiate a community-based effort towards the development of such a tool. Method: We reviewed the literature on the quality assessment of SLRs to identify the frequently used CATs in SE and other fields. Results: We identified that the CATs currently used is SE were borrowed from medicine, but have not kept pace with substantial advancements in the field of medicine. Conclusion: In this paper, we have argued the need for a CAT for quality appraisal of SLRs in SE. We have also identified a tool that has the potential for application in SE. Furthermore, we have presented our approach for adapting this state-of-the-art CAT for assessing SLRs in SE.}
}
@article{DOSSANTOS2024107551,
title = {Sustainable systematic literature reviews},
journal = {Information and Software Technology},
volume = {176},
pages = {107551},
year = {2024},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2024.107551},
url = {https://www.sciencedirect.com/science/article/pii/S0950584924001563},
author = {Vinicius {dos Santos} and Anderson Y. Iwazaki and Katia R. Felizardo and Érica F. {de Souza} and Elisa Y. Nakagawa},
keywords = {Secondary study, Systematic literature review, SLR, Sustainability},
abstract = {Context:
Systematic Literature Reviews (SLR) have been recognized as an important research method for summarizing evidence in Software Engineering (SE). At the same, SLR still presents several problems, such as the high resource consumption (mainly human resources) and lack of effective impact on SE practitioners, although much research has already been done.
Objective:
The main goal of this paper is to explore the concept of sustainability in the SLR area, intending to contribute to understanding better and solving such problems in an integrated way. More specifically, this paper characterizes what sustainable SLR are, their core characteristics, critical factors (i.e., sensitive points in the SLR process), and guidelines for conducting such SLR.
Methods:
We performed a meta-ethnographic study to find key concepts of sustainable software systems and transpose them to sustainable SLR. For this, we systematically selected 16 studies about sustainable software systems and 14 distinguished studies about SLR. Following, we extracted the main keywords and metaphors, determined how both areas are correlated, and transposed them to obtain a set of core characteristics of sustainable SLR as well as critical factors and guidelines. Additionally, we validated them with specialists using the Delphi method.
Results:
We found 15 core characteristics that offer a broad view of sustainable SLR, 15 critical factors in the SLR process that should be carefully addressed when conducting and updating SLR, and also 16 guidelines to manage SLR from the sustainability perspective.
Conclusion:
The concept of sustainability in SLR can contribute to solving SLR problems in a more integrated way, while this work could change the mindset of the SLR community about the need to conduct sustainable SLR.}
}
@article{PAIVA2021110819,
title = {Accessibility and Software Engineering Processes: A Systematic Literature Review},
journal = {Journal of Systems and Software},
volume = {171},
pages = {110819},
year = {2021},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2020.110819},
url = {https://www.sciencedirect.com/science/article/pii/S0164121220302168},
author = {Débora Maria Barroso Paiva and André Pimenta Freire and Renata Pontin {de Mattos Fortes}},
keywords = {Accessibility, Software Engineering, Systematic Literature Review, Design for disabilities, Methods for accessibility},
abstract = {Guidelines, techniques, and methods have been presented in the literature in recent years to contribute to the development of accessible software and to promote digital inclusion. Considering that software product quality depends on the quality of the development process, researchers have investigated how to include accessibility during the software development process in order to obtain accessible software. Two Systematic Literature Reviews (SLR) have been conducted in the past to identify such research initiatives. This paper presents a new SLR, considering the period from 2011 to 2019. The review of 94 primary studies showed the distribution of publications on different phases of the software life cycle, mainly the design and testing phases. The study also identified, for the first time, papers about accessibility and software process establishment. This result reinforces that, in fact, accessibility is not characterized as a property of the final software only. Instead, it evolves over the software life cycle. Besides, this study aims to provide designers and developers with an updated view of methods, tools, and other assets that contribute to process enrichment, valuing accessibility, as well as shows the gaps and challenges which deserve to be investigated.}
}
@article{KITCHENHAM2010792,
title = {Systematic literature reviews in software engineering – A tertiary study},
journal = {Information and Software Technology},
volume = {52},
number = {8},
pages = {792-805},
year = {2010},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2010.03.006},
url = {https://www.sciencedirect.com/science/article/pii/S0950584910000467},
author = {Barbara Kitchenham and Rialette Pretorius and David Budgen and O. {Pearl Brereton} and Mark Turner and Mahmood Niazi and Stephen Linkman},
keywords = {Systematic literature review, Mapping study, Software engineering, Tertiary study},
abstract = {Context
In a previous study, we reported on a systematic literature review (SLR), based on a manual search of 13 journals and conferences undertaken in the period 1st January 2004 to 30th June 2007.
Objective
The aim of this on-going research is to provide an annotated catalogue of SLRs available to software engineering researchers and practitioners. This study updates our previous study using a broad automated search.
Method
We performed a broad automated search to find SLRs published in the time period 1st January 2004 to 30th June 2008. We contrast the number, quality and source of these SLRs with SLRs found in the original study.
Results
Our broad search found an additional 35 SLRs corresponding to 33 unique studies. Of these papers, 17 appeared relevant to the undergraduate educational curriculum and 12 appeared of possible interest to practitioners. The number of SLRs being published is increasing. The quality of papers in conferences and workshops has improved as more researchers use SLR guidelines.
Conclusion
SLRs appear to have gone past the stage of being used solely by innovators but cannot yet be considered a main stream software engineering research methodology. They are addressing a wide range of topics but still have limitations, such as often failing to assess primary study quality.}
}
@article{FEBRERO201618,
title = {Software reliability modeling based on ISO/IEC SQuaRE},
journal = {Information and Software Technology},
volume = {70},
pages = {18-29},
year = {2016},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2015.09.006},
url = {https://www.sciencedirect.com/science/article/pii/S0950584915001652},
author = {Felipe Febrero and Coral Calero and M. {Ángeles Moraga}},
keywords = {Software quality, Software reliability modeling, International standard, SQuaRE},
abstract = {Context
The increasing dependence of our society on software driven systems has led Software Reliability to become a key factor as well as making it a highly active research area with hundreds of works being published every year. It would, however, appear that this activity is much more reduced as regards how to apply representative international standards on Product Quality to industrial environments, with just a few works on Standard Based software reliability modeling (SB-SRM). This is surprising given the relevance of such International Standards in industry.
Objective
To identify and analyze the existing works on the modeling of Software Reliability based on International Standards as the starting point for a reliability assessment proposal based on ISO/IEC-25000 “Software Product Quality Requirements and Evaluation” (SQuaRE) series.
Method
The work methodology is based on the guidelines provided in Evidence Based Software Engineering for Systematic Literature Reviews (SLR).
Results
A total of 1820 works were obtained as a result of the SLR search, more than 800 primary studies were selected after data filtering. After scrutiny, over thirty of those were thoroughly analyze, the results obtained show a very limited application of SB-SRM particularly to industrial environment.
Conclusion
Our analysis point to the complexity of the proposed models together with the difficulties involved in applying them to the management of engineering activities as a root cause to be considered for such limited application. The various stakeholder needs are also a point of paramount importance that should be better covered if the industrial applicability of the proposed models is to be increased.}
}
@article{DEHDARIRAD2020169,
title = {Scholarly publication venue recommender systems},
journal = {Data Technologies and Applications},
volume = {54},
number = {2},
pages = {169-191},
year = {2020},
issn = {2514-9288},
doi = {https://doi.org/10.1108/DTA-08-2019-0135},
url = {https://www.sciencedirect.com/science/article/pii/S2514928820000474},
author = {Hossein Dehdarirad and Javad Ghazimirsaeid and Ammar Jalalimanesh},
keywords = {Recommender systems, Recommendation systems, Venue, Journal, Conference},
abstract = {Purpose
The purpose of this investigation is to identify, evaluate, integrate and summarize relevant and qualified papers through conducting a systematic literature review (SLR) on the application of recommender systems (RSs) to suggest a scholarly publication venue for researcher's paper.
Design/methodology/approach
To identify the relevant papers published up to August 11, 2018, an SLR study on four databases (Scopus, Web of Science, IEEE Xplore and ScienceDirect) was conducted. We pursued the guidelines presented by Kitchenham and Charters (2007) for performing SLRs in software engineering. The papers were analyzed based on data sources, RSs classes, techniques/methods/algorithms, datasets, evaluation methodologies and metrics, as well as future directions.
Findings
A total of 32 papers were identified. The most data sources exploited in these papers were textual (title/abstract/keywords) and co-authorship data. The RS classes in the selected papers were almost equally used. DBLP was the main dataset utilized. Cosine similarity, social network analysis (SNA) and term frequency–inverse document frequency (TF–IDF) algorithm were frequently used. In terms of evaluation methodologies, 24 papers applied only offline evaluations. Furthermore, precision, accuracy and recall metrics were the popular performance metrics. In the reviewed papers, “use more datasets” and “new algorithms” were frequently mentioned in the future work part as well as conclusions.
Originality/value
Given that a review study has not been conducted in this area, this paper can provide an insight into the current status in this area and may also contribute to future research in this field.}
}
@article{PETERSEN20151,
title = {Guidelines for conducting systematic mapping studies in software engineering: An update},
journal = {Information and Software Technology},
volume = {64},
pages = {1-18},
year = {2015},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2015.03.007},
url = {https://www.sciencedirect.com/science/article/pii/S0950584915000646},
author = {Kai Petersen and Sairam Vakkalanka and Ludwik Kuzniarz},
keywords = {Systematic mapping studies, Software engineering, Guidelines},
abstract = {Context
Systematic mapping studies are used to structure a research area, while systematic reviews are focused on gathering and synthesizing evidence. The most recent guidelines for systematic mapping are from 2008. Since that time, many suggestions have been made of how to improve systematic literature reviews (SLRs). There is a need to evaluate how researchers conduct the process of systematic mapping and identify how the guidelines should be updated based on the lessons learned from the existing systematic maps and SLR guidelines.
Objective
To identify how the systematic mapping process is conducted (including search, study selection, analysis and presentation of data, etc.); to identify improvement potentials in conducting the systematic mapping process and updating the guidelines accordingly.
Method
We conducted a systematic mapping study of systematic maps, considering some practices of systematic review guidelines as well (in particular in relation to defining the search and to conduct a quality assessment).
Results
In a large number of studies multiple guidelines are used and combined, which leads to different ways in conducting mapping studies. The reason for combining guidelines was that they differed in the recommendations given.
Conclusion
The most frequently followed guidelines are not sufficient alone. Hence, there was a need to provide an update of how to conduct systematic mapping studies. New guidelines have been proposed consolidating existing findings.}
}
@article{DIXIT2022100314,
title = {Towards user-centered and legally relevant smart-contract development: A systematic literature review},
journal = {Journal of Industrial Information Integration},
volume = {26},
pages = {100314},
year = {2022},
issn = {2452-414X},
doi = {https://doi.org/10.1016/j.jii.2021.100314},
url = {https://www.sciencedirect.com/science/article/pii/S2452414X21001072},
author = {Abhishek Dixit and Vipin Deval and Vimal Dwivedi and Alex Norta and Dirk Draheim},
keywords = {Blockchain, Smart contract, Ricardian contract, Business collaboration, Legal relevance},
abstract = {Smart contracts (SC) run on blockchain technology (BCT) to implement agreements between several parties. As BCT grows, organizations aim to automate their processes and engage in business collaborations using SCs. The translation of contract semantics into SC language semantics is difficult due to ambiguous contractual interpretation by the several parties and the developers. Also, an SC language itself misses the language constructs needed for semantically expressing collaboration terms. This leads to SC coding errors that result in contractual conflicts over transactions during the performance of SCs and thus, novel SC solutions incur high development and maintenance costs. Various model-based and no/low code development approaches address this issue by enabling higher abstractions in SC development. Still, the question remains unanswered how contractual parties, i.e., end-users with non-IT skills, manage to develop legally relevant SCs with ease. This study aims to (1) identify and categorize the state of the art of SC automation models, in terms of their technical features, and their legal significance, and to (2) identify new research opportunities. The review has been conducted as a systematic literature review (SLR) that follows the guidelines proposed by Kitchenham for performing SLRs in software-engineering. As a result of the implementation of the review protocol, 1367 papers are collected, and 33 of them are selected for extraction and analysis. The contributions of this article are threefold: (1) 10 different SC automation models/frameworks are identified and classified according to their technical and implementation features; (2) 11 different legal contract parameters are identified and categorized into 4 legal criteria classes; (3) a comparative analysis of SC-automation models in the context of their legal significance is conducted that identifies the degrees to which the SC-automation models are considered legally relevant. As a conclusion, we produce a comprehensive and replicable overview of the state of the art of SC automation models and a systematic measure of their legal significance to benefit practitioners in the field.}
}
@article{CABALLEROESPINOSA2023107078,
title = {Community smells—The sources of social debt: A systematic literature review},
journal = {Information and Software Technology},
volume = {153},
pages = {107078},
year = {2023},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2022.107078},
url = {https://www.sciencedirect.com/science/article/pii/S0950584922001872},
author = {Eduardo Caballero-Espinosa and Jeffrey C. Carver and Kimberly Stowers},
keywords = {Community smells, Social debt, Software development teams, Systematic literature review, Teamwork, Team performance},
abstract = {Context:
Social debt describes the accumulation of unforeseen project costs (or potential costs) from sub-optimal software development processes. Community smells are sociotechnical anti-patterns and one source of social debt. Because community smells impact software teams, development processes, outcomes, and organizations, we to understand their impact on software engineering.
Objective:
To provide an overview of community smells in social debt, based on published literature, and describe future research.
Method:
We conducted a systematic literature review (SLR) to identify properties, understand origins and evolution, and describe the emergence of community smells. This SLR explains the impact of community smells on teamwork and team performance.
Results:
We include 25 studies. Social debt describes the impacts of poor socio-technical decisions on work environments, people, software products, and society. For each of the 30 community smells identified as sources of social debt, we provide a detailed description, management approaches, organizational strategies, and mitigation effectiveness. We identify five groups of management approaches: organizational strategies, frameworks, models, tools, and guidelines. We describe 11 common properties of community smells. We develop the Community Smell Stages Framework to concisely describe the origin and evolution of community smells. We then describe the causes and effects for each community smell. We identify and describe 8 types of causes and 11 types of effects related to the community smells. Finally, we provide 8 comprehensive Sankey diagrams that offer insights into threats the community smells pose to teamwork factors and team performance.
Conclusion:
Community smells explain the influence work conditions have on software developers. The literature is scarce and focuses on a small number of community smells. Thus, the community smells still need more research. This review helps by organizing the state of the art about community smells. Our contributions provide motivations for future research and provide educational material for software engineering professionals.}
}
@article{NIRMANI2025107753,
title = {A systematic literature review on task recommendation systems for crowdsourced software engineering},
journal = {Information and Software Technology},
volume = {184},
pages = {107753},
year = {2025},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2025.107753},
url = {https://www.sciencedirect.com/science/article/pii/S0950584925000928},
author = {Shashiwadana Nirmani and Mojtaba Shahin and Hourieh Khalajzadeh and Xiao Liu},
keywords = {Crowdsourced software engineering, Task recommendation, Systematic literature review, GitHub, TopCoder},
abstract = {Context:
Crowdsourced Software Engineering (CSE) offers outsourcing work to software practitioners by leveraging a global online workforce. However, these software practitioners struggle to identify suitable tasks due to the variety of options available. Hence, there have been a growing number of studies on introducing recommendation systems to recommend CSE tasks to software practitioners.
Objective:
The goal of this study is to analyze the existing CSE task recommendation systems, investigating their extracted data, recommendation methods, key advantages and limitations, recommended task types, the use of human factors in recommendations, popular platforms, and features used to make recommendations.
Methods:
This SLR was conducted according to the Kitchenham and Charters’ guidelines. We used manual and automatic search strategies without putting any time limitation for searching the relevant papers.
Results:
We selected 65 primary studies for data extraction, analysis, and synthesis based on our predefined inclusion and exclusion criteria. Based on our data analysis results, we classified the extracted information into four categories according to the data acquisition sources: Software Practitioner’s Profile, Task or Project, Previous Contributions, and Direct Data Collection. We also organized the proposed recommendation systems into a taxonomy and identified key advantages, such as increased performance, accuracy, and optimized solutions. In addition, we identified the limitations of these systems, such as inadequate or biased recommendations and lack of generalizability. Our results revealed that human factors play a major role in CSE task recommendation. Further, we identified five popular task types recommended, popular platforms, and their features used in task recommendation. We also provided recommendations for future research directions.
Conclusion:
This SLR provides insights into current trends, gaps, and future research directions in CSE task recommendation systems such as the need for comprehensive evaluation, standardized evaluation metrics, and benchmarking in future studies, transferring knowledge from other platforms to address cold start problem.}
}
@article{WOHLIN2020106366,
title = {Guidelines for the search strategy to update systematic literature reviews in software engineering},
journal = {Information and Software Technology},
volume = {127},
pages = {106366},
year = {2020},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2020.106366},
url = {https://www.sciencedirect.com/science/article/pii/S095058491930223X},
author = {Claes Wohlin and Emilia Mendes and Katia Romero Felizardo and Marcos Kalinowski},
keywords = {Systematic literature review update, Systematic literature reviews, Software engineering, Snowballing, Searching for evidence},
abstract = {Context
Systematic Literature Reviews (SLRs) have been adopted within Software Engineering (SE) for more than a decade to provide meaningful summaries of evidence on several topics. Many of these SLRs are now potentially not fully up-to-date, and there are no standard proposals on how to update SLRs in SE.
Objective
The objective of this paper is to propose guidelines on how to best search for evidence when updating SLRs in SE, and to evaluate these guidelines using an SLR that was not employed during the formulation of the guidelines.
Method
To propose our guidelines, we compare and discuss outcomes from applying different search strategies to identify primary studies in a published SLR, an SLR update, and two replications in the area of effort estimation. These guidelines are then evaluated using an SLR in the area of software ecosystems, its update and a replication.
Results
The use of a single iteration forward snowballing with Google Scholar, and employing as a seed set the original SLR and its primary studies is the most cost-effective way to search for new evidence when updating SLRs. Furthermore, the importance of having more than one researcher involved in the selection of papers when applying the inclusion and exclusion criteria is highlighted through the results.
Conclusions
Our proposed guidelines formulated based upon an effort estimation SLR, its update and two replications, were supported when using an SLR in the area of software ecosystems, its update and a replication. Therefore, we put forward that our guidelines ought to be adopted for updating SLRs in SE.}
}
@article{GOYAL2025106578,
title = {A systematic review on AI based class imbalance handling in software defect prediction},
journal = {Results in Engineering},
volume = {27},
pages = {106578},
year = {2025},
issn = {2590-1230},
doi = {https://doi.org/10.1016/j.rineng.2025.106578},
url = {https://www.sciencedirect.com/science/article/pii/S2590123025026477},
author = {Somya R. Goyal},
keywords = {Software defect prediction, Systematic literature review, Class imbalance, Sampling, Ensemble learning, Evidence based software engineering},
abstract = {Software defect prediction is to predict the fault-prone modules assisting the development team to focus the testing efforts on the faulty modules, preserving the testing resources and leading to reduced costs of the product. A huge range of diversified AI based mechanisms are available to handle the class imbalance issue underlying the defect datasets that would hinder the performance of prediction models. This study assesses the timeline of evolution of AI applications in the domain of software defect prediction and culminates a Systematic Review over the period of 25 years from 2000 to 2025 dedicatedly focusing on class imbalance issue. To conduct this review, the PRISMA guidelines and statistical hypothesis testing approach are followed. The aim of this study is to assess the AI practices being applied to strengthen prediction models while alleviating the class imbalance. The study about the publication trend in the past 25 years reveals that majority of defect datasets (∼77%) suffer from class imbalances and data sampling is the most popular class imbalance handling technique. Machine learning techniques have been popular and now the paradigm is shifting towards deep models and transfer learning. Explainable AI and LLMs are now the names for defect prediction models over industry datasets. This review provides a holistic view about the defect datasets, learning models, evaluation criteria, class imbalance handling techniques that will pave guidelines and references to the future researchers and software engineers to achieve more reliable and effective software defect prediction models with appropriately adapting the AI techniques to handle the class imbalance conditions.}
}
@article{GUNATILAKE2024107489,
title = {The impact of human aspects on the interactions between software developers and end-users in software engineering: A systematic literature review},
journal = {Information and Software Technology},
volume = {173},
pages = {107489},
year = {2024},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2024.107489},
url = {https://www.sciencedirect.com/science/article/pii/S0950584924000946},
author = {Hashini Gunatilake and John Grundy and Rashina Hoda and Ingo Mueller},
keywords = {Systematic literature review, Human aspects, Software developers, Software users, Software engineering},
abstract = {Context:
Research on human aspects within the field of software engineering (SE) has been steadily gaining prominence in recent years. These human aspects have a significant impact on SE due to the inherently interactive and collaborative nature of the discipline.
Objective:
In this paper, we present a systematic literature review (SLR) on human aspects affecting developer-user interactions. The objective of this SLR is to plot the current landscape of primary studies by examining the human aspects that influence developer-user interactions, their implications, interrelationships, and how existing studies address these implications.
Method:
We conducted this SLR following the guidelines proposed by Kitchenham et al. We performed a comprehensive search in six digital databases, and an exhaustive backward and forward snowballing process. We selected 46 primary studies for data extraction.
Results:
We identified various human aspects affecting developer-user interactions in SE, assessed their interrelationships, identified their positive impacts and mitigation strategies for negative effects. We present specific recommendations derived from the identified research gaps.
Conclusion:
Our findings suggest the importance of leveraging positive effects and addressing negative effects in developer-user interactions through the implementation of effective mitigation strategies. These insights may benefit software practitioners for effective user interactions, and the recommendations proposed by this SLR may aid the research community in further human aspects related studies.}
}
@article{CRUZBENITO2019118,
title = {Analyzing the software architectures supporting HCI/HMI processes through a systematic review of the literature},
journal = {Telematics and Informatics},
volume = {38},
pages = {118-132},
year = {2019},
issn = {0736-5853},
doi = {https://doi.org/10.1016/j.tele.2018.09.006},
url = {https://www.sciencedirect.com/science/article/pii/S0736585318305392},
author = {Juan Cruz-Benito and Francisco J. García-Peñalvo and Roberto Therón},
keywords = {Human-Computer Interaction, Human-Machine Interaction, Software Architectures, Systematic Literature Review},
abstract = {Many researchers have dealt with Human-Computer Interaction or Human-Machine Interaction by building or designing software architectures that facilitate the users’ interaction or recognize users’ inputs to the generate proper responses. Many studies include these approaches in different research areas: from research in healthcare to mobile environments, robotics, etc. Interaction is seen as a critical concept, and the work for its improvement is a crucial factor for many platforms, systems, and business domains. The goal of this manuscript is to present a systematic review of the literature to identify, analyze and classify the published approaches to support or enhance Human-Computer Interaction or Human-Machine Interaction from the perspective of software architectures. The method followed is the systematic review following the guidelines related to Systematic Literature Reviews methods such as the one proposed by Kitchenham and other authors in the field of software engineering. As results, this study identified 39 papers that included software architectures to improve or analyze Human-Computer Interaction or Human-Machine Interaction. Three main approaches were found on software architectures: layered architectures, modular architectures, and architectures based on software agents, but they lacked standardization and were mainly ad-hoc solutions. The primary interfaces covered were those related to Graphical User Interfaces (GUIs) and multimodal/natural ones. The primary application domain detected were in multimodal systems. The main purpose of most of the papers was to support multimodal interaction. Some conclusions achieved are that the generic solutions to support or analyze HCI/HMI processes are still rare in the literature. Despite many works dealing with this topic and its issues and challenges, it is necessary to keep on improving the research in this area through the application of standard techniques and solutions, exploring new ways of analyzing and interpreting interaction, escaping from ad-hoc solutions or evaluating the solutions proposed.}
}