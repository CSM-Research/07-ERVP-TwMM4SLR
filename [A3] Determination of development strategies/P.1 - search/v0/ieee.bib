@INPROCEEDINGS{9476586,
  author={Almeida, Cleuton},
  booktitle={2021 16th Iberian Conference on Information Systems and Technologies (CISTI)}, 
  title={Guideline Proposal for Quality Evaluation of for Research in Education Research in Software Engineering}, 
  year={2021},
  volume={},
  number={},
  pages={1-4},
  abstract={Context: The lack of rigor in research in Computer Science Education, including Software Engineering, has already been discussed and examined in previous researches of the literature in both the theoretical and methodological aspects, which may result in questionable evidence. Aim: Improvement of planning conditions for research in Education in Software Engineering through a Guideline. Methodology: To achieve this objective, a Systematic Literature Review will be carried out to ascertain the gaps found in the literature in Education in Software Engineering, in addition to Interviews with researchers in Education in Software Engineering to report the problems found in research. From this, a Guideline will be modeled using the method Grounded Theory. For model validation, a Survey and Focus groups with researchers in education in Software Engineering. And finally, apply it in a Case Study with researchers in Education in Software Engineering to present the practical contributions of the proposed Guideline.},
  keywords={Systematics;Education;Medical services;Human factors;Planning;Proposals;Interviews;Software Engineering Education Research;Quality Criteria;Guideline},
  doi={10.23919/CISTI52073.2021.9476586},
  ISSN={2166-0727},
  month={June},}@INPROCEEDINGS{6272508,
  author={de França, Breno Bernard Nicolau and Travassos, Guilherme Horta},
  booktitle={16th International Conference on Evaluation & Assessment in Software Engineering (EASE 2012)}, 
  title={Reporting guidelines for simulation-based studies in software engineering}, 
  year={2012},
  volume={},
  number={},
  pages={156-160},
  abstract={Background: Some scientific fields, such as automobile, drugs discovery or engineer have used simulation-based studies (SBS) to faster the observation of phenomena and evolve knowledge. All of them organize their working structure to perform computerized experiments based on explicit research protocols and evidence. The benefits have been many and great advancements are continuously obtained for the society. However, could the same approach be observed in Software Engineering (SE)? Are there research protocols and evidence based models available in SE for supporting SBS? Are the studies reports good enough to support their understanding and replication? AIM: To characterize SBS in SE and organize a set of reporting guidelines aiming at improving SBS' understandability, replicability, generalization and validity. METHOD: To undertake a secondary study to characterize SBS. Besides, to assess the quality of reports to understand the usually reported information regarding SBS. RESULTS: From 108 selected papers, it has been observed several relevant initiatives regarding SBS in software engineering. However, most of the reports lack information concerned with the research protocol, simulation model building and evaluation, used data, among others. SBS results are usually specific, making their generalization and comparison hard. No reporting standard has been observed. CONCLUSIONS: Advancements can be observed in SBS in Software Engineering. However, the lack of reporting consistency can reduce understandability, replicability, generalization and compromise their validity. Therefore, an initial set of guidelines is proposed aiming at improving SBS report quality. Further evaluation must be accomplished to assess the guidelines feasibility when used to report SBS in Software Engineering.},
  keywords={Computer Simulation;Simulation Studies;Software Engineering;Systematic Review;Guideline},
  doi={10.1049/ic.2012.0019},
  ISSN={},
  month={May},}@INPROCEEDINGS{6475394,
  author={Jalali, Samireh and Wohlin, Claes},
  booktitle={Proceedings of the 2012 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement}, 
  title={Systematic literature studies: Database searches vs. backward snowballing}, 
  year={2012},
  volume={},
  number={},
  pages={29-38},
  abstract={Systematic studies of the literature can be done in different ways. In particular, different guidelines propose different first steps in their recommendations, e.g. start with search strings in different databases or start with the reference lists of a starting set of papers. In software engineering, the main recommended first step is using search strings in a number of databases, while in information systems, snowballing has been recommended as the first step. This paper compares the two different search approaches for conducting literature review studies. The comparison is conducted by searching for articles addressing “Agile practices in global software engineering”. The focus of the paper is on evaluating the two different search approaches. Despite the differences in the included papers, the conclusions and the patterns found in both studies are quite similar. The strengths and weaknesses of each first step are discussed separately and in comparison with each other. It is concluded that none of the first steps is outperforming the other, and the choice of guideline to follow, and hence the first step, may be context-specific, i.e. depending on the area of study.},
  keywords={Databases;Guidelines;Systematics;Search problems;Software engineering;Reliability;Google;Systematic Literature Review;Snowballing;Agile Practices;Global Software Engineering},
  doi={10.1145/2372251.2372257},
  ISSN={1949-3789},
  month={Sep.},}@ARTICLE{10740293,
  author={Durrani, Usman Khan and Akpinar, Mustafa and Fatih Adak, Muhammed and Talha Kabakus, Abdullah and Maruf Öztürk, Muhammed and Saleh, Mohammed},
  journal={IEEE Access}, 
  title={A Decade of Progress: A Systematic Literature Review on the Integration of AI in Software Engineering Phases and Activities (2013-2023)}, 
  year={2024},
  volume={12},
  number={},
  pages={171185-171204},
  abstract={The synergy between software engineering (SE) and artificial intelligence (AI) catalyzes software development, as numerous recent studies illustrate an intensified intersection between these domains. This systematic literature review examines the integration of AI techniques or methodologies across SE phases and related activities spanning from 2013 to 2023, resulting in the selection of 110 research papers. Investigating the profound influence of AI techniques, including machine learning, deep learning, natural language processing, optimization algorithms, and expert systems, across various SE phases—such as planning, requirement engineering, design, development, testing, deployment, and maintenance—is the focal point of this study. Notably, the extensive adoption of machine learning and deep learning algorithms in the development and testing phases has enhanced software quality through defect prediction, code recommendation, and vulnerability detection initiatives. Furthermore, natural language processing’s role in automating requirements classification and sentiment analysis has streamlined SE practices. Optimization algorithms have also demonstrated efficacy in refining SE activities such as feature location and software repair action predictions, augmenting precision and efficiency in maintenance endeavors. Prospective research emphasizes the imperative of interpretable AI models and the exploration of novel AI paradigms, including explainable AI and reinforcement learning, to promote ethical and efficient software development practices. This paper fills the gap identified in AI techniques dedicated to improving SE phases. The review concludes that AI in SE is revolutionizing the discipline, enhancing software quality, efficiency, and innovation, with ongoing efforts targeting the mitigation of identified limitations and the augmentation of AI capabilities for intelligent and dependable SE.},
  keywords={Artificial intelligence;Systematics;Software;Maintenance;Testing;Optimization;Software engineering;Resource management;Encoding;Codes;AI;artificial intelligence;deep learning;expert systems;integration;machine learning;natural language processing;optimization algorithms;planning;requirement engineering;software deployment;software development;software engineering;software maintenance;software testing;systematic literature review},
  doi={10.1109/ACCESS.2024.3488904},
  ISSN={2169-3536},
  month={},}@INPROCEEDINGS{10293029,
  author={Del Carpio, Alvaro Fernández and Angarita, Leonardo Bermón},
  booktitle={2023 IEEE 14th International Conference on Software Engineering and Service Science (ICSESS)}, 
  title={Assistant Solutions in Software Engineering: A Systematic Literature Review}, 
  year={2023},
  volume={},
  number={},
  pages={93-100},
  abstract={Increasing technological advancements in developing assistants have gained attention because of its wide use in a variety of fields. In the realm of Software Engineering, developers are including these solutions in diverse software tasks. This research aims to identify and analyze the role and diversity of these solutions, including forms of interaction, functionalities, and technologies used for their implementation, evaluation, drawbacks, and current challenges. This research involves a systematic literature review of different approaches of assistant solutions in order to support software practitioners in developing their tasks. The solutions identified are oriented to recommendation systems, chatbots, and virtual assistants, covering a wide range of software processes such as requirements, design, construction, maintenance and, additionally management and process learning.},
  keywords={Systematics;Bibliographies;Virtual assistants;Prototypes;Chatbots;Software;User experience;systematic review;assistants;software engineering},
  doi={10.1109/ICSESS58500.2023.10293029},
  ISSN={2327-0594},
  month={Oct},}@INPROCEEDINGS{6613447,
  author={Kroll, Josiane and Hashmi, Sajid Ibrahim and Richardson, Ita and Audy, Jorge L.N.},
  booktitle={2013 IEEE 8th International Conference on Global Software Engineering Workshops}, 
  title={A Systematic Literature Review of Best Practices and Challenges in Follow-the-Sun Software Development}, 
  year={2013},
  volume={},
  number={},
  pages={18-23},
  abstract={Follow-the-sun (FTS) software development is a strategy used to reduce the length of software projects that are developed across globally distributed locations. However, due to communication and collaboration challenges, software companies find it difficult to adopt this development strategy during task allocation and daily project handovers. In this study, we present results from a Systematic Literature Review (SLR) performed on papers published between 1990 and 2012. Our goal was to identify best practices and challenges for FTS implementation. We found 36 best practices and 17 challenges for FTS. These results are discussed in this paper in order to indicate opportunities for future research and make our results useful for the project managers.},
  keywords={Software;Best practices;Cultural differences;Electronic mail;Global communication;Testing;Software engineering;Global software development;Follow-the-sun (FTS);best practice;challenges},
  doi={10.1109/ICGSEW.2013.10},
  ISSN={2329-6313},
  month={Aug},}@INPROCEEDINGS{7333083,
  author={Hashim, Siti Noorasmah and Abdullah, Rusli and Ibrahim, Hamidah},
  booktitle={2015 4th International Conference on Software Engineering and Computer Systems (ICSECS)}, 
  title={Collaborative Knowledge Management System Strategic Planning (CKMS2P): A Systematic Literature Review}, 
  year={2015},
  volume={},
  number={},
  pages={55-60},
  abstract={This paper is aimed to identify and review the previous studies pertaining to CKMS2P via a systematic and rigorous approach. The objective is to investigate the strategic plan or guideline on how to develop and implement an effective collaborative knowledge management system (KMS) in order to ease the decision making process. Systematic Literature Review (SLR) method is used to produce a strategic searching method to select, extract, review and discuss relevant studies concerning the research subject by adapting the guidelines established by [11]. A total of 12 previous studies carried out from 2010 till 2014 have been selected to fulfil this objective through thorough selection. Finding shows that there is a very limited study focusing on the strategic implementation of a KMS to enhance the quality of knowledge services in a collaborative environment. Although there is an increase in the studies that recommended KMS guidelines or strategic planning, the proposed solution were mostly unverified or validated. Therefore, it has become a motivation to conduct a study to propose a Collaborative KMS Strategic Planning Model that can significantly enhance the quality of knowledge services in an organization.},
  keywords={Organizations;Collaboration;Knowledge management;Guidelines;Quality assessment;Strategic planning;Data mining;knowledge management;knowledge management system;knowledge management strategy;collaborative knowledge management system strategic planning},
  doi={10.1109/ICSECS.2015.7333083},
  ISSN={},
  month={Aug},}@INPROCEEDINGS{11071436,
  author={Bin Ali, Nauman and Börstler, Jürgen},
  booktitle={2025 IEEE/ACM International Workshop on Methodological Issues with Empirical Studies in Software Engineering (WSESE)}, 
  title={On the Relevance of Paper-Type Information in Systematic Mapping Studies in Software Engineering}, 
  year={2025},
  volume={},
  number={},
  pages={44-47},
  abstract={Systematic Mapping Studies (SMSs) are valuable in evidence-based software engineering research. SMSs aim to provide an overview of research, identify gaps and trends, and assess the feasibility of conducting a more focused systematic literature review. In current guidelines for conducting SMSs, a quality assessment of the included papers is suggested only when the research questions explicitly require such a quality assessment. We agree with the recommendation that quality assessment is generally non-mandatory. However, SMSs deal with papers ranging from opinion papers to papers reporting highly rigorous empirical studies. Therefore, in this paper, we argue that analyzing the type of papers is essential for almost every intended purpose of an SMS. Otherwise, without distinguishing papers based on their types, we risk deriving a less informative or incomplete overview or, at worst, a misleading overview of research. Petersen et al. ‘encourage’ the classification of papers into six paper types as proposed by Wieringa et al.: evaluation research, solution proposal, validation research, philosophical papers, opinion papers, and personal experience papers. Given the lenient guidelines on assessing the quality of included studies, we recommend a stronger focus on classifying papers by type.},
  keywords={Systematics;Shape;Market research;Distance measurement;Quality assessment;Proposals;Knowledge transfer;Software engineering;Guidelines;Systematic literature review;Secondary study;mapping study;scoping review;scoping study;systematic map},
  doi={10.1109/WSESE66602.2025.00014},
  ISSN={},
  month={May},}@INPROCEEDINGS{10568262,
  author={Sangabriel-Alarcón, Josue and Ocharán-Hernández, Jorge Octavio and Cortés-Verdín, Karen and Limón, Xavier},
  booktitle={2023 11th International Conference in Software Engineering Research and Innovation (CONISOFT)}, 
  title={Domain-Driven Design for Microservices Architecture Systems Development: A Systematic Mapping Study}, 
  year={2023},
  volume={},
  number={},
  pages={25-34},
  abstract={Domain-Driven Design (DDD) is an approach that proposes to align business and technical concerns through analysis of the business domain. Microservices practitioners have adopted this approach in software development. However, there is no certainty of the patterns, techniques, and artifacts used. This study analyzes and reports the state of the literature on DDD usage for microservices-based systems development. This study is intended for practitioners and researchers on Microservice Architecture (MSA), DDD, or both. A systematic mapping study followed seven research questions as a guideline, resulting in 27 studies identified to answer the questions through data analysis and synthesis. As a summary of the findings: (i) The microservice identification through domain or legacy system decomposition is the main objective for which DDD was used. (ii) There were 31 MSA systems and 11 design artifacts related to DDD. (iii) Bounded context was the pattern most used for microservices design, followed by Entity and Aggregate. (iv) There were three technologies related to DDD applied in MSA systems design. (v) A total of six techniques used together with DDD were identified. (vi) Six limitations were reported in development descriptions. (vii) Sixteen proposals for MSA systems development with DDD were identified and grouped into five types. As a conclusion of this work, DDD allowed the authors to get a design solution driven by domain knowledge that was detailed using other artifacts, techniques, and proposals.},
  keywords={Technological innovation;Systematics;Microservice architectures;Computer architecture;Proposals;Object recognition;System analysis and design;Domain-Driven Design;Microservices Architecture;Microservices-based Systems Development;Systematic Mapping Study;Systematic Review},
  doi={10.1109/CONISOFT58849.2023.00014},
  ISSN={},
  month={Nov},}@ARTICLE{10924780,
  author={Turzo, Asif Kamal and Sultana, Sayma and Bosu, Amiangshu},
  journal={IEEE Transactions on Software Engineering}, 
  title={From First Patch to Long-Term Contributor: Evaluating Onboarding Recommendations for OSS Newcomers}, 
  year={2025},
  volume={51},
  number={4},
  pages={1303-1318},
  abstract={Attracting and retaining a steady stream of new contributors is crucial to ensuring the long-term survival of open-source software (OSS) projects. However, there are two key research gaps regarding recommendations for onboarding new contributors to OSS projects. First, most of the existing recommendations are based on a limited number of projects, which raises concerns about their generalizability. If a recommendation yields conflicting results in a different context, it could hinder a newcomer's onboarding process rather than help them. Second, it's unclear whether these recommendations also apply to experienced contributors. If certain recommendations are specific to newcomers, continuing to follow them after their initial contributions are accepted could hinder their chances of becoming long-term contributors. To address these gaps, we conducted a two-stage mixed-method study. In the first stage, we conducted a Systematic Literature Review (SLR) and identified 15 task-related actionable recommendations that newcomers to OSS projects can follow to improve their odds of successful onboarding. In the second stage, we conduct a large-scale empirical study of five Gerrit-based projects and 1,155 OSS projects from GitHub to assess whether those recommendations assist newcomers’ successful onboarding. Our results suggest that four recommendations positively correlate with newcomers’ first patch acceptance in most contexts. Four recommendations are context-dependent, and four indicate significant negative associations for most projects. Our results also found three newcomer-specific recommendations, which OSS joiners should abandon at non-newcomer status to increase their odds of becoming long-term contributors.},
  keywords={Systematic literature review;Measurement;Codes;Software development management;Guidelines;Open source software;Uncertainty;Training;Data mining;Aggregates;Newcomer;onboarding;software development;open source software},
  doi={10.1109/TSE.2025.3550881},
  ISSN={1939-3520},
  month={April},}@INPROCEEDINGS{10508695,
  author={Claderón-Blas, Javier A. and Cerdán, María Angélica and Sánchez-García, Ángel J. and Domíngue-Isidro, Saúl},
  booktitle={2023 Mexican International Conference on Computer Science (ENC)}, 
  title={Medical Recommender Systems: a Systematic Literature Review}, 
  year={2023},
  volume={},
  number={},
  pages={1-8},
  abstract={Medical recommender systems are applications in the field of health. These systems use Artificial Intelligence techniques to provide personalized recommendations to healthcare professionals and patients, based on available and relevant patient information. Software engineering is essential in developing medical recommender systems, as these systems must be accurate, reliable, and secure for use in clinical settings. This work presents a Systematic Literature Review based on the Kitchenham and Charters guide, in order to explore the Artificial Intelligence techniques used in this type of system, which can be incorporated or improved by software developers who participate in this type of project. Twelve primary studies were selected, where mainly machine learning approaches were identified (algorithms based on decision trees, neural networks, Bayesian classifiers and clustering such as k-means), matrix approaches, based on rules, among others. Precision, Recall, and Root Mean Square Error (RMSE) were the main measures used to evaluate the performance of these systems. Finally, the studies propose always increasing the sample size of the tests carried out, including relevant patient information such as social networks and clinical information, as well as exploring other algorithms and approaches that allow improving the results of the recommendation.},
  keywords={Systematics;Social networking (online);Bibliographies;Software algorithms;Reliability engineering;Software;Software reliability;Medical Recommender System;Software;Artificial Intelligence;Metrics},
  doi={10.1109/ENC60556.2023.10508695},
  ISSN={2332-5712},
  month={Sep.},}
