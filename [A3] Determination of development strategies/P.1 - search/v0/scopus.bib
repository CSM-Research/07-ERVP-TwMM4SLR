Scopus
EXPORT DATE: 30 September 2025

@ARTICLE{Alharbi2026,
	author = {Alharbi, Maha and Alshayeb, Mohammad R.},
	title = {Automatic Code Generation Techniques: A Systematic Literature Review},
	year = {2026},
	journal = {Automated Software Engineering},
	volume = {33},
	number = {1},
	pages = {},
	doi = {10.1007/s10515-025-00551-3},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105016088661&doi=10.1007%2Fs10515-025-00551-3&partnerID=40&md5=2182221f7068993803e33223ca2bdf32},
	abstract = {As modern software systems become complex and the demand for rapid development cycles increases, automatic code generation techniques have attained a prominent focus in academic research and industrial practice. These techniques can significantly reduce human error, increase productivity, and ensure consistency across large codebases. However, the task of generating code automatically presents significant challenges. In this study, we investigate, identify, and analyze the existing automatic techniques for generating code from various input formats, highlighting their efficiencies and areas for potential improvement. A Systematic Literature Review (SLR) is conducted to systematically summarize and review 76 primary studies related to automatic code generation in the software engineering domain. The selected studies are investigated from several dimensions: paradigms, techniques, input types, intermediate representations, tool support, targeted programming languages, and validation methods, including performance metrics, datasets, and benchmarking status. Our investigation identified 12 main techniques, categorized into five paradigms, where the Model-to-Code paradigm and model-driven techniques are the most prevalent. Notably, 57% of the studies utilized Java, and a limited number of studies showed multilingual support. Furthermore, 72% of the selected studies did not compare their results with existing techniques, and 17% lacked validation of the proposed techniques. We also noticed a lack of detailed information about the datasets used in the validation process, where 52% of the studies omitted these details. This SLR provides several recommendations to enhance methodological rigor in future research, and it highlights opportunities for leveraging emerging technologies to improve the efficiency of the identified automatic code generation techniques. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Automatic Code Generation; Automatic Programming; Programming Languages; Systematic Literature Review; Benchmarking; Codes (symbols); Computer Programming Languages; Computer Software; Industrial Research; Reviews; Academic Research; Automatic Code Generations; Automatic Technique; Development Cycle; Generation Techniques; Human Errors; Industrial Practices; Input Format; Software-systems; Systematic Literature Review; Automatic Programming},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Kalibatienė2026,
	author = {Kalibatienė, Diana and Miliauskaite, Jolanta},
	title = {From manual to automated systematic review: Key attributes influencing the duration of systematic reviews in software engineering},
	year = {2026},
	journal = {Computer Standards and Interfaces},
	volume = {96},
	pages = {},
	doi = {10.1016/j.csi.2025.104073},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105016091121&doi=10.1016%2Fj.csi.2025.104073&partnerID=40&md5=28b32d84673aebe4344f27ae383f064d},
	abstract = {Context: It is widely accepted that a systematic literature review (SLR) is an effective, comprehensive, repeatable, less biased, and transparent method for gathering and condensing knowledge from existing scientific publications. The SLR method facilitates the identification of gaps for new research opportunities, fostering decision-making based on evidence. At the same time, SLR is a time and effort-consuming task that is threatened by the increasing volume of publications. However, there is a lack of comprehension about which factors directly impact manually conducted SLR performance, limiting researchers to better plan and optimize their processes. Objective: To enhance the understanding of the attributes that directly influence the SLR process in terms of time consumption. Methods: We performed a tertiary study that (i) identified 138 secondary studies, (ii) mapped the possible influential attributes for SLR performance, (iii) extracted data from SLR reports and metadata, synthesized and analysed their influence, providing an overview of core trends related to those attributes over time. Results: Our SLR mapped four main attributes influencing the performance time of the SLR process – number of authors, number of initially retrieved papers from databases, number of included papers for data synthesis, and usage of the snowballing techniques. We noticed a trend for smaller research groups (2–5 persons) using 4–6 different databases and processing to process a large number of studies, and an increasing adoption of the snowballing technique. Conclusion: This paper reveals a bottleneck in manually conducted SLR, reinforcing the need for evolving automation. Mapping the attributes is only the first step to making the SLR process more measurable regarding its resource consumption. We contribute by providing recommendations to assist scientists and practitioners in planning their future SLRs and IT projects, including SLRs, particularly in the evolving landscape of digital transformation and innovations. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Digitalisation; Duration; Performance Time; Process Modelling; Process Performance Measure; Quality; Software Engineering Research; Systematic Literature Review; Systematic Review; Decision Making; Engineering Research; Metadata; Digitalization; Duration; Performance; Performance Measure; Performance Time; Process Performance; Process Performance Measure; Process-models; Quality; Software Engineering Research; Systematic Literature Review; Systematic Review; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Gomes2026253,
	author = {Gomes, Felipe G.S. and Mendes, Thiago Souto and Freire, Sávio and Spínola, Rodrigo Oliveira and Mendonça, Manoel Gomes De},
	title = {Investigating the Use of Snowballing on Q&A Websites},
	year = {2026},
	journal = {Lecture Notes in Computer Science},
	volume = {16082 LNCS},
	pages = {253 - 269},
	doi = {10.1007/978-3-032-04200-2_17},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105016613393&doi=10.1007%2F978-3-032-04200-2_17&partnerID=40&md5=b459a244eb897a1fbbafa0493a62af68},
	abstract = {Background: The use of grey literature (GL) has grown in software engineering research, especially in studies that consider questions and answers (Q&A) websites, since software development professionals widely use them. Although snowballing (SB) techniques are standard in systematic literature reviews, little is known about how to apply them to GL reviews. Aims: This paper investigates how to apply SB approaches on Q&A websites to identify new valid discussions for analysis during the exploration of such sites. Method: In previous studies, we compiled and analyzed a set of Stack Exchange Project Management (SEPM) discussions related to software engineering technical debt. Those studies used a data set consisting of 108 valid discussions extracted from SEPM. Based on this start data set, we perform forward and backward SB using two different approaches: link-based and similarity-based SB. We then compare the precision and recall of those two SB approaches against the search-based approach of the original study. Results: In just one SB iteration, the approaches yielded 291 new discussions for analysis, 130 of which were considered valid for our study. This represents an approximate 120% increase in recall compared to the original data set. The SB process also yielded a similar rate of valid discussion retrieval when compared to the search-based approach (precision). Conclusion: This paper provides guidelines on how to apply two SB approaches to find new valid discussions for review. To our knowledge, this is the first study that analyzes the use of SB on Q&A websites. By applying SB, it is possible to identify new discussions, significantly increasing the relevant data set for a GL review. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Grey Literature; Guideline; Q&a Websites; Snowballing; Iterative Methods; Software Design; Data Set; Grey Literature; Guideline; Literature Reviews; Question And Answer Website; Search-based; Snowballing; Software Engineering Research; Systematic Literature Review; Technical Debts; Project Management},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Mauser2026144,
	author = {Mauser, Lucas and Zimmermann, Eva and Nedvědický, Pavel and Eisenreich, Tobias and Wäschle, Moritz and Wagner, Stefan},
	title = {Towards Mixed-Criticality Software Architectures for Centralized HPC Platforms in Software-Defined Vehicles: A Systematic Literature Review},
	year = {2026},
	journal = {Lecture Notes in Computer Science},
	volume = {15929 LNCS},
	pages = {144 - 160},
	doi = {10.1007/978-3-032-02138-0_10},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105015673603&doi=10.1007%2F978-3-032-02138-0_10&partnerID=40&md5=0ae80067e37f1b64950738eea709d259},
	abstract = {Centralized electrical/electronic architectures and High-Performance Computers (HPCs) are redefining automotive software development, challenging traditional microcontroller-based approaches. Ensuring real-time, safety, and scalability in software-defined vehicles necessitates reevaluating how mixed-criticality software is integrated into centralized architectures. While existing research on automotive SoftWare Architectures (SWAs) is relevant to the industry, it often lacks validation through systematic, empirical methods. To address this gap, we conduct a systematic literature review focusing on automotive mixed-criticality SWAs. Our goal is to provide practitioner-oriented guidelines that assist automotive software architects and developers design centralized, mixed-criticality SWAs based on a rigorous and transparent methodology. First, we set up a systematic review protocol grounded in established guidelines. Second, we apply this protocol to identify relevant studies. Third, we extract key functional domains, constraints, and enabling technologies that drive changes in automotive SWAs, thereby assessing the protocol’s effectiveness. Additionally, we extract techniques, architectural patterns, and design practices for integrating mixed-criticality requirements into HPC-based SWAs, further demonstrating the protocol’s applicability. Based on these insights, we propose an exemplary SWA for a microprocessor-based system-on-chip. In conclusion, this study provides a structured approach to explore and realize mixed-criticality software integration for next-generation automotive SWAs, offering valuable insights for industry and research applications. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Hpc Platform; Mixed-criticality System; Software Architecture; Software Engineering; Software-defined Vehicle; Systematic Literature Review; Virtualization; Application Programs; Criticality (nuclear Fission); Distributed Computer Systems; Reviews; Software Design; Vehicles; Automotive Software; Centralised; Computer Platforms; High Performance Computers; High-performance Computer Platform; Mixed Criticalities; Mixed-criticality Systems; Software-defined Vehicle; Systematic Literature Review; Virtualizations; Software Architecture},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ponce2025,
	author = {Ponce, Francisco and Verdecchia, Roberto and Miranda, Breno and Soldani, Jacopo},
	title = {Microservices testing: A systematic literature review},
	year = {2025},
	journal = {Information and Software Technology},
	volume = {188},
	pages = {},
	doi = {10.1016/j.infsof.2025.107870},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105015076924&doi=10.1016%2Fj.infsof.2025.107870&partnerID=40&md5=8f7821432215e32f55ce172f51c5ce4b},
	abstract = {Context: Microservices offer scalability and resilience for modern cloud-native applications but present significant challenges in software testing due to their distributed and heterogeneous nature. Objective: This study aims to consolidate and classify the current body of knowledge on microservice testing through a systematic literature review, providing actionable insights for both researchers and practitioners. Methods: Following established guidelines for systematic literature reviews in software engineering, we identified 74 primary studies relevant to microservices testing. These studies were systematically categorized using the SWEBOK (Software Engineering Body of Knowledge) taxonomy for software testing. Specifically, we classified the identified techniques according to their testing objectives, levels, strategies, and types. We also evaluated the study types to gauge the maturity and readiness of the current state-of-the-art in microservice testing. Results: System testing emerged as the most frequently investigated testing level, followed by integration, unit, and acceptance testing. Conformance, regression, and API testing were the most common functional testing objectives, while performance efficiency and reliability were instead predominant in the case of non-functional testing. Specification-based testing strategies were the most adopted, followed by usage-based and fault-based ones. Additionally, most studies employed laboratory experiments and had low-to-medium technology readiness levels, indicating early-stage maturity. The systems under test varied in size and domain, with TrainTicket being the most widely used reference benchmark for large systems. Conclusion: While significant progress has been made in microservice testing, the field remains fragmented, with notable gaps in areas such as, e.g., flexibility and security testing. The dominance of early-stage proposals highlights the need for more empirical validation and industry-grade benchmarks to facilitate broader adoption. This review offers a structured roadmap for future research and practical adoption in microservices testing. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Functional Testing; Microservice Architecture; Microservices; Non-functional Testing; Software Testing; Systematic Literature Review; Testing Strategies; Application Programs; Benchmarking; Integration Testing; Reviews; 'current; Functional Testing; Microservice; Microservice Architecture; Non-functional; Non-functional Testing; Software Testings; Systematic Literature Review; Testing Strategies; Acceptance Tests},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Aljedaani2025,
	author = {Aljedaani, Bakheet and Ahmad, Aakash and Fehmideh, Mahdi and Khan, Arif Ali and Shen, Jun},
	title = {An exploration study on developing blockchain systems–the practitioners' perspective},
	year = {2025},
	journal = {Information and Software Technology},
	volume = {186},
	pages = {},
	doi = {10.1016/j.infsof.2025.107825},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105009150976&doi=10.1016%2Fj.infsof.2025.107825&partnerID=40&md5=1073a7e194f4294c0195ff6dbc7043e3},
	abstract = {Context: Blockchain-based software (BBS) builds upon the foundational technologies of cryptocurrencies like Bitcoin, utilising decentralised, immutable ledgers, to support the development and operation of security-critical and transaction-intensive systems and services. In recent years, a number of research studies have investigated the strategic benefits and technical limitations of BBS that is central to the operations of a wide variety of systems ranging from cyber security, healthcare, education, and financial technologies. Despite an increasing interest both from academia and industry in BBS, there is a dearth of empirical evidence resulting in a lack of understanding about processes, methods, and techniques to enable a systematic development of this class of software systems. Objectives: Existing research lacks a consolidated view, particularly empirically-driven guidelines based on published evidence and development practices. Therefore, our objective is to derive new or leverage existing development processes, patterns, and models to design, implement, and validate BBS systems. Method: Tied to this knowledge gap, we conducted a two-phase research that unifies the findings of (i) a systematic literature review and (ii) practitioners’ survey to derive and validate the development process for BBS systems. First, we conducted a systematic literature review of 58 studies to derive a process comprising of 26 activities, to develop BBS systems. We than engaged 102 blockchain practitioners from, 35 countries across 6 continents to validate the BBS system development processes. Results: Our results revealed a statistically significant difference (p-value < .001) in the importance ratings of 24 out of 26 BBS activities by our participants. The only two activities that were not statistically significant were incentive protocol design and granularity design. Our study also presented some of the activities that have been emphasised by our participants within the different development phases (i.e., Analysis Phase, Design Phase, Implementation Phase, Deployment Phase, and Execution and Maintenance Phase). Conclusion: Our research is among the first to advance understanding on the aspect of development process for BBS and helps researchers and practitioners in their quests on challenges and recommendations associated with the development of BBS systems. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Blockchain System; Empirical Software Engineering; Software Development Process; Bulletin Boards; Computer Software; Engineering Education; Knowledge Management; Network Security; Software Design; Block-chain; Blockchain System; Decentralised; Development And Operations; Development Process; Empirical Software Engineering; Security-critical; Software Development Process; Software-systems; Systematic Literature Review; Blockchain},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Choma2025,
	author = {Choma, Joelma and Zaina, Luciana Aparecida Martinez},
	title = {Investigating quality aspects for UX evaluation of IoT-based applications in smart cities: A literature review},
	year = {2025},
	journal = {Science of Computer Programming},
	volume = {245},
	pages = {},
	doi = {10.1016/j.scico.2025.103319},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105003891935&doi=10.1016%2Fj.scico.2025.103319&partnerID=40&md5=ea9cd085f65ce6289b97401a01571507},
	abstract = {The Internet of Things (IoT) has increasingly gained prominence in developing smart cities. IoT technologies are essential resources to make smart cities more efficient and sustainable. Recent research in Software Engineering (SE) has investigated the characteristics of IoT systems and the most appropriate approaches to their design and development. The development of systems based on IoT technologies enables a continuous flow of communication in the context of a smart city by allowing different systems to interact and adjust automatically to optimize the city's operation. In an urban environment, IoT connects a vast network of devices such as environmental sensors, public transportation systems, smart traffic lights, security cameras, and more. These characteristics make these applications complex and difficult to evaluate, particularly regarding User Experience (UX) design. Recently, we performed a rapid systematic review to examine the methods and practices commonly employed for evaluating the UX in these scenarios. In our previous work, we analyzed 43 studies covering different types of IoT-based applications and areas of smart cities. In this study, we extend our analysis by exploring which quality aspects have been considered for UX evaluation and categorizing the typical applications evaluated. Our findings revealed the need for more appropriate UX instruments to assess quality aspects that consider specific features of non-traditional interfaces (e.g., haptics, gesture, speech) and smart technologies within specific interaction contexts (e.g., smart environments based on ubiquitous computing). These instruments can be expanded from established guidelines or developed from scratch as long as they are validated in practice. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Iot Systems; Literature Review; Quality Aspects; Smart City; User Experience; Ux Evaluation; Application Programs; Computer Aided Software Engineering; Computer Operating Systems; Computer Software Maintenance; Search Engines; Software Design; Software Quality; Ubiquitous Computing; Continuous-flow; Design And Development; Internet Of Thing System; Internet Of Things Technologies; Literature Reviews; Quality Aspects; Recent Researches; Urban Environments; Users' Experiences; Ux Evaluation; Smart City},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Goyal2025,
	author = {Goyal, Somya Rakesh},
	title = {A systematic review on AI based class imbalance handling in software defect prediction},
	year = {2025},
	journal = {Results in Engineering},
	volume = {27},
	pages = {},
	doi = {10.1016/j.rineng.2025.106578},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105013983785&doi=10.1016%2Fj.rineng.2025.106578&partnerID=40&md5=425cf4d040a95d80c1f3cbd7387e969a},
	abstract = {Software defect prediction is to predict the fault-prone modules assisting the development team to focus the testing efforts on the faulty modules, preserving the testing resources and leading to reduced costs of the product. A huge range of diversified AI based mechanisms are available to handle the class imbalance issue underlying the defect datasets that would hinder the performance of prediction models. This study assesses the timeline of evolution of AI applications in the domain of software defect prediction and culminates a Systematic Review over the period of 25 years from 2000 to 2025 dedicatedly focusing on class imbalance issue. To conduct this review, the PRISMA guidelines and statistical hypothesis testing approach are followed. The aim of this study is to assess the AI practices being applied to strengthen prediction models while alleviating the class imbalance. The study about the publication trend in the past 25 years reveals that majority of defect datasets (∼77%) suffer from class imbalances and data sampling is the most popular class imbalance handling technique. Machine learning techniques have been popular and now the paradigm is shifting towards deep models and transfer learning. Explainable AI and LLMs are now the names for defect prediction models over industry datasets. This review provides a holistic view about the defect datasets, learning models, evaluation criteria, class imbalance handling techniques that will pave guidelines and references to the future researchers and software engineers to achieve more reliable and effective software defect prediction models with appropriately adapting the AI techniques to handle the class imbalance conditions. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Class Imbalance; Ensemble Learning, Evidence Based Software Engineering; Sampling; Software Defect Prediction; Systematic Literature Review; Application Programs; Data Handling; Deep Learning; Defects; Forecasting; Learning Systems; Prediction Models; Software Testing; Statistical Tests; Transfer Learning; Class Imbalance; Defect Prediction Models; Ensemble Learning; Ensemble Learning, Evidence Based Software Engineering; Evidence Based Software Engineering; Handling Technique; Prediction Modelling; Software Defect Prediction; Systematic Literature Review; Systematic Review; Sampling},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Tripathi2025,
	author = {Tripathi, Nirnaya},
	title = {NoSQL database education: A review of models, tools and teaching methods},
	year = {2025},
	journal = {Journal of Systems and Software},
	volume = {226},
	pages = {},
	doi = {10.1016/j.jss.2025.112391},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85219562259&doi=10.1016%2Fj.jss.2025.112391&partnerID=40&md5=15e782cdbc70de6f5efa923dfd4b7be3},
	abstract = {NoSQL databases are essential for managing modern data-intensive applications. While SQL education is a crucial part of the software engineering and computer science curriculum, it is insufficient in addressing the rise of big data and cloud infrastructures. Despite extensive research on SQL education, there is limited exploration of NoSQL education, particularly in teaching methods and data models. This study addresses this gap by conducting a systematic literature review on NoSQL database education, aiming to assess current research, teaching practices, models, tools, scalability, and security mechanisms while offering a framework for integrating NoSQL into academic curricula. Out of 386 articles, 28 were selected for detailed analysis, focusing on NoSQL teaching methods, models, and curriculum development. Findings revealed that document-oriented and graph databases, especially MongoDB, Cassandra, and Neo4j, are the most taught. The project-based learning approach was the most common teaching method. Challenges identified include adapting to technological advancements, addressing diverse student needs, and the shift to online learning. This review contributes valuable insights into NoSQL education and offers recommendations for improving teaching practices in software engineering curricula. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Computer Science; Constructive Alignment; Database; Education; Nosql; Software Engineering; Systematic Literature Review; Teaching Methods; Constructive Alignments; Data-intensive Application; Engineering And Computer Science; Model Method; Modelling Tools; Nosql; Systematic Literature Review; Teaching Methods; Teaching Model; Teaching Practices; Database Systems},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Nirmani2025,
	author = {Nirmani, Shashiwadana and Shahin, Mojtaba and Khalajzadeh, Hourieh and Liu, Xiao},
	title = {A systematic literature review on task recommendation systems for crowdsourced software engineering},
	year = {2025},
	journal = {Information and Software Technology},
	volume = {184},
	pages = {},
	doi = {10.1016/j.infsof.2025.107753},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105003821741&doi=10.1016%2Fj.infsof.2025.107753&partnerID=40&md5=acf373c5234f60792b2bd572a6e753d7},
	abstract = {Context: Crowdsourced Software Engineering (CSE) offers outsourcing work to software practitioners by leveraging a global online workforce. However, these software practitioners struggle to identify suitable tasks due to the variety of options available. Hence, there have been a growing number of studies on introducing recommendation systems to recommend CSE tasks to software practitioners. Objective: The goal of this study is to analyze the existing CSE task recommendation systems, investigating their extracted data, recommendation methods, key advantages and limitations, recommended task types, the use of human factors in recommendations, popular platforms, and features used to make recommendations. Methods: This SLR was conducted according to the Kitchenham and Charters’ guidelines. We used manual and automatic search strategies without putting any time limitation for searching the relevant papers. Results: We selected 65 primary studies for data extraction, analysis, and synthesis based on our predefined inclusion and exclusion criteria. Based on our data analysis results, we classified the extracted information into four categories according to the data acquisition sources: Software Practitioner's Profile, Task or Project, Previous Contributions, and Direct Data Collection. We also organized the proposed recommendation systems into a taxonomy and identified key advantages, such as increased performance, accuracy, and optimized solutions. In addition, we identified the limitations of these systems, such as inadequate or biased recommendations and lack of generalizability. Our results revealed that human factors play a major role in CSE task recommendation. Further, we identified five popular task types recommended, popular platforms, and their features used in task recommendation. We also provided recommendations for future research directions. Conclusion: This SLR provides insights into current trends, gaps, and future research directions in CSE task recommendation systems such as the need for comprehensive evaluation, standardized evaluation metrics, and benchmarking in future studies, transferring knowledge from other platforms to address cold start problem. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Crowdsourced Software Engineering; Github; Systematic Literature Review; Task Recommendation; Topcoder; Application Programs; Computer Aided Software Engineering; Computer Operating Systems; Computer Program Listings; Computer Software Maintenance; Crowdsourcing; Groupware; Human Engineering; Online Searching; Search Engines; Software Design; Software Packages; Software Quality; Taxonomies; Verification; Crowdsourced Software Engineering; Engineering Tasks; Future Research Directions; Github; Popular Platform; Software Practitioners; Systematic Literature Review; Task Recommendation; Task Type; Topcoder; Recommender Systems},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@CONFERENCE{Hussain20251710,
	author = {Hussain, Shahid and Wang, Wenli and Ur Rehman Khan, Saif Ur Rehman and Basit-Ur-Rahim, Muhammad Abdul and Ibrahim, Naseem M. and Azad, Nasreen},
	title = {A Decision-Making Framework to Recommend Quantum-Based Solutions for Fit Problem Domains with Associated Factors},
	year = {2025},
	journal = {Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering},
	pages = {1710 - 1720},
	doi = {10.1145/3696630.3731622},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105013961802&doi=10.1145%2F3696630.3731622&partnerID=40&md5=852670ecead58c7ac454a26953d787ea},
	abstract = {Context: Quantum Computing (QC) systems exploit the characteristics of quantum mechanics to perform computationally demanding tasks more effectually than their classical counterparts. To utilize the full potential of QC systems, Quantum Software Engineering (QSE) has emerged to manage the challenges of quantum software development. Problem: Due to the lack of awareness of QC problem domains and their associated factors to consider and apply QC in the Software Engineering (SE) process, the development of a QC system becomes complex and less cost effective if without a guidance for software engineers. Objective: The proposed work aims to develop a systematic decision-making framework to help identify the quantum problem domains and prioritize the critical factors to be considered for the application of QC during the software development life cycle (SDLC). Method: The proposed method is implemented in two folds. First, a Systematic Literature Review (SLR) is performed to identify a set of QC problem domains and their associated factors that should be accounted for in the SE process. Second, an online survey is conducted to collect insights on the same aspects from practitioners in their SE processes to form another set of data. Finally, the relationships of the two sets are validated through careful mappings with the assistance of domain experts. Results: Five problem domains and six factors are classified by the proposed methodology, and some of them will benefit from a QC-based solution in the SE process. The results indicate that “Algorithm Development” and “Language Development” are two potential problem domains to apply a QC-based solution. For these two domains, “Current Hardware Limitations”, “Standardized Coding Practices” and “Software Specialization/Adaptation” are the critical factors to be considered during the SE process. Conclusion: Organizations and QSE community can take advantage of the identified problem domains and their associated factors to make decisions in the recommendation of QC-based solutions. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Factors; Problem Domains; Quantum Computing; Quantum Software Engineering; Application Programs; Behavioral Research; Computer Programming; Decision Making; Life Cycle; Quantum Computers; Quantum Theory; Software Design; Classical Counterpart; Cost Effective; Critical Factors; Decision-making Frameworks; Factor; Problem Domain; Quantum Computing; Quantum Computing Systems; Quantum Software Engineering; Software Engineering Process; Cost Effectiveness},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Soprano2025194,
	author = {Soprano, Michael and Modha, Sandip and Roitero, Kevin and Maddalena, Eddy and Viviani, Marco and Pasi, Gabriella and Mizzaro, Stefano},
	title = {AIDME: A Scalable, Interpretable Framework for AI-Aided Scoping Reviews},
	year = {2025},
	pages = {194 - 207},
	doi = {10.1145/3731120.3744586},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105013770193&doi=10.1145%2F3731120.3744586&partnerID=40&md5=382ab1e6abb7b87dacf3329663f9ed2d},
	abstract = {Scientific publishing is expanding rapidly across disciplines, making it increasingly difficult for researchers to organize, filter, and synthesize the literature. Systematic reviews address this challenge through structured analysis, but the early stages, particularly the screening phase, can become overwhelming when faced with thousands of records. Scoping reviews are often used as a preparatory step to explore and structure the literature before applying stricter protocols such as the PRISMA 2020 guidelines. In this work, we introduce AIDME (AI-Aided Document Mapping and Evaluation), a general-purpose framework that leverages Large Language Models (LLMs), topic modeling, thematic labeling, and citation network analysis to support the creation of scoping reviews in research areas with high publication volume. AIDME enables scalable filtering, clustering, labeling, and prioritization of publications while preserving human oversight. We evaluate the proposed framework through a case study on methods for assessing truthfulness in fact-checking, a fast-evolving field characterized by inconsistent terminology and fragmented methodologies. Our results show that AIDME reduces manual effort and produces structured outputs that facilitate subsequent PRISMA-compliant systematic reviews. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Large Language Models; Misinformation; Prisma 2020; Scoping Reviews; Systematic Reviews; Truthfulness Assessment; Human Engineering; Information Retrieval Systems; Information Systems; Reviews; Software Engineering; General Purpose Framework; Labelings; Language Model; Large Language Model; Misinformation; Prisma 2020; Scoping Review; Structured Analysis; Systematic Review; Truthfulness Assessment; Modeling Languages},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Oruthotaarachchi2025143,
	author = {Oruthotaarachchi, Chalani Ruchira and Wijayanayake, Janaka Indrajith},
	title = {Aligning Software Product Management with Software Engineering Concepts: A Systematic Literature Review},
	year = {2025},
	journal = {Journal of Information Systems Engineering and Business Intelligence},
	volume = {11},
	number = {2},
	pages = {143 - 159},
	doi = {10.20473/jisebi.11.2.143-159},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105012213628&doi=10.20473%2Fjisebi.11.2.143-159&partnerID=40&md5=276f12fd909444966d348581889beaac},
	abstract = {Background: Software Product Management (SPM) plays a vital role in the success of many software projects by aligning customer needs with their business objectives and ensuring a seamless and effective software product lifecycle. SPM is established as a collection of tools, techniques, and practices that help an organization accomplish its objectives and enhance the predictability and profitability of software product development. However, despite its significance, SPM research has been fragmented into specific topics having limited SPM literature reviews. This research study addresses this gap and discusses the status of the SPM domain in a more holistic spectrum. Objective: The study aims to review recent literature on SPM, focusing on the alignment of SPM with software engineering concepts, a product manager’s role, the existing framework, ontologies, and best practices that support ensuring the success of a product manager’s role. Methods: A systematic literature review was conducted using SCOPUS, IEEE Xplore, ACM Digital Library, ScienceDirect, and ProQuest Central as databases. 71 articles were selected following a rigorous screening process as per the PRISMA 2000 statement. Results: Integrating SPM and SE is crucial in delivering value-driven software solutions. Available theoretical models and frameworks can help with this integration; however, implementing these frameworks often has challenges. Even though product managers play a vital role in the software lifecycle, they lack sufficient organizational support to enrich their skills and knowledge. Other major challenges are the lack of knowledge to use emerging technologies such as AI for data-driven decisionmaking processes and the tendency to replace humans with such technologies. Conclusion: Aligning strategic vision with agile flexibility is important to integrate SPM with SE practices. To improve decision-making and ensure better alignment of SPM with business objectives, organizations have to enhance product managers’ capabilities by leveraging emerging technologies. Research can focus on developing adaptable and user-friendly SPM frameworks that match both medium-scale and large-scale organizational expectations. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Organizational Value; Product Manager Role; Software Engineering Integration; Software Product Management; Spm Challenges; Spm Frameworks},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Danushi2025,
	author = {Danushi, Ornela and Forti, Stefano and Soldani, Jacopo},
	title = {Carbon-Efficient Software Design and Development: A Systematic Literature Review},
	year = {2025},
	journal = {ACM Computing Surveys},
	volume = {57},
	number = {10},
	pages = {},
	doi = {10.1145/3728638},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105009634794&doi=10.1145%2F3728638&partnerID=40&md5=f4bb9011f7a4936b16eaa84bcadda671},
	abstract = {The ICT sector, responsible for 2% of global carbon emissions, is under scrutiny calling for methodologies and tools to design and develop software in an environmentally sustainable-by-design manner. However, the software engineering solutions for designing and developing carbon-efficient software are currently scattered over multiple different pieces of literature, which makes it difficult to consult the body of knowledge on the topic. In this article, we precisely conduct a systematic literature review on state-of-the-art proposals for designing and developing carbon-efficient software. We identify and analyse 65 primary studies by classifying them through a taxonomy aimed at answering the 5W1H questions of carbon-efficient software design and development. We first provide a reasoned overview and discussion of the existing guidelines, reference models, measurement solutions, and techniques for measuring, reducing, or minimising the carbon footprint of software. Ultimately, we identify open challenges and research gaps, offering insights for future work in this field. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Environmental Sustainability; Green Software Engineering; Software Design; Software Development; Systematic Literature Review; Carbon Footprint; Ecodesign; Engineering Research; Sustainable Development; Body Of Knowledge; Engineering Solutions; Environmental Sustainability; Global Carbon Emission; Green Software Engineering; On State; Reference Modeling; Software Design And Development; State Of The Art; Systematic Literature Review; Software Design},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{De Martino2025,
	author = {De Martino, Vincenzo and Palomba, Fabio},
	title = {Classification and challenges of non-functional requirements in ML-enabled systems: A systematic literature review},
	year = {2025},
	journal = {Information and Software Technology},
	volume = {181},
	pages = {},
	doi = {10.1016/j.infsof.2025.107678},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85217893293&doi=10.1016%2Fj.infsof.2025.107678&partnerID=40&md5=10f14263a67e4df76fcf7ef4eaf55e40},
	abstract = {Context: Machine learning (ML) is nowadays so pervasive and diffused that virtually no application can avoid its use. Nonetheless, its enormous potential is often tempered by the need to manage non-functional requirements (NFRs) and navigate pressing, contrasting trade-offs. Objective: In this respect, we notice a lack of systematic synthesis of challenges explicitly tied to achieving and managing NFRs in ML-enabled systems. Such a synthesis may not only provide a comprehensive summary of the state of the art but also drive further research on the analysis, management, and optimization of NFRS of ML-enabled systems. Method: In this paper, we propose a systematic literature review targeting two key aspects such as (1) the classification of the NFRs investigated so far, and (2) the challenges associated with achieving and managing NFRs in ML-enabled systems during model development Through the combination of well-established guidelines for conducting systematic literature reviews and additional search criteria, we survey a total amount of 130 research articles. Results: Our findings report that current research identified 31 different NFRs, which can be grouped into six main classes. We also compiled a catalog of 26 software engineering challenges, emphasizing the need for further research to systematically address, prioritize, and balance NFRs in ML-enabled systems. Conclusion: We conclude our work by distilling implications and a future outlook on the topic. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Non-functional Requirements; Software Engineering For Artificial Intelligence; Systematic Literature Reviews; Application Programs; Contrastive Learning; Requirements Engineering; Machine-learning; Model Development; Non-functional Requirements; Optimisations; Pressung; Search Criterion; Software Engineering For Artificial Intelligence; State Of The Art; Systematic Literature Review; Trade Off; Adversarial Machine Learning},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Daza Vergaray2025,
	author = {Daza Vergaray, Alfredo and Apaza-Perez, Gonzalo and Samanez-Torres, Katherine and Benites-Noriega, Juan and Gonzales, Orlando Llanos and Condori-Cutipa, Pablo Cesar},
	title = {Industrial applications of artificial intelligence in software defects prediction: Systematic review, challenges, and future works},
	year = {2025},
	journal = {Computers and Electrical Engineering},
	volume = {124},
	pages = {},
	doi = {10.1016/j.compeleceng.2025.110411},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105004562909&doi=10.1016%2Fj.compeleceng.2025.110411&partnerID=40&md5=50d3ef29fc4587e5a7244dca23be06f1},
	abstract = {Software defect prediction is a constant challenge in industrial software engineering and represents a significant problem for quality and cost in software development worldwide. The purpose of this study is to gain a deeper understanding of the quartiles, countries, keywords, techniques, metrics, tools, platforms or languages, variables, data sources, and datasets used in software defect prediction. A comprehensive search of 45 articles from 2019 to 2023, using 5 databases (Scopus, ProQuest, ScienceDirect, EBSCOhost, and Web of Science), was conducted following the PRISMA (Preferred Reporting Items for Systematic Reviews and Meta-Analysis) methodology. Results show that 60.00 % of the studies were carried out in 2023, and 68.89 % of journals were in the Q1 and Q2 quartiles. The most common techniques were Support Vector Machine (42.22 %) and Random Forest (35.56 %). The most commonly used evaluation metrics were Accuracy and F1-Score (68.89 %). Python was the main programming language (35.56 %), with Kilo (thousands) of lines of code (31.11 %) and Cyclomatic complexity (26.67 %) as key variables. Finally, NASA's Metrics Data Program Data Repository was the most used data source (31.11 %) with a dataset ranging from a minimum of 759 instances and 37 attributes to a maximum of 3579 instances and 38 attributes from 5 projects: CM1, MW1, PC1, PC3, and PC4. This systematic review provides scientific evidence on how machine learning algorithms aid in predicting software defects and improving development processes. In addition, it offers a detailed discussion by identifying trends, limitations, successful approaches, and areas for improvement, providing valuable recommendations for future research. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Machine Learning; Metrics; Prediction; Programming Language; Software Defects; Computer Operating Systems; Computer Program Listings; Computer Software Maintenance; Enterprise Software; Machine Oriented Languages; Python; Search Engines; Software Prototyping; Software Quality; System Program Documentation; Verification; Data-source; Industrial Applications Of Artificial Intelligences; Industrial Software; Machine-learning; Metric; Metric Tools; Software Defect Prediction; Software Defects; Systematic Review; Variable Data; Software Design},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Fawad2025847,
	author = {Fawad, Muhammad and Rasool, Ghulam and Palma, Francis},
	title = {Android Source Code Smells: A Systematic Literature Review},
	year = {2025},
	journal = {Software - Practice and Experience},
	volume = {55},
	number = {5},
	pages = {847 - 882},
	doi = {10.1002/spe.3401},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105002578912&doi=10.1002%2Fspe.3401&partnerID=40&md5=9179e12dc2b4c33682c748500b2ff0ea},
	abstract = {Introduction: Modern software developers strive to develop applications that are robust, easy to maintain, and possess high levels of quality. However, code smells can hinder this goal as they are visible signs of underlying issues. Numerous techniques and tools have been proposed for detecting code smells in various contexts and programming languages. Despite this, research on Android-specific code smells and their impact on external quality attributes is still in its early stages. Objective: This study aims to provide a comprehensive summary of state-of-the-art techniques, tools, and approaches used for detecting and refactoring code smells in Android applications. Methodology: A systematic literature review was conducted between November 2007 and December 2023, adhering to standard guidelines. In total, 79 primary studies were identified, analyzed, and synthesized. Results: A total of 237 code smells were identified using 51 techniques and tools, based on seven distinct approaches. Efficiency was found to be the most affected external quality attribute. The code smell Durable Wakelock was the most studied. Challenges: Despite the extensive research, the software engineering community faces numerous challenges. These include a lack of in-depth investigation into Android-specific code smells, a limited number of studied quality attributes, insufficient involvement of industry experts in the research process, scarcity of Android-oriented metrics, and dependence on industry-exclusive datasets. Future Directions: This review suggests potential research directions that are valuable for researchers and practitioners seeking to gain insights into current open research problems in this domain. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Android; Antipattern; Code Smell; Detection; Mobile Application; Refactoring; Mobile Applications; Android; Anti-patterns; Code Smell; Detection; External Quality; Quality Attributes; Refactorings; Systematic Literature Review; Techniques And Tools; Application Programs},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Tunca202554,
	author = {Tunca, Mevre},
	title = {Privacy by Design: A Systematic Literature Review of European and British Regulatory Perspectives for Software and Information Engineering},
	year = {2025},
	pages = {54 - 63},
	doi = {10.1145/3708635.3708639},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105008284416&doi=10.1145%2F3708635.3708639&partnerID=40&md5=3b2aae9e807529d3ac9fb67a32915a92},
	abstract = {This systematic literature review examines the key recommendations for the implementation of Privacy by Design and Data Protection by Design principles of the European data protection authorities, including the European Free Trade Association countries and the United Kingdom. The introduction of the General Data Protection Regulation in May 2018 was a pivotal moment for data protection. As a result, the European data protection authorities have significantly intensified their publication efforts and issued more documents about Privacy by Design and Data Protection by Design. The results of the systematic literature review data minimisation and the implementation of technical and organisational measures as key recommendations for the effective integration of data protection principles in software development. Despite these efforts, user privacy remains at risk, as evidenced by emerging threats. This emphasises the need to further strengthen efforts to protect data. This overview could serve as an incentive to intensify work on Privacy by Design and develop innovative approaches to address the growing challenges of data protection. It is important to note that this study has its limitations. Future research could focus on analysing documents in national languages or documents published by other European authorities. It would also be beneficial to investigate the challenges and requirements of software engineers when implementing data protection policies, in particular how local differences and specific requirements affect the application of Privacy by Design and Data Protection by Design. A detailed study of country-specific policies and the development and validation of concrete methods and tools to support software engineers should also be pursued more intensively. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Data Protection By Design; General Data Protection Regulation (gdpr); Government Documents; Privacy By Design; Software Engineering; Systematic Literature Review; Data Privacy; Engineers; Government Data Processing; International Trade; Software Design; Data Protection By Designs; Design Principles; Free Trade; General Data Protection Regulation; General Data Protection Regulations; Government Documents; Information Engineerings; Systematic Literature Review; Trade Associations; United Kingdom; Application Programs},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Mavridou2025,
	author = {Mavridou, Efthimia and Vrochidou, Eleni and Kalampokas, Τheofanis and Kanakaris, Venetis and Papakostas, George A.},
	title = {AI-Powered Software Development: A Systematic Review of Recommender Systems for Programmers},
	year = {2025},
	journal = {Computers},
	volume = {14},
	number = {4},
	pages = {},
	doi = {10.3390/computers14040119},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105003492055&doi=10.3390%2Fcomputers14040119&partnerID=40&md5=190cf25b0928525cfc7800436f5ef32d},
	abstract = {Software engineering is a field that demands extensive knowledge and involves numerous challenges in managing information. The information landscapes in software engineering encompass source code and its revision history, a set of explicit instructions for writing, commenting on and running the codes, a set of procedures and routines, and the development environment. For software engineers who develop code, writing code documentation is also extremely important. Due to the technical complexity, vast scale, and dynamic nature of software engineering, there is a need for a specialized category of tools to assist developers, known as recommendation systems in software engineering (RSSE). RSSEs are specialized software applications designed to assist developers by providing valuable resources, code snippets, solutions to problems, and other useful information and suggestions tailored to their specific tasks. Through the analysis of data and user interactions, RSSEs aim to enhance productivity and decision-making for developers. To this end, this work presents an analysis of the literature on recommender systems for programmers, highlighting the distinct attributes of RSSEs. Moreover, it summarizes all related challenges regarding developing, assessing, and utilizing RSSEs, and offers a broad perspective on the present state of research and advancements in recommendation systems for the highly technical field of software engineering. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Ai-driven Recommenders; Code Completion; Code Suggestions; Intelligent Software Tools; Programming; Recommender Systems; Software Engineering; Computer Aided Software Engineering; Recommender Systems; Software Design; System Program Documentation; Ai-driven Recommender; Code Completions; Code Suggestion; Code-writing; Development Environment; Intelligent Software Tools; Programming; Source Codes; Systematic Review; Writing Codes; Application Programs},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Pizard2025,
	author = {Pizard, Sebastián and Lezama, Joaquín and García, Rodrigo and Vallespir, Diego and Kitchenham, Barbara Ann},
	title = {Using rapid reviews to support software engineering practice: a systematic review and a replication study},
	year = {2025},
	journal = {Empirical Software Engineering},
	volume = {30},
	number = {1},
	pages = {},
	doi = {10.1007/s10664-024-10545-6},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85207694208&doi=10.1007%2Fs10664-024-10545-6&partnerID=40&md5=6434b3bbe845e1ded90cdb6570d1026c},
	abstract = {Context: A few years ago, rapid reviews (RR) were introduced in software engineering (SE) to address the problem that standard systematic reviews take too long and too much effort to be of value to practitioners. Prior to our study, few practice-driven RRs had been reported, and none involved collaboration with practitioners lacking SE research experience. Objective: To investigate practitioners’ perspectives on the use of RRs in supporting SE practices, we aimed to validate and build upon the findings of the seminal RR in SE study, specifically considering practitioners without explicit SE research experience. Method: First, we studied previously conducted RRs in SE through a systematic review. Second, we carried out an external replication of the first study that proposed the use of RRs in SE. Specifically, we conducted an RR for an agile software development team looking to improve its knowledge management practices. Results: Most of the software development team’s perceptions about RR results were positive and strongly consistent with previous research. In particular, RR results were considered more reliable than other sources of information and adequate to address the problems detected. Some months later they confirmed using some of the recommendations. Conclusions: The results show that practitioners without explicit SE research experience appreciate the value of evidence and can make use of the results of RRs. However, SE research may need to be translated from broad recommendations to specific process change options. Our research also reveals that SE RRs reporting needs to be substantially improved. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Action Research; Industry-academia Collaboration; Rapid Review; Replication Study; Systematic Literature Review; Action Research; Industry-academia Collaboration; Rapid Review; Replication Study; Research Experience; Software Development Teams; Software Engineering Practices; Software Engineering Research; Systematic Literature Review; Systematic Review; Software Design},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Giamattei2025,
	author = {Giamattei, Luca and Guerriero, Antonio and Pietrantuono, Roberto and Russo, Stefano},
	title = {Causal reasoning in Software Quality Assurance: A systematic review},
	year = {2025},
	journal = {Information and Software Technology},
	volume = {178},
	pages = {},
	doi = {10.1016/j.infsof.2024.107599},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85206979838&doi=10.1016%2Fj.infsof.2024.107599&partnerID=40&md5=4091fbeb3c583765ad552ca5a673de94},
	abstract = {Context: Software Quality Assurance (SQA) is a fundamental part of software engineering to ensure stakeholders that software products work as expected after release in operation. Machine Learning (ML) has proven to be able to boost SQA activities and contribute to the development of quality software systems. In this context, Causal Reasoning is gaining increasing interest as a methodology to go beyond a purely data-driven approach by exploiting the use of causality for more effective SQA strategies. Objective: Provide a broad and detailed overview of the use of causal reasoning for SQA activities, in order to support researchers to access this research field, identifying room for application, main challenges and research opportunities. Methods: A systematic review of the scientific literature on causal reasoning for SQA. The study has found, classified, and analyzed 86 articles, according to established guidelines for software engineering secondary studies. Results: Results highlight the primary areas within SQA where causal reasoning has been applied, the predominant methodologies used, and the level of maturity of the proposed solutions. Fault localization is the activity where causal reasoning is more exploited, especially in the web services/microservices domain, but other tasks like testing are rapidly gaining popularity. Both causal inference and causal discovery are exploited, with the Pearl's graphical formulation of causality being preferred, likely due to its intuitiveness. Tools to favor their application are appearing at a fast pace — most of them after 2021. Conclusions: The findings show that causal reasoning is a valuable means for SQA tasks with respect to multiple quality attributes, especially during V&V, evolution and maintenance to ensure reliability, while it is not yet fully exploited for phases like requirements engineering and design. We give a picture of the current landscape, pointing out exciting possibilities for future research. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Causal Discovery; Causal Inference; Causal Reasoning; Software Quality; Computer Software Selection And Evaluation; Requirements Engineering; Software Reliability; Boost Software; Causal Discovery; Causal Inferences; Causal Reasoning; Machine-learning; Quality Software; Software Products; Software Quality; Software Quality Assurance; Systematic Review; Software Quality},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Marand202523426,
	author = {Marand, Elaheh Azadi and Sheikhahmadi, Amir and Challenger, Moharram and Moradi, Parham and Khalilipour, Alireza},
	title = {Recommender Systems for Unified Modeling Language and Vice Versa - A Systematic Literature Review},
	year = {2025},
	journal = {IEEE Access},
	volume = {13},
	pages = {23426 - 23460},
	doi = {10.1109/ACCESS.2025.3535527},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85216897923&doi=10.1109%2FACCESS.2025.3535527&partnerID=40&md5=052be5a8f0891cdf766e7f5f9ed21687},
	abstract = {Recommender systems (RSs) are fundamental tools that address data redundancy and serve as intelligent supplements for tasks such as data retrieval and refinement by analyzing user behavior. Nowadays, RSs are utilized in various domains, ranging from filtering web news based on user preferences to recommending movies, music, books, and articles in e-commerce. Additionally, these systems are extensively employed to facilitate software engineering activities, including modeling. Modeling environments are enriched with RSs that assist in building models by providing recommendations based on previous solutions to similar problems within the same domain. Consequently, there is growing research interest in approaches that aid the modeling process. This paper presents a systematic literature review (SLR) that analyzes how recommender systems techniques are used to suggest UML diagrams, as well as the role of UML diagrams in describing recommender systems. In addition, it discusses methods for evaluating primary studies, the challenges that primary studies have addressed, and the domains of study that primary studies have targeted (based on an analysis of 4789 papers). We believe this study will guide researchers and professionals in identifying recommender system techniques for generating UML diagram suggestions and understanding the overall purpose of using UML diagrams. Furthermore, it may contribute to a broader understanding of the research process and inspire future research on recommender system techniques within other modeling languages. The results show that 45% of the studies use content-based techniques to suggest UML diagrams, with 77% of the recommendations being structural diagrams (such as class diagrams). On the other hand, to design the components of the proposed approaches (recommender systems), behavioral diagrams are generally used (53% on average), focusing on knowledge-based techniques (28% on average). Finally, the study shows that researchers use content-based (38%) and knowledge-based (41%) techniques to recommend design models. The analysis revealed that the following challenges were identified: 19 studies dealt with the cold start problem, 20 studies with sparsity issues, 11 studies with scalability concerns, 3 studies with diversity challenges, and 12 studies with other types of challenges. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Recommender System; Systematic Literature Review (slr); Unified Modeling Language (uml); Recommender Systems; Data Refinements; Data Retrieval; Data-redundancy; Fundamental Tools; Knowledge Based; Systematic Literature Review; Unified Modeling; Unified Modeling Language; Unified Modeling Language Diagrams; Unified Modeling Language},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Abdullahi202530235,
	author = {Abdullahi, Shamsu and Usman Danyaro, Kamaluddeen and Zakari, Abubakar and Abdul Aziz, Izzatdin and Amila Wan Abdullah Zawawi, Noor and Adamu, Shamsuddeen},
	title = {Time-Series Large Language Models: A Systematic Review of State-of-the-Art},
	year = {2025},
	journal = {IEEE Access},
	volume = {13},
	pages = {30235 - 30261},
	doi = {10.1109/ACCESS.2025.3535782},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85216839051&doi=10.1109%2FACCESS.2025.3535782&partnerID=40&md5=d8d8937907d2e07daaa0b230fead65db},
	abstract = {Large Language Models (LLMs) have transformed Natural Language Processing (NLP) and Software Engineering by fostering innovation, streamlining processes, and enabling data-driven decision-making. Recently, the adoption of LLMs in time-series analysis has catalyzed the emergence of time-series LLMs, a rapidly evolving research area. Existing reviews provide foundational insights into time-series LLMs but lack a comprehensive examination of recent advancements and do not adequately address critical challenges in this domain. This Systematic Literature Review (SLR) bridges these gaps by analysing state-of-the-art contributions in time-series LLMs, focusing on architectural innovations, tokenisation strategies, tasks, datasets, evaluation metrics, and unresolved challenges. Using a rigorous methodology based on PRISMA guidelines, over 700 studies from 2020 to 2024 were reviewed, with 59 relevant studies selected from journals, conferences, and workshops. Key findings reveal advancements in architectures and novel tokenization strategies tailored for temporal data. Forecasting dominates the identified tasks with 79.66% of the selected studies, while classification and anomaly detection remain underexplored. Furthermore, the analysis reveals a strong reliance on datasets from the energy and transportation domains, highlighting the need for more diverse datasets. Despite these advancements, significant challenges persist, including tokenization inefficiencies, prediction hallucinations, and difficulties in modelling long-term dependencies. These issues hinder the robustness, scalability, and adaptability of time-series LLMs across diverse applications. To address these challenges, this SLR outlines a research roadmap emphasizing the improvement of tokenization methods, the development of mechanisms for capturing long-term dependencies, the mitigation of hallucination effects, and the design of scalable, interpretable models for diverse time-series tasks. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Forecasting; Large Language Models; Time-series; Time-series Llms; Tokenization; Metadata; Natural Language Processing Systems; Network Security; Spatio-temporal Data; Time Series; Language Model; Large Language Model; Long-term Dependencies; State Of The Art; Systematic Literature Review; Time-series Large Language Model; Times Series; Tokenization; Anomaly Detection},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Ryan20251683,
	author = {Ryan, Stephen},
	title = {Barriers to the Adoption of Visual Knowledge Management Tools: Challenges at the Intersection of Technology, People, and Process},
	year = {2025},
	pages = {1683 - 1687},
	doi = {10.1109/COMPSAC65507.2025.00227},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105016207264&doi=10.1109%2FCOMPSAC65507.2025.00227&partnerID=40&md5=91dc995fa994a90883b3f0cc3ddd4e4a},
	abstract = {Visual Knowledge Management Tools (VKMTs) have gained attention for their ability to support knowledge capture, organization, and communication in fields such as software engineering, process design, and interdisciplinary collaboration. Despite their theoretical advantages, adoption across academia and industry remains inconsistent. This paper explores the barriers hindering VKMT adoption through a systematic literature review of 38 peer-reviewed studies published between 2015 and 2024. Key challenges were identified and thematically grouped into five categories: technological, organizational, human, economic, and cultural. The findings reveal that while many barriers are common to general technology adoption, others - such as visual complexity, lack of interoperability, and visual literacy gaps - are more specific to VKMTs. To support further research and practice, we provide a descriptive summary of the literature base, outline the methodological approach, and offer a structured framework of adoption barriers. Practical recommendations are offered for stakeholders seeking to implement VKMTs, along with suggestions for future empirical work to bridge the gap between potential and application. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Barriers To Adoption; Knowledge Engineering; Organizational Change; Technology Adoption; Visual Knowledge Management Tools; Economic And Social Effects; Engineering Research; Knowledge Management; Software Engineering; Visual Communication; Barriers To Adoption; Knowledge Capture; Knowledge Communication; Knowledge Management Tool; Knowledge Organization; Organizational Change; Support Knowledge; Technology Adoption; Visual Knowledge; Visual Knowledge Management Tool; Knowledge Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Domínguez-Isidro2025529,
	author = {Domínguez-Isidro, Saúl and Sánchez-García, Ángel J. and Morales-Utrera, Axel Jordano and Limón, Xavier},
	title = {Machine Learning Techniques for Automatic Program Repair: A Systematic Literature Mapping},
	year = {2025},
	journal = {Studies in Computational Intelligence},
	volume = {1209},
	pages = {529 - 543},
	doi = {10.1007/978-3-031-90310-6_32},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105015054321&doi=10.1007%2F978-3-031-90310-6_32&partnerID=40&md5=933744c5fc680b4f78e6ab8677e75f2f},
	abstract = {Program repair involves identifying and fixing issues in a program's source code, encompassing error correction, performance improvement, code optimization, and even addressing security problems. However, this process can address issues beyond errors, such as code readability, elimination of duplicated code, and more. Generally, code repair activities are carried out during the software construction and maintenance process. This work presents an analysis of Machine Learning (ML) techniques used in automatic program repair (APR) processes to identify the benefits and challenges of their use. For this purpose, guidelines for conducting systematic literature reviews in software engineering were followed. Four databases were explored, yielding a total of 21 studies. It was found that the most frequently addressed automatic program repair approaches using ML techniques involve syntax, semantic, and logical errors; security aspects have been addressed to a lesser extent. The ML techniques used for this purpose include decision trees and deep learning techniques such as convolutional and recurrent neural networks, long short-term memory models, and others combined with code languages models. Finally, according to the analysis, the main advantage of using these techniques is their ability to handle large volumes of data and learn from their environment. However, in many cases, manual verification of the solutions generated by these techniques is still necessary. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Automatic Program Repair; Machine Learning; Software Construction; Systematic Literature Mapping},
	type = {Book chapter},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Vishal2025559,
	author = {Vishal, null and Bhutani, Priyanka},
	title = {Systematic Review and Analysis of Software Bug Prediction and Maintainability},
	year = {2025},
	journal = {Lecture Notes in Networks and Systems},
	volume = {1389 LNNS},
	pages = {559 - 571},
	doi = {10.1007/978-981-96-6066-7_39},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105014452831&doi=10.1007%2F978-981-96-6066-7_39&partnerID=40&md5=01e211d4aa31412afe05997968d7033e},
	abstract = {The software bug prediction is the main component of the (SDLC) Software Development Life Cycle. Without that it isn’t possible for the developer to identify bug that will cause serious issue in software application. It will lead to the customer software failure and dissatisfaction of customer. The problem with the software arises when it is not possible to predict bug on the right time. Also another problem comes with the Software maintainability which is essential part of SDLC. Software maintainability describes the simplicity with which an application can be adapted, upgraded, or refined over time. This paper presents an abstract overview of the methodologies and techniques employed in soft bug prediction and maintainability practices. By integrating bug prediction techniques into the software development lifecycle and adopting best practices for maintainability, organizations can enhance the reliability, standard and sustainability of their software suite. This abstract provides a foundation for further exploration and implementation of these concepts in practical software engineering contexts. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Bug Prediction; Machine Learning; Maintainability; Reliability; Application Programs; Artificial Intelligence; Forecasting; Learning Systems; Life Cycle; Software Design; Software Reliability; Sustainable Development; Bug Predictions; Machine-learning; Methodology And Techniques; Software Applications; Software Bug; Software Development Life-cycle; Software Failure; Software Maintainability; Systematic Analysis; Systematic Review; Maintainability},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Woesle2025148231,
	author = {Woesle, Christian and Fischer-Brandies, Leopold and Büttner, Ricardo},
	title = {A Systematic Literature Review of Hallucinations in Large Language Models},
	year = {2025},
	journal = {IEEE Access},
	volume = {13},
	pages = {148231 - 148253},
	doi = {10.1109/ACCESS.2025.3601206},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105013999771&doi=10.1109%2FACCESS.2025.3601206&partnerID=40&md5=8787796e859c659b77770de8f9fc61a7},
	abstract = {This review systematically maps research on hallucinations in large language models using a descriptive scheme that links model outputs to four system architectures: unaugmented generation, post-hoc reactive validation, proactive detection-and-mitigation, and fully integrated detection-and-mitigation designs. Our methodology for this systematic review follows the PRISMA guidelines to ensure transparency and reproducibility. We searched IEEE Xplore, ACM Digital Library, and ScienceDirect for studies published between 2015 and January 2025 and extracted 125 peer-reviewed papers across nine application domains. Quantitative analysis shows that question answering and multimodal tasks account for 48% of all papers, whereas software engineering, educational technology, and autonomous systems are underexplored. Although 87.5% of the studies rely on additional reactive or proactive defenses, only 8.8% implement integrated architecture-level safeguards, revealing a critical gap in unified and dynamic architectures. The resulting classification matrix and domain map provide a diagnostic tool for locating blind spots and comparing architectural maturity. Three actionable priorities emerge: develop integrated reasoning-and-verification loops that pre-empt hallucinations; transfer proven causal-intervention and multi-agent validation pipelines to high-stakes, under-represented domains and benchmark them under real conditions; and build modular, cross-domain evaluation frameworks that isolate the contribution of individual mitigation components and support ablation studies. By consolidating fragmented evidence and quantifying architecture-domain imbalances, this review establishes a traceable foundation for engineering reliable, explainable, and domain-adaptable countermeasures to hallucinations in generative language technology. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Architecture; Detection Techniques; Hallucinations; Large Language Models; Mitigation Strategies; Systematic Literature Review; Benchmarking; Digital Libraries; Distributed Computer Systems; Education Computing; Educational Technology; Memory Architecture; Multi Agent Systems; Verification; Detection Technique; Fully Integrated; Hallucination; Language Model; Large Language Model; Link Model; Mitigation Strategy; Model Outputs; Systematic Literature Review; Systems Architecture; Architecture},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@CONFERENCE{Guerral2025296,
	author = {Guerral, Alberto},
	title = {Mitigation of Cognitive Biases in Innovative Software Engineering Projects: A Proposal},
	year = {2025},
	pages = {296 - 302},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105012241049&partnerID=40&md5=904bd25b1497aba898b03e467d367120},
	abstract = {Cognitive biases are critical in software engineering (SE) affecting replanning, failures and even cancellations. This work aims to identify and mitigate cognitive biases in the management of innovative projects in SE, in a large multinational company. Using the Design Science Research (DSR) method, a (1) Systematic Literature Review (SLR) will be carried out, (2) complementary research, (3) study of technological alternatives and (4) application of an artifact in the company's project portfolio to identify the behavior of the five most impactful biases in SE, proposing a framework with practical recommendations to eliminate them, contributing to future research in the industry. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Cognitive Bias; Innovation; Project; Psychology; Software; Behavioral Research; Information Use; Project Management; Cognitive Bias; Design-science Researches; Innovation; Innovative Projects; Multi-national Companies; Project; Psychology; Re-planning; Software; Software Engineering Projects; Computer Software},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ali202544,
	author = {Ali, Nauman Bin and Börstler, Jürgen},
	title = {On the Relevance of Paper-Type Information in Systematic Mapping Studies in Software Engineering},
	year = {2025},
	pages = {44 - 47},
	doi = {10.1109/WSESE66602.2025.00014},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105012157648&doi=10.1109%2FWSESE66602.2025.00014&partnerID=40&md5=d86a310921de758645d5b6fd1ca65a90},
	abstract = {Systematic Mapping Studies (SMSs) are valuable in evidence-based software engineering research. SMSs aim to provide an overview of research, identify gaps and trends, and assess the feasibility of conducting a more focused systematic literature review. In current guidelines for conducting SMSs, a quality assessment of the included papers is suggested only when the research questions explicitly require such a quality assessment. We agree with the recommendation that quality assessment is generally non-mandatory. However, SMSs deal with papers ranging from opinion papers to papers reporting highly rigorous empirical studies. Therefore, in this paper, we argue that analyzing the type of papers is essential for almost every intended purpose of an SMS. Otherwise, without distinguishing papers based on their types, we risk deriving a less informative or incomplete overview or, at worst, a misleading overview of research. Petersen et al. 'encourage' the classification of papers into six paper types as proposed by Wieringa et al.: evaluation research, solution proposal, validation research, philosophical papers, opinion papers, and personal experience papers. Given the lenient guidelines on assessing the quality of included studies, we recommend a stronger focus on classifying papers by type. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Mapping Study; Scoping Review; Scoping Study; Secondary Study; Systematic Map; Mapping; Paper Products; Philosophical Aspects; Mapping Studies; Paper-type; Quality Assessment; Scoping; Scoping Review; Scoping Study; Secondary Study; Systematic Mapping Studies; Systematic Maps; Type Information; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Li2025,
	author = {Li, Boyuan and Liu, Chengwei and Fan, Lingling and Chen, Sen and Zhang, Zhenlin and Liu, Zheli},
	title = {Open Source, Hidden Costs: A Systematic Literature Review on OSS License Management},
	year = {2025},
	journal = {IEEE Transactions on Software Engineering},
	pages = {},
	doi = {10.1109/TSE.2025.3586411},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105010643414&doi=10.1109%2FTSE.2025.3586411&partnerID=40&md5=f45d45a253cf538bba515b3fa47f91f0},
	abstract = {Integrating third-party software components is a common practice in modern software development, offering significant advantages in terms of efficiency and innovation. However, this practice is fraught with risks related to software licensing. A lack of understanding may lead to disputes, which can pose serious legal and operational challenges. To these ends, both academia and industry have conducted various investigations and proposed solutions and tools to deal with these challenges. However, significant limitations still remain. Moreover, the rapid evolution of open-source software (OSS) licenses, as well as the rapidly incorporated generative software engineering techniques, such as large language models for code (CodeLLMs), are placing greater demands on the systematic management of software license risks. To unveil the severe challenges and explore possible future directions, we conduct the first systematic literature review (SLR) on 80 carefully selected OSS license-related papers, classifying existing research into three key categories, i.e., license identification, license risk assessment, and license risk mitigation. Based on these, we discuss challenges in existing solutions, conclude the opportunities to shed light on future research directions and offer practical recommendations for practitioners.We hope this thorough review will help bridge the gaps between academia and industry and accelerate the ecosystem-wide governance of legitimate software risks within the software engineering community. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Oss; Oss License Management; Systematic Literature Review; Ecosystems; Open Source Software; Open Systems; Software Design; Hidden Costs; License Management; Open-source; Open-source Software License Management; Open-source Softwares; Software License; Software-component; Systematic Literature Review; Third Party Software; Risk Assessment},
	type = {Review},
	publication_stage = {aip},
	source = {Scopus}
}

@ARTICLE{Rivera-Ibarra2024,
	author = {Rivera-Ibarra, José Gamaliel and Borrego, Gilberto and Palacio, Ramón Rene},
	title = {Early Estimation in Agile Software Development Projects: A Systematic Mapping Study},
	year = {2024},
	journal = {Informatics},
	volume = {11},
	number = {4},
	pages = {},
	doi = {10.3390/informatics11040081},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85213338440&doi=10.3390%2Finformatics11040081&partnerID=40&md5=0dbc122e747c1b2fe0a5db18eb986da1},
	abstract = {Estimating during the early stages is crucial for determining the feasibility and conducting the budgeting and planning of agile software development (ASD) projects. However, due to the characteristics of ASD and limited initial information, these estimates are often complicated and inaccurate. This study aims to systematically map the literature to identify the most used estimation techniques; the reasons for their selection; the input artifacts, predictors, and metrics associated with these techniques; as well as research gaps in early-stage estimations in ASD. This study was based on the guidelines proposed by Kitchenham for systematic literature reviews in software engineering; a review protocol was defined with research questions and criteria for the selection of empirical studies. Results show that data-driven techniques are preferred to reduce biases and inconsistencies of expert-driven techniques. Most selected studies do not mention input artifacts, and software size is the most commonly used predictor. Machine learning-based techniques use publicly available data but often contain records of old projects from before the agile movement. The study highlights the need for tools supporting estimation activities and identifies key areas for future research, such as evaluating hybrid approaches and creating datasets of recent projects with sufficient contextual information and standardized metrics. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile Development; Early Stage; Literature Review; Project Estimation; Systematic Mapping},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{dos Santos2024,
	author = {dos Santos, Vinicius and Iwazaki, Anderson Yoshiaki and Romero Felizardo, Katia Romero and de Souza, Erica Ferreira and Nakagawa, Elisa Yumi},
	title = {Sustainable systematic literature reviews},
	year = {2024},
	journal = {Information and Software Technology},
	volume = {176},
	pages = {},
	doi = {10.1016/j.infsof.2024.107551},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85202551703&doi=10.1016%2Fj.infsof.2024.107551&partnerID=40&md5=a1ab69804f8f5fd85be171a00f3f3f43},
	abstract = {Context: Systematic Literature Reviews (SLR) have been recognized as an important research method for summarizing evidence in Software Engineering (SE). At the same, SLR still presents several problems, such as the high resource consumption (mainly human resources) and lack of effective impact on SE practitioners, although much research has already been done. Objective: The main goal of this paper is to explore the concept of sustainability in the SLR area, intending to contribute to understanding better and solving such problems in an integrated way. More specifically, this paper characterizes what sustainable SLR are, their core characteristics, critical factors (i.e., sensitive points in the SLR process), and guidelines for conducting such SLR. Methods: We performed a meta-ethnographic study to find key concepts of sustainable software systems and transpose them to sustainable SLR. For this, we systematically selected 16 studies about sustainable software systems and 14 distinguished studies about SLR. Following, we extracted the main keywords and metaphors, determined how both areas are correlated, and transposed them to obtain a set of core characteristics of sustainable SLR as well as critical factors and guidelines. Additionally, we validated them with specialists using the Delphi method. Results: We found 15 core characteristics that offer a broad view of sustainable SLR, 15 critical factors in the SLR process that should be carefully addressed when conducting and updating SLR, and also 16 guidelines to manage SLR from the sustainability perspective. Conclusion: The concept of sustainability in SLR can contribute to solving SLR problems in a more integrated way, while this work could change the mindset of the SLR community about the need to conduct sustainable SLR. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Secondary Study; Slr; Sustainability; Systematic Literature Review; Critical Factors; Engineering Practitioners; Research Method; Resources Consumption; Review Process; Secondary Study; Software-systems; Sustainable Softwares; Systematic Literature Review; Sustainable Development Goals},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Koana2024,
	author = {Koana, Umme Ayman and Le, Quang Hy and Raman, Shaikur and Carlson, Chris and Chew, Francis and Nayebi, Maleknaz},
	title = {Examining ownership models in software teams: A systematic literature review and a replication study},
	year = {2024},
	journal = {Empirical Software Engineering},
	volume = {29},
	number = {6},
	pages = {},
	doi = {10.1007/s10664-024-10538-5},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85205671872&doi=10.1007%2Fs10664-024-10538-5&partnerID=40&md5=64dbc2e97e3646d95e53d2fd91328683},
	abstract = {Effective ownership of software artifacts, particularly code, is crucial for accountability, knowledge sharing, and code quality enhancement. Researchers have proposed models linking ownership of software artifacts with developer performance and code quality. Our study aims to systematically examine various ownership models and provide a structured literature overview. Conducting a systematic literature review, we identified 79 relevant papers published between 2005 and 2022. We developed a taxonomy of ownership artifacts based on type, owners, and degree of ownership, along with compiling modeling variables and analytics types used in each study. Additionally, we assessed the replication status of each study. As a result, we identified nine distinct software artifacts whose ownership has been discussed in the literature, with "Code" being the most frequently analyzed artifact. We found that only three papers (3.79%) provided code and data, whereas nine papers (11.4%) provided only data. Using our systematic literature review results, we replicated experiments on nine priority projects at Brightsquid. The company aimed to compare its code quality against ownership factors in other teams, so we conducted a replication study using their data. Unlike prior studies, we found no strong correlation between minor contributors and bug numbers. Surprisingly, we found no strong link between the total number of developers modifying a file and bug counts, contrasting previous findings. However, we observed a significant correlation between major contributors and bug counts, diverging from earlier research. This study provides a comprehensive overview of ownership models and lists the variables used for ownership modeling in software engineering. Additionally, the study’s findings can inform the development of best practices for software development teams and assist in decision-making, considering various company and project contexts. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Authorship; Code Ownership; Ownership; Replication; Software Engineering; Software Quality; Systematic Literature Review; Computer Software Selection And Evaluation; Decision Making; Software Design; Taxonomies; Authorship; Code Ownership; Code Quality; Ownership; Ownership Model; Replication; Replication Study; Software Artefacts; Software Quality; Systematic Literature Review; Software Quality},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Malhotra202487237,
	author = {Malhotra, Ruchika and Meena, Shweta},
	title = {A systematic review of transfer learning in software engineering},
	year = {2024},
	journal = {Multimedia Tools and Applications},
	volume = {83},
	number = {39},
	pages = {87237 - 87298},
	doi = {10.1007/s11042-024-19756-x},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85200057018&doi=10.1007%2Fs11042-024-19756-x&partnerID=40&md5=eef603286603c4eecac245242324cd84},
	abstract = {Nowadays, everyone requires a good quality software. The quality of software can’t be assured due to lack of data availability for training, and testing. Thus, Transfer Learning (TL) plays an important role in the reusability of existing software for developing new software with a similar domain and task. TL focused on transferring knowledge from existing prediction models for the development of new prediction models. The developed models are used for unseen datasets based on the characteristics, and nature of the dataset. The sufficient amount of training data is unavailable. The data distribution and task of the source and target project must be checked before employing TL for software development. In this Systematic Review (SR), we have investigated 39 studies from January 1990 to March 2024 that used TL in the software engineering domain. The review focused on the identification of Machine Learning (ML) techniques used with TL techniques, types of TL explored, TL settings explored, experimental setting, dataset, quality attribute, validation methods, threats to validity, strengths and weakness of TL techniques, and hybrid techniques with TL. According to the experimental comparison, the performance of TL techniques is encouraging. The findings of this SR paper will serve as guidelines for academicians, software industry experts, software developers, software testers, and researchers. This SR is also helpful in the selection of appropriate types of TL and TL settings for the development of efficient software in the future based on the type of problem and TL setting. Thus, this study showed that 30.67% of the studies are focused on defect prediction, that used 15% open-source dataset. Further, 35% of studies used SVM as a base classifier for TL, and different independent variables of the used dataset are considered as prediction model input. Further, the K-fold Cross-Validation (CV) method is used in 15 studies. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Change Prediction; Cross-project; Defect Prediction; Effort Estimation; Evolutionary Techniques; Heuristic; Hypothesis Testing; Machine Learning; Search Optimization; Software Engineering; Software Quality; Transfer Learning; Classification (of Information); Computer Software Reusability; Computer Software Selection And Evaluation; Forecasting; Learning Systems; Open Source Software; Reusability; Software Design; Software Quality; Software Testing; Support Vector Machines; Change Prediction; Cross-project; Defect Prediction; Effort Estimation; Evolutionary Techniques; Heuristic; Hypothesis Testing; Machine-learning; Search Optimization; Software Quality; Transfer Learning; Defects},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Principe2024823,
	author = {Principe, Vitor and da Silva, Giullio Cesar Pereira Salustiano Mallen and Vale, Rodrigo Gomes de Souza and de Alkmim Moreira Nunes, Rodolfo},
	title = {Blockchain and sports industry: a systematic literature review of Fan Tokens and their implications; Blockchain y la industria del deporte: una revisión sistemática de la literatura sobre Fan Tokens y sus implicaciones},
	year = {2024},
	journal = {Retos},
	volume = {60},
	pages = {823 - 840},
	doi = {10.47197/retos.v60.107125},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105004855074&doi=10.47197%2Fretos.v60.107125&partnerID=40&md5=605937423e23d52d652468155f8f3f23},
	abstract = {Background: Fan tokens emerge as a significant innovation that enables a new form of interaction between clubs and their followers and introduces an alternative economic model for sports entities. Purpose: The review discusses the technical characteristics of fan tokens and their role in enhancing fan participation in minor club decisions, reinforcing the sense of belonging and community. Methods: The research encompassed a systematic literature review, following the Preferred Reporting Items for Systematic Reviews and Meta-Analyses (PRISMA) guidelines and Evidence-Based Systematic Mapping in Software Engineering (EBSE). Thus, it presented a quantitative and qualitative analysis of the applications of fan tokens in the sports industry. Results: Despite engagement and monetization opportunities, the results highlight significant challenges, such as price volatility and appropriate regulation to ensure safe and effective adoption. The discussion also includes the ethical and social implications of using fan tokens, emphasizing the need for strategies that prioritize inclusion and fairness for fan engagement. Conclusion: Finally, the study proposes future research directions that consider continuous technological development and changes in fan expectations, aiming to optimize the use of fan tokens to benefit the stakeholders involved. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Blockchain; Digital Assets; Fan Engagement; Fan Tokens; Sport Management; Tokens},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Razzaq2024,
	author = {Razzaq, Abdul and Buckley, Jim P. and Lai, Qin and Yu, Tingting and Botterweck, Goetz},
	title = {A Systematic Literature Review on the Influence of Enhanced Developer Experience on Developers' Productivity: Factors, Practices, and Recommendations},
	year = {2024},
	journal = {ACM Computing Surveys},
	volume = {57},
	number = {1},
	pages = {},
	doi = {10.1145/3687299},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85208566769&doi=10.1145%2F3687299&partnerID=40&md5=9bbf2966ff4c219aad22991e9cda29a5},
	abstract = {Context and Motivation-Developer eXperience (Dev-X) is a recent research area that focuses on developers perceptions, feelings, and values with respect to software development and software quality. Research suggests that factors and practices related to Dev-X can have a substantial impact on developer productivity (Dev-P). However, despite a large and diverse body of literature on factors that can impact Dev-P in general, there is no coherent and comprehensive characterization of how Dev-X-specific insights can influence developer productivity.Aims-In the presented research, we aim to provide a coherent, comprehensive characterization of factors and practices related to Dev-X, with a particular focus on those factors and practices that potentially affect Dev-P.Method-To this end, we performed a systematic literature review and identified 218 relevant papers in this area. We characterize the papers based on the related frameworks and concepts common to Dev-X and Dev-P as presented in the existing literature. Dev-X factors such as "work fragmentation"and practices such as "collaboration with owner-developer"are identified using a grounded-in-The-literature, content-Analysis method, guided by the theory. For each Dev-X factor, we identify attributes that might be used to assess/ measure the current status (of an organization or project) regarding that factor and how that factor and its effects on productivity have been evidenced in the literature (mentioned vs. considered in questionnaires vs. substantiated with a more positivist evaluation).Results-We identify 33 Dev-X-related factors and 41 Dev-X-related practices, which are organized into 10 themes to summarize their influence. The results suggest that the availability of required resources, relevant expertise re the allocated tasks, and fewer interruptions are among the top positively impacting factors. Conversely, factors such as code complexity, heterogeneous contexts of tasks, and non-Adherence to standardization harm Dev-X and Dev-P. Top industrial practices employed to mitigate the negative influence of factors include characterization-based task assignments, mental model support, and the timely evolution of technologies.Conclusions-Overall, this research suggests that organizations can influence Dev-P through improved Dev-X, incorporating suitable practices to mediate relevant factors in their context. Important in this regard are practices such as fragmenting large tasks, highlighting the utility of proposed tasks/changes to the developers, and promoting (developer) ownership of artefacts. Finally, our results point to areas where further research seems appropriate, i.e., where Dev-X factors/practices have been proposed as being impactful on Dev-P but not yet fully substantiated or explored as such (factors like "Nature of Activity"and practices like choosing practices/protocols appropriately). © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Developer Emotions; Developer Experience; Developer Perceptions; Developer Productivity; Developer Values; Human Factors In Software Engineering; Developer Emotion; Developer Experience; Developer Perception; Developer Productivity; Developer Value; Human Factor In Software Engineering; Productivity Factors; Recent Researches; Research Areas; Systematic Literature Review},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Rokem2024,
	author = {Rokem, Ariel S.},
	title = {Ten simple rules for scientific code review},
	year = {2024},
	journal = {PLOS Computational Biology},
	volume = {20},
	number = {9},
	pages = {},
	doi = {10.1371/journal.pcbi.1012375},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85203274696&doi=10.1371%2Fjournal.pcbi.1012375&partnerID=40&md5=578c86220f00775a8941adab0bcda154},
	abstract = {As large, high-dimensional data have become more common, software development is playing an increasingly important role in research across many different fields. This creates a need to adopt software engineering practices in research settings. Code review is the engineering practice of giving and receiving detailed feedback on a computer program. Consistent and continuous examination of the evolution of computer programs by others has been shown to be beneficial, especially when reviewers are familiar with the technical aspects of the software and also when they possess relevant domain expertise. The rules described in the present article provide information about the why, when, and how of code review. They provide the motivation for continual code reviews as a natural part of a rigorous research program. They provide practical guidelines for conducting review of code both in person, as a “lab meeting for code,” as well as asynchronously, using industry-standard online tools. A set of guidelines is provided for the nitty-gritty details of code review, as well as for the etiquette of such a review. Both the technical and the social aspects of code review are covered to provide the reader with a comprehensive approach that facilitates an effective, enjoyable, and educational approach to code review. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Economic And Social Effects; Reviews; Social Aspects; Code Review; Common Software; Detailed Feedbacks; Domain Expertise; Engineering Practices; Large High-dimensional Data; Rigorous Research; Simple++; Software Engineering Practices; Technical Aspects; Software Design; Drug Therapy; Human; Open Access Publishing; Practice Guideline; Review; Social Aspect; Software; Systematic Review; Therapy; Bioinformatics; Procedures; Computational Biology; Guidelines As Topic; Humans; Software},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Krüger2024,
	author = {Krüger, Jacob and Çalıklı, Gül and Bershadskyy, Dmitri and Otto, Siegmar and Zabel, Sarah and Heyer, Robert S.},
	title = {Guidelines for using financial incentives in software-engineering experimentation},
	year = {2024},
	journal = {Empirical Software Engineering},
	volume = {29},
	number = {5},
	pages = {},
	doi = {10.1007/s10664-024-10517-w},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85201000469&doi=10.1007%2Fs10664-024-10517-w&partnerID=40&md5=285f647a7fba7583b752ea12f5c1144c},
	abstract = {Context: Empirical studies with human participants (e.g., controlled experiments) are established methods in Software Engineering (SE) research to understand developers’ activities or the pros and cons of a technique, tool, or practice. Various guidelines and recommendations on designing and conducting different types of empirical studies in SE exist. However, the use of financial incentives (i.e., paying participants to compensate for their effort and improve the validity of a study) is rarely mentioned Objective: In this article, we analyze and discuss the use of financial incentives for human-oriented SE experimentation to derive corresponding guidelines and recommendations for researchers. Specifically, we propose how to extend the current state-of-the-art and provide a better understanding of when and how to incentivize. Method: We captured the state-of-the-art in SE by performing a Systematic Literature Review (SLR) involving 105 publications from six conferences and five journals published in 2020 and 2021. Then, we conducted an interdisciplinary analysis based on guidelines from experimental economics and behavioral psychology, two disciplines that research and use financial incentives. Results: Our results show that financial incentives are sparsely used in SE experimentation, mostly as completion fees. Especially performance-based and task-related financial incentives (i.e., payoff functions) are not used, even though we identified studies for which the validity may benefit from tailored payoff functions. To tackle this issue, we contribute an overview of how experiments in SE may benefit from financial incentivisation, a guideline for deciding on their use, and 11 recommendations on how to design them. Conclusions: We hope that our contributions get incorporated into standards (e.g., the ACM SIGSOFT Empirical Standards), helping researchers understand whether the use of financial incentives is useful for their experiments and how to define a suitable incentivisation strategy. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Software Engineering; Experimentation; Financial Incentives; Guidelines; Study Design; Behavioral Research; Economics; Finance; Controlled Experiment; Empirical Software Engineering; Empirical Studies; Experimentation; Financial Incentives; Guideline; Payoff Function; Software Engineering Research; State Of The Art; Study Design; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Magableh2024,
	author = {Magableh, Aws Abed Al Raheem and Ghraibeh, Lana L. and Audeh, Afnan Y. and Albahri, A. S. and Deveci, Muhammet and Antucheviciene, Jurgita},
	title = {Systematic review of software engineering uses of multi-criteria decision-making methods: Trends, bibliographic analysis, challenges, recommendations, and future directions},
	year = {2024},
	journal = {Applied Soft Computing},
	volume = {163},
	pages = {},
	doi = {10.1016/j.asoc.2024.111859},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85196487958&doi=10.1016%2Fj.asoc.2024.111859&partnerID=40&md5=3c789557f4f9e2e7d1130b73183f939f},
	abstract = {Correctly adhering to the processes within the software development life cycle (SDLC), from analysis and design to coding and testing, is vital for ensuring the successful and efficient creation of high-quality software applications. These structured phases provide a systematic approach to software development, facilitating clear communication, reducing errors, and improving collaboration among development teams. For the proper and correct use of SDLC processes, it is essential for both software engineers and software decision makers to perform the correct and needed actions while performing each software process, and one method of facilitating that is multicriteria decision making (MCDM). This study aims to provide a systematic review of the use of MCDM within the field of software engineering (SE), encompassing methodologies such as fuzzy MCDM, AHP, TOPSIS, DEMATEL, and other methods, with a deliberate focus on software engineering development processes. To ensure the high quality of this review, a methodical and structured literature search process was performed with strict selection criteria, resulting in the identification of 32 contributions on the applications of MCDM in SE from various databases, including Scopus, ScienceDirect, IEEE Xplore digital library (IEEE), and Web of Science (WOS). The selected papers were taxonomized into seven main categories, with some divided into subcategories. This paper presents a systematic and comprehensive analysis of the aforementioned studies, investigating the challenges, motivations, and recommendations found within each, thereby paving the way for potential future research. Bibliometric analysis is also provided to show concise quantitative analysis of related bibliographic information, which draws several key insights into publication trends. Finally, a critical analysis of the current literature and existing research is presented, while also addressing relevant research gaps. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Mcdm; Sdlc; Software Development Life Cycle; Software Engineering; Systematic Literature Review (slr); Application Programs; Decision Making; Digital Libraries; Life Cycle; Quality Control; Software Design; Software Testing; Bibliographic Analysis; High-quality Software; Multicriteria Decision Making Methods; Multicriteria Decision-making; Software Applications; Software Development Life-cycle; Systematic Literature Review; Systematic Review; Systematic Errors},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Gunatilake2024,
	author = {Gunatilake, Hashini and Grundy, John C. and Hoda, Rashina and Mueller, Ingo},
	title = {The impact of human aspects on the interactions between software developers and end-users in software engineering: A systematic literature review},
	year = {2024},
	journal = {Information and Software Technology},
	volume = {173},
	pages = {},
	doi = {10.1016/j.infsof.2024.107489},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85193200792&doi=10.1016%2Fj.infsof.2024.107489&partnerID=40&md5=d08e4c609f56352a43814ae4533f027c},
	abstract = {Context: Research on human aspects within the field of software engineering (SE) has been steadily gaining prominence in recent years. These human aspects have a significant impact on SE due to the inherently interactive and collaborative nature of the discipline. Objective: In this paper, we present a systematic literature review (SLR) on human aspects affecting developer-user interactions. The objective of this SLR is to plot the current landscape of primary studies by examining the human aspects that influence developer-user interactions, their implications, interrelationships, and how existing studies address these implications. Method: We conducted this SLR following the guidelines proposed by Kitchenham et al. We performed a comprehensive search in six digital databases, and an exhaustive backward and forward snowballing process. We selected 46 primary studies for data extraction. Results: We identified various human aspects affecting developer-user interactions in SE, assessed their interrelationships, identified their positive impacts and mitigation strategies for negative effects. We present specific recommendations derived from the identified research gaps. Conclusion: Our findings suggest the importance of leveraging positive effects and addressing negative effects in developer-user interactions through the implementation of effective mitigation strategies. These insights may benefit software practitioners for effective user interactions, and the recommendations proposed by this SLR may aid the research community in further human aspects related studies. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Human Aspects; Software Developers; Software Engineering; Software Users; Systematic Literature Review; 'current; Data Extraction; Digital Database; End-users; Human Aspects; Mitigation Strategy; Software Developer; Software User; Systematic Literature Review; User Interaction; Software Engineering},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access; Hybrid Gold Open Access}
}

@ARTICLE{2024,
	title = {Proceedings - 2024 IEEE/ACM International Workshop on Methodological Issues with Empirical Studies in Software Engineering, WSESE 2024},
	year = {2024},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85203172640&partnerID=40&md5=2c80f5efc7319f212c3f0d943158657a},
	abstract = {The proceedings contain 14 papers. The topics discussed include: lessons learned from mining the hugging face repository; the role of data filtering in open source software ranking and selection; evidence Tetris in the pixelated world of validity threats; revisiting the construct and assessment of industrial relevance in software engineering research; grounded theory in software engineering: challenges and lessons learned from the trenches; a second look at the impact of passive voice requirements on domain modeling: Bayesian reanalysis of an experiment; emerging results on automated support for searching and selecting evidence for systematic literature review updates; apples, oranges, and software engineering: study selection challenges for secondary research on latent variables; and who's actually being studied? a call for population analysis in software engineering research. © 2025 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Grabinger2024,
	author = {Grabinger, Lisa and Hauser, Florian and Wolff, Christian and Mottok, Jǘrgen Horst},
	title = {On Eye Tracking in Software Engineering},
	year = {2024},
	journal = {SN Computer Science},
	volume = {5},
	number = {6},
	pages = {},
	doi = {10.1007/s42979-024-03045-3},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85199857606&doi=10.1007%2Fs42979-024-03045-3&partnerID=40&md5=3e074f34fcd3679bf6a572ba9376cd23},
	abstract = {Eye tracking is becoming more and more important as a research method within the field of software engineering (SE). Existing meta-analyses focus on the design or conduct of SE eye tracking studies rather than the analysis phase. This article attempts to fill this gap; it presents a systematic literature review of eye tracking studies in the field of SE—focusing mainly on the data analysis methods used. From the IEEE Xplore and ACM digital libraries we gather 125 papers up to the first quarter of 2024. Detailed evaluation provides information on the number of papers that use specific methods of analysis (i.e., descriptive or inferential statistics, and gaze visualization) or settings (e.g., sample size, technical setup, and selected aspects of research design). With the data obtained we can infer the popularity of specific analysis methods in the field. Those results enable efficient work on data analysis tools or education of aspiring researchers and can serve as basis for standardization or guidelines within the community—providing for methods to include as well as current inconsistencies. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical; Eye Tracking; Software Engineering; Systematic Literature Review},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Paulino2024617,
	author = {Paulino, Dennis and Correia, António and Barroso, João Manuel Pereira and Paredes, Hugo},
	title = {Cognitive personalization for online microtask labor platforms: A systematic literature review},
	year = {2024},
	journal = {User Modeling and User-Adapted Interaction},
	volume = {34},
	number = {3},
	pages = {617 - 658},
	doi = {10.1007/s11257-023-09383-w},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85171423658&doi=10.1007%2Fs11257-023-09383-w&partnerID=40&md5=6497f9e45a3c68eb6dd4fef30683c742},
	abstract = {Online microtask labor has increased its role in the last few years and has provided the possibility of people who were usually excluded from the labor market to work anytime and without geographical barriers. While this brings new opportunities for people to work remotely, it can also pose challenges regarding the difficulty of assigning tasks to workers according to their abilities. To this end, cognitive personalization can be used to assess the cognitive profile of each worker and subsequently match those workers to the most appropriate type of work that is available on the digital labor market. In this regard, we believe that the time is ripe for a review of the current state of research on cognitive personalization for digital labor. The present study was conducted by following the recommended guidelines for the software engineering domain through a systematic literature review that led to the analysis of 20 primary studies published from 2010 to 2020. The results report the application of several cognition theories derived from the field of psychology, which in turn revealed an apparent presence of studies indicating accurate levels of cognitive personalization in digital labor in addition to a potential increase in the worker’s performance, most frequently investigated in crowdsourcing settings. In view of this, the present essay seeks to contribute to the identification of several gaps and opportunities for future research in order to enhance the personalization of online labor, which has the potential of increasing both worker motivation and the quality of digital work. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Cognition; Crowdsourcing; Online Microtasks Labor; Personalization; Commerce; Employment; Software Engineering; 'current; Cognition; Cognitive Profiles; Labour Market; Microtasks; Online Microtask Labor; Personalizations; State Of Research; Systematic Literature Review; Workers'; Crowdsourcing},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Amalfitano2024,
	author = {Amalfitano, Domenico and Faralli, Stefano and Hauck, Jean C.R. and Matalonga, Santiago and Distante, Damiano},
	title = {Artificial Intelligence Applied to Software Testing: A Tertiary Study},
	year = {2024},
	journal = {ACM Computing Surveys},
	volume = {56},
	number = {3},
	pages = {},
	doi = {10.1145/3616372},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85176768820&doi=10.1145%2F3616372&partnerID=40&md5=36af6da30dffbea2963b6b9f790e2610},
	abstract = {Context: Artificial intelligence (AI) methods and models have extensively been applied to support different phases of the software development lifecycle, including software testing (ST). Several secondary studies investigated the interplay between AI and ST but restricted the scope of the research to specific domains or sub-domains within either area.Objective: This research aims to explore the overall contribution of AI to ST, while identifying the most popular applications and potential paths for future research directions.Method: We executed a tertiary study following well-established guidelines for conducting systematic literature mappings in software engineering and for answering nine research questions.Results: We identified and analyzed 20 relevant secondary studies. The analysis was performed by drawing from well-recognized AI and ST taxonomies and mapping the selected studies according to them. The resulting mapping and discussions provide extensive and detailed information on the interplay between AI and ST.Conclusion: The application of AI to support ST is a well-consolidated and growing interest research topic. The mapping resulting from our study can be used by researchers to identify opportunities for future research, and by practitioners looking for evidence-based information on which AI-supported technology to possibly adopt in their testing processes. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Artificial Intelligence; Software Testing; Systematic Literature Review; Systematic Mapping Study; Taxonomy; Tertiary Study; Artificial Intelligence; Life Cycle; Mapping; Software Design; Software Testing; Artificial Intelligence Methods; Future Research Directions; Research Questions; Research Topics; Software Development Life-cycle; Software Testings; Subdomain; Systematic Literature Review; Systematic Mapping Studies; Tertiary Study; Taxonomies},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Final Open Access; Green Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Pasuksmit2024,
	author = {Pasuksmit, Jirat and Thongtanunam, Patanamon Pick and Karunasekera, Shanika A.},
	title = {A Systematic Literature Review on Reasons and Approaches for Accurate Effort Estimations in Agile},
	year = {2024},
	journal = {ACM Computing Surveys},
	volume = {56},
	number = {11},
	pages = {},
	doi = {10.1145/3663365},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85200422137&doi=10.1145%2F3663365&partnerID=40&md5=660df9bf659523a5329ea3f4b9dc17bb},
	abstract = {Background: Accurate effort estimation is crucial for planning in Agile iterative development. Agile estimation generally relies on consensus-based methods like planning poker, which require less time and information than other formal methods (e.g., COSMIC) but are prone to inaccuracies. Understanding the common reasons for inaccurate estimations and how proposed approaches can assist practitioners is essential. However, prior systematic literature reviews (SLR) only focus on the estimation practices (e.g., References [26, 127]) and the effort estimation approaches (e.g., Reference [6]). Aim: We aim at identifing themes of reasons for inaccurate estimations and classify approaches to improve effort estimation. Method: We conducted an SLR and identified the key themes and a taxonomy. Results: The reasons for inaccurate estimation are related to information quality, team, estimation practice, project management, and business influences. The effort estimation approaches were the most investigated in the literature, while only a few aim to support the effort estimation process. Yet, few automated approaches are at risk of data leakage and indirect validation scenarios. Recommendations: Practitioners should enhance the quality of information for effort estimation, potentially by adopting an automated approach. Future research should aim at improving the information quality, while avoiding data leakage and indirect validation scenarios. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile; Effort Estimation; Software Engineering; Cosmology; Formal Methods; Human Resource Management; Iterative Methods; Risk Perception; Agile; Automated Approach; Data Leakage; Effort Estimation; Estimation Approaches; Information Quality; Iterative Development; Practice Projects; Systematic Literature Review; Validation Scenarios; Project Management},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@CONFERENCE{Akbar2024528,
	author = {Akbar, Muhammad Azeem and Rafi, Saima and Hyrynsalmi, Sami and Khan, Arif Ali},
	title = {Towards People Maturity for Secure Development and Operations: A vision},
	year = {2024},
	pages = {528 - 533},
	doi = {10.1145/3661167.3661238},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85197443957&doi=10.1145%2F3661167.3661238&partnerID=40&md5=62b9e0f82fb716173ecb52c086115d4c},
	abstract = {DevOps (development and operations) is a set of collaborative practices that automate continuous delivery of new software versions with an aim to reduce the development life cycle and produce quality software products. Security is an important attribute of quality software. Software is secure if it does not allow the confidentiality, integrity, and availability of its data, code, or service to be compromised. In order to take full advantage of DevOps, security needs to play an integral part in the development life cycle of a software. The DevSecOps (development, security, and operations) refers to the integrating security practices within the DevOps process. DevSecOps promotes the shifting security to the early stages of a project. Traditionally, security testing is done towards the end of the software lifecycle. However, fixing issues later in the process is more costly than making sure defects do not happen in the beginning. DevSecOps goes beyond automation, continuous integration, testing and delivery processes, since it also encompasses people. In fact, DevSecOps promotes the collaboration between the development, operations, and security teams. When security comes into DevOps routines, people play an even more relevant role involving the collaboration between those teams and security team. In any organization policies, standards, procedures and code of conducts are designed for people to follow. People are executers of policies. The human factor is one of the major forces behind effectiveness, or failure of a security system. Traditionally, the organizations focus on protecting their infrastructure, from security threats and they ignore human behavior that may result in malicious activities during software development process. Human aspect is considered as one of the major reasons of security vulnerability is due to malicious human behavior, who are involved in DevSecOps process; human may make mistakes due to lack of security perceptions, skills, and knowledge. These mistakes would bring a great loss if they are not properly handled. To overcome this challenge, there is a need of a specific maturity model that help to assess and guide the DevSecOps adoption. The key objective of this research project is to develop a people maturity model for DevSecOps (PMM-DevSecOps), that could help the practitioners to assess and manage their security vulnerability caused by human malicious behavior and lack of skills. To address the objective of this research project, we will use the systematic literature review (SLR), multivocal literature review (MLR) and questionnaire survey approach to identify and validate the critical success factors (CSFs), critical challenges (CCHs) and the related best practices of human related vulnerabilities for DevSecOps. Using the identified CSFs, CCHs and their related best practices, we will develop the maturity levels of proposed maturity model (i.e., PMM-DevSecOps), based on the concepts of the existing maturity models in other software engineering domains and the perceptions of the practitioners and academic researchers. Every maturity level will comprise of different CSFs and CCHs that can help in assessing and managing security vulnerability caused by human malicious behavior and lack of skills. We are confident that the proposed model will provide a roadmap for software development organizations to measure their maturity to assess and improve their security vulnerability caused by human malicious behavior and lack of skills while executing DevSecOps process. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Challenges; Devops; Devsecops; Maturity Model; Success Factors; Behavioral Research; Codes (symbols); Computer Software Selection And Evaluation; Integration Testing; Security Systems; Software Design; Verification; Challenge; Critical Challenges; Development And Operations; Development Process; Development, Security, And Operation; Malicious Behavior; Maturity Model; Operation Process; Security Vulnerabilities; Success Factors; Life Cycle},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@CONFERENCE{Alshareef2024652,
	author = {Alshareef, Reem and Alshabeeb, Esra'a and Alakkas, Noor and Niazi, Mahmood K.},
	title = {Challenges in Developing Secure Software within Agile Environments},
	year = {2024},
	pages = {652 - 661},
	doi = {10.1145/3661167.3661284},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85197400208&doi=10.1145%2F3661167.3661284&partnerID=40&md5=914f455c4ada09c4646c5b0d0a4d9953},
	abstract = {Context: Agile methodologies have gained immense popularity in software development organizations for their numerous advantages, like increased flexibility and better customer satisfaction. However, integrating security measures into Agile practices presents significant challenges and complexities. Objectives: The primary goal is to identify and analyze challenges associated with developing secure software in Agile environments. This entails evaluating the validity of these challenges concerning Agile principles and secure software assurance practices. Methodology: A systematic literature review methodology was used to identify these challenges. Fifteen publications were scrutinized to identify potential challenges, resulting in the identification of 26 challenges. Results: The literature review revealed significant challenges in creating secure software within Agile contexts. Five were invalidated among the 26 potential challenges, while the remaining 21 were deemed valid and categorized. The challenges span various aspects of the development process, indicating the multifaceted nature of the issue. Conclusion: Addressing the identified challenges necessitates a dual focus on Agile methodologies and the requisites for secure software development. By acknowledging and confronting these challenges, practitioners can devise effective strategies to enhance the security of Agile software development practices. Furthermore, the findings serve as a foundation for formulating best practices in secure software development within Agile frameworks, thereby facilitating the advancement of secure software engineering methodologies. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile; Secure Software Challenges; Security; Software Development; Software Design; Agile; Agile Environment; Agile Methodologies; Increased Flexibility; Secure Software; Secure Software Challenge; Secure Software Development; Security; Software Challenges; Software Development Organizations; Customer Satisfaction},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Haider2024,
	author = {Haider, Waqas and Ilyas, Muhammad and Khalid, Shah and Ali, Sikandar},
	title = {Factors influencing sustainability aspects in crowdsourced software development: A systematic literature review},
	year = {2024},
	journal = {Journal of Software: Evolution and Process},
	volume = {36},
	number = {6},
	pages = {},
	doi = {10.1002/smr.2630},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85176281715&doi=10.1002%2Fsmr.2630&partnerID=40&md5=d2509ce3d5a3f8db74dc6bc92bdcf0d7},
	abstract = {Crowdsource software development has become more and more popular in recent years in the software industry. Crowdsourcing is an open-call technique for outsourcing tasks to a broad and undefined crowd. Crowdsourcing provides numerous advantages including reduced costs, fast project completion, talent identification, diversity of solutions, top-quality, and access to problem-solving creativity. Despite of the benefits gained from crowdsourcing, there are numerous issues like lack of experienced workers, lack of confidentiality, copyright issues, software sustainability, and so forth. There is also less focus on the long-term sustainability of software development because of new ideas emerging in crowdsourcing software development. Furthermore, in literature, lack of guidelines towards sustainable software crowdsourcing is highlighted as one of the limitations in the software standards. This study aims to identify the factors that influence sustainability aspects in crowdsourced software development. We have conducted a systematic literature review for identification of these factors. In this paper, we present findings of the systematic literature review in the form of a list of 11 factors extracted from a sample of 45 finally selected papers. Among these factors, six of the factors are ranked as critical factors. These critical factors are “Lack of coding standard in documentation,” “Use of popular programming tools,” “Crowd Lack of knowledge and awareness about sustainability,” “Energy-efficient coding,” “Lack of awareness about sustainable software engineering practices,” and “Lack of coordination/communication between client and crowd.”. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Critical Factors; Software Crowdsourcing; Software Sustainability; Systematic Literature Review; Energy Efficiency; Software Design; Sustainable Development; Critical Factors; Diversity Of Solutions; Project Completion; Reduced Cost; Software Crowdsourcing; Software Industry; Software Sustainability; Sustainable Softwares; Systematic Literature Review; Top Qualities; Crowdsourcing},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Barbosa20249139,
	author = {Barbosa, Pedro Luis Saraiva and Carmo, Rafael Augusto Ferreira Do and Gomes, João Paulo Pordeus and Viana De Carvalho, Windson},
	title = {Adaptive learning in computer science education: A scoping review},
	year = {2024},
	journal = {Education and Information Technologies},
	volume = {29},
	number = {8},
	pages = {9139 - 9188},
	doi = {10.1007/s10639-023-12066-z},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85169806977&doi=10.1007%2Fs10639-023-12066-z&partnerID=40&md5=e7d771a2cf24a33578eb6bb09b5d12c6},
	abstract = {Adaptive learning is a teaching approach aiming to personalize the learning experience for each student. In Computer Science Education (CSE), Adaptive Learning Systems (ALS) can provide students with customized lessons, exercises, and assessments based on their previous knowledge, strengths, and weaknesses. Some literature reviews focus on adaptive learning techniques, but none specifically analyze the methods used in adaptive systems in CSE. Our overall objective is to identify the computing techniques that are implemented within ALS to provide adaptive computer education in higher education. We conducted a scoping review (SR) based on the Guidelines for performing Systematic Literature Reviews in Software Engineering, defining six research questions and a search string. We performed searches in four databases, retrieving 512 documents. After applying the selection criteria, we selected 29 works. The results present quantitative and qualitative data from those 29 studies. Most research has used adaptive learning in programming education (12 articles) and databases (9 papers). Nine articles used learning styles as the core of adaptation, with the Felder-Silverman model being used by seven of them. The most commonly used approach was the rule-based system approach built by experts within the proposal, which was used in 17.24% of the articles. Clustering, collaborative filtering, fuzzy logic, and K-NN were used in 10.34% of the proposals. The positive aspect of “delivering adaptive content” was pointed out in seven articles. As for negative aspects, the problem of lack of student engagement was mentioned in four articles. This study discusses the application of dynamic and static models based on learning styles (LS) and the challenges involved in their use. Additionally, another aspect pointed out is that it is crucial to carefully consider pedagogical aspects in learning systems and have mixed development teams. The study also discusses student motivation and the use of gamification elements as a strategy to engage students in electronic learning systems. Finally, the results also indicate that the level of student knowledge is typically represented by a student model (SM), and the growing trend is the use of hybrid SMs. The research identified the most studied areas in ALS in CSE, such as computer programming and databases. The most common techniques used in ALS were rule-based systems built by experts, fuzzy logic, and clustering. The most common feature of ALS identified was learning resources, and the majority of studies focused on investigating the impact of system accuracy. This research can help researchers design better adaptive learning systems and understand challenges that need to be addressed. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Adaptive Learning; Computer Education; Learning Styles; Scoping Review},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Naveed2024,
	author = {Naveed, Hira and Arora, Chetan and Khalajzadeh, Hourieh and Grundy, John C. and Haggag, Omar},
	title = {Model driven engineering for machine learning components: A systematic literature review},
	year = {2024},
	journal = {Information and Software Technology},
	volume = {169},
	pages = {},
	doi = {10.1016/j.infsof.2024.107423},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85185399331&doi=10.1016%2Fj.infsof.2024.107423&partnerID=40&md5=0a9134d6c45f1eb8b34fc2deb07cf4f4},
	abstract = {Context: Machine Learning (ML) has become widely adopted as a component in many modern software applications. Due to the large volumes of data available, organizations want to increasingly leverage their data to extract meaningful insights and enhance business profitability. ML components enable predictive capabilities, anomaly detection, recommendation, accurate image and text processing, and informed decision-making. However, developing systems with ML components is not trivial; it requires time, effort, knowledge, and expertise in ML, data processing, and software engineering. There have been several studies on the use of model-driven engineering (MDE) techniques to address these challenges when developing traditional software and cyber–physical systems. Recently, there has been a growing interest in applying MDE for systems with ML components. Objective: The goal of this study is to further explore the promising intersection of MDE with ML (MDE4ML) through a systematic literature review (SLR). Through this SLR, we wanted to analyze existing studies, including their motivations, MDE solutions, evaluation techniques, key benefits and limitations. Method: Our SLR is conducted following the well-established guidelines by Kitchenham. We started by devising a protocol and systematically searching seven databases, which resulted in 3934 papers. After iterative filtering, we selected 46 highly relevant primary studies for data extraction, synthesis, and reporting. Results: We analyzed selected studies with respect to several areas of interest and identified the following: (1) the key motivations behind using MDE4ML; (2) a variety of MDE solutions applied, such as modeling languages, model transformations, tool support, targeted ML aspects, contributions and more; (3) the evaluation techniques and metrics used; and (4) the limitations and directions for future work. We also discuss the gaps in existing literature and provide recommendations for future research. Conclusion: This SLR highlights current trends, gaps and future research directions in the field of MDE4ML, benefiting both researchers and practitioners. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Artificial Intelligence; Machine Learning; Model Driven Engineering; Software Engineering; Systematic Literature Review; Anomaly Detection; Application Programs; Data Handling; Data Mining; Decision Making; Engineering Research; Iterative Methods; Modeling Languages; Motivation; Statistics; Text Processing; Engineering Solutions; Images Processing; Large Volumes; Machine-learning; Model-driven Engineering; Predictive Capabilities; Software Applications; Systematic Literature Review; Text-processing; Machine Learning},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@CONFERENCE{Baldassarre2024200,
	author = {Baldassarre, Maria Teresa and Gigante, Domenico and Kalinowski, M. and Ragone, Azzurra},
	title = {POLARIS: A framework to guide the development of trustworthy ai systems},
	year = {2024},
	pages = {200 - 210},
	doi = {10.1145/3644815.3644947},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85196491950&doi=10.1145%2F3644815.3644947&partnerID=40&md5=76b72f166476447665a3b6f22bcabbf2},
	abstract = {In the ever-expanding landscape of Artificial Intelligence (AI), where innovation thrives and new products and services are continuously being delivered, ensuring that AI systems are designed and developed responsibly throughout their entire lifecycle is crucial. To this end, several AI ethics principles and guidelines have been issued to which AI systems should conform. Nevertheless, relying solely on high-level AI ethics principles is far from sufficient to ensure the responsible engineering of AI systems. In this field, AI professionals often navigate by sight. Indeed, while recommendations promoting Trustworthy AI (TAI) exist, they are often high-level statements difficult to translate into concrete implementation strategies. Currently, there is a significant gap between high-level AI ethics principles and low-level concrete practices for AI professionals. To address this challenge, our work presents an experience report where we develop a novel holistic framework for Trustworthy AI- designed to bridge the gap between theory and practice- and report insights from its application in an industrial case study. The framework builds up from the results of a systematic review of the state of the practice as well as a survey and think-aloud interviews with 34 AI practitioners. The framework, unlike most of the ones in literature, is designed to provide actionable guidelines and tools to support different types of stakeholders throughout the entire Software Development Life Cycle (SDLC). Our goal is to empower AI professionals to confidently navigate the ethical dimensions of TAI through practical insights, ensuring that the vast potential of AI is exploited responsibly for the benefit of society as a whole. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Artificial Intelligence; Framework; Knowledge Base; Software Engineering; Trustworthy Ai; Bridges; Concretes; Knowledge Based Systems; Navigation; Philosophical Aspects; Software Design; Ai Systems; Artificial Intelligence Systems; Entire Life Cycles; Experience Report; Framework; Holistic Frameworks; Implementation Strategies; Knowledge Base; Product And Services; Trustworthy Artificial Intelligence; Life Cycle},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Pontillo2024,
	author = {Pontillo, Valeria and Palomba, Fabio and Ferrucci, Filomena},
	title = {Test Code Flakiness in Mobile Apps: The Developer's Perspective},
	year = {2024},
	journal = {Information and Software Technology},
	volume = {168},
	pages = {},
	doi = {10.1016/j.infsof.2023.107394},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85183706420&doi=10.1016%2Fj.infsof.2023.107394&partnerID=40&md5=0e8225bde5f07efa8759c7a137d6b932},
	abstract = {Context: Test flakiness arises when test cases have a non-deterministic, intermittent behavior that leads them to either pass or fail when run against the same code. While researchers have been contributing to the detection, classification, and removal of flaky tests with several empirical studies and automated techniques, little is known about how the problem of test flakiness arises in mobile applications. Objective: We point out a lack of knowledge on: (1) The prominence and harmfulness of the problem; (2) The most frequent root causes inducing flakiness; and (3) The strategies applied by practitioners to deal with it in practice. An improved understanding of these matters may lead the software engineering research community to assess the need for tailoring existing instruments to the mobile context or for brand-new approaches that focus on the peculiarities identified. Methods: We address this gap of knowledge by means of an empirical study into the mobile developer's perception of test flakiness. We first perform a systematic grey literature review to elicit how developers discuss and deal with the problem of test flakiness in the wild. Then, we complement the systematic review through a survey study that involves 130 mobile developers and that aims at analyzing their experience on the matter. Results: The results of the grey literature review indicate that developers are often concerned with flakiness connected to user interface elements. In addition, our survey study reveals that flaky tests are perceived as critical by mobile developers, who pointed out major production code- and source code design-related root causes of flakiness, other than the long-term effects of recurrent flaky tests. Furthermore, our study lets the diagnosing and fixing processes currently adopted by developers and their limitations emerge. Conclusion: We conclude by distilling lessons learned, implications, and future research directions. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Mixed-method Research; Mobile Apps Development; Software Testing; Test Code Flakiness; Codes (symbols); User Interfaces; Empirical Studies; Grey Literature; Literature Reviews; Mixed-methods Research; Mobile App; Mobile App Development; Root Cause; Software Testings; Test Code; Test Code Flakiness; Software Testing},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Rico2024,
	author = {Rico, Sergio and Ali, Nauman Bin and Engström, Emelie and Höst, Martin},
	title = {Experiences from conducting rapid reviews in collaboration with practitioners — Two industrial cases},
	year = {2024},
	journal = {Information and Software Technology},
	volume = {167},
	pages = {},
	doi = {10.1016/j.infsof.2023.107364},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85178453626&doi=10.1016%2Fj.infsof.2023.107364&partnerID=40&md5=b5f056886c79b0e4038d31bb1101780d},
	abstract = {Context: Evidence-based software engineering (EBSE) aims to improve research utilization in practice. It relies on systematic methods to identify, appraise, and synthesize existing research findings to answer questions of interest for practice. However, the lack of practitioners’ involvement in these studies’ design, execution, and reporting indicates a lack of appreciation for the need for knowledge exchange between researchers and practitioners. The resultant systematic literature studies often lack relevance for practice. Objective: This paper explores the use of Rapid Reviews (RRs), in fostering knowledge exchange between academia and industry. Through the lens of two case studies, we delve into the practical application and experience of conducting RRs. Methods: We analyzed the conduct of two rapid reviews by two different groups of researchers and practitioners. We collected data through interviews, and the documents produced during the review (like review protocols, search results, and presentations). The interviews were analyzed using thematic analysis. Results: We report how the two groups of researchers and practitioners performed the rapid reviews. We observed some benefits, like promoting dialogue and paving the way for future collaborations. We also found that practitioners entrusted the researchers to develop and follow a rigorous approach and were more interested in the applicability of the findings in their context. The problems investigated in these two cases were relevant but not the most immediate ones. Therefore, rapidness was not a priority for the practitioners. Conclusion: The study illustrates that rapid reviews can support researcher-practitioner communication and industry-academia collaboration. Furthermore, the recommendations based on the experiences from the two cases complement the detailed guidelines researchers and practitioners may follow to increase interaction and knowledge exchange. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Industry-academia Collaboration; Literature Reviews; Rapid Reviews; Research Relevance; Systematic Review; Industrial Research; Software Engineering; Evidence Based Software Engineering; Industry-academia Collaboration; Knowledge Exchange; Literature Reviews; Literature Studies; Rapid Review; Research Relevance; Study Design; Systematic Method; Systematic Review; Knowledge Management},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Final Open Access; Green Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Guinea-Cabrera2024,
	author = {Guinea-Cabrera, Miguel A. and Holgado-Terriza, Juan A.},
	title = {Digital Twins in Software Engineering—A Systematic Literature Review and Vision},
	year = {2024},
	journal = {Applied Sciences (Switzerland)},
	volume = {14},
	number = {3},
	pages = {},
	doi = {10.3390/app14030977},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85196390166&doi=10.3390%2Fapp14030977&partnerID=40&md5=5eb84543f477f4596d8e60886c4e2f47},
	abstract = {Featured Application: Secure Integration of the IoT and Digital Twins. Digital twins are a powerful consequence of digital transformation. In fact, they have been applied to many industries to enhance operations, predict needs, improve decision making, or optimize performance, even though the definition of digital twins is still evolving. However, their impact on the software industry is still limited. Thus, this work aims to analyze the current adoption of digital twins in the software industry as a potential path to integrate them into application lifecycle management. To achieve this objective, first, the significant characteristics of current digital twins are analyzed in their application to manufacturing to understand how the knowledge and the lessons learned can be transferred to the software industry. Second, a systematic literature review was conducted on Scopus, the Web of Science, and the ScienceDirect database. The literature review revealed 93 documents after data screening and cleaning 251 initial documents. Our main findings are that digital twins are already influencing and will significantly affect the software industry, revolutionizing various aspects of the software development lifecycle. This study tackles what identifies a digital twin in the software industry, the specific domains and areas where they can be applied in the software lifecycle, and the proposed approaches explored to build digital twins for developing, deploying, and maintaining software systems. Finally, this study proposes some guidelines for building digital twins in the context of application lifecycle management. Determining an appropriate roadmap shortly is essential to achieve a widespread applicability to building suitable digital twins and preparing organizations for the software industry. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Digital Transformation; Digital Twin; Software Development; Software Engineering; Software Industry},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Peral-García2024,
	author = {Peral-García, David and Cruz-Benito, Juan and García-Peñalvo, Francisco José},
	title = {Systematic literature review: Quantum machine learning and its applications},
	year = {2024},
	journal = {Computer Science Review},
	volume = {51},
	pages = {},
	doi = {10.1016/j.cosrev.2024.100619},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85185153001&doi=10.1016%2Fj.cosrev.2024.100619&partnerID=40&md5=a6a8d31363664c2ee8ca001e3044fc40},
	abstract = {Quantum physics has changed the way we understand our environment, and one of its branches, quantum mechanics, has demonstrated accurate and consistent theoretical results. Quantum computing is the process of performing calculations using quantum mechanics. This field studies the quantum behavior of certain subatomic particles (photons, electrons, etc.) for subsequent use in performing calculations, as well as for large-scale information processing. These advantages are achieved through the use of quantum features, such as entanglement or superposition. These capabilities can give quantum computers an advantage in terms of computational time and cost over classical computers. Nowadays, scientific challenges are impossible to perform by classical computation due to computational complexity (more bytes than atoms in the observable universe) or the time it would take (thousands of years), and quantum computation is the only known answer. However, current quantum devices do not have yet the necessary qubits and are not fault-tolerant enough to achieve these goals. Nonetheless, there are other fields like machine learning, finance, or chemistry where quantum computation could be useful with current quantum devices. This manuscript aims to present a review of the literature published between 2017 and 2023 to identify, analyze, and classify the different types of algorithms used in quantum machine learning and their applications. The methodology follows the guidelines related to Systematic Literature Review methods, such as the one proposed by Kitchenham and other authors in the software engineering field. Consequently, this study identified 94 articles that used quantum machine learning techniques and algorithms and shows their implementation using computational quantum circuits or ansatzs. The main types of found algorithms are quantum implementations of classical machine learning algorithms, such as support vector machines or the k-nearest neighbor model, and classical deep learning algorithms, like quantum neural networks. One of the most relevant applications in the machine learning field is image classification. Many articles, especially within the classification, try to solve problems currently answered by classical machine learning but using quantum devices and algorithms. Even though results are promising, quantum machine learning is far from achieving its full potential. An improvement in quantum hardware is required for this potential to be achieved since the existing quantum computers lack enough quality, speed, and scale to allow quantum computing to achieve its full potential. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Quantum Computing; Quantum Machine Learning; Systematic Literature Review; Deep Learning; Learning Algorithms; Nearest Neighbor Search; Quantum Entanglement; Quantum Optics; Qubits; Software Engineering; Support Vector Machines; 'current; Machine Learning Algorithms; Machine Learning Applications; Machine-learning; Quanta Computers; Quantum Computing; Quantum Device; Quantum Machine Learning; Quantum Machines; Systematic Literature Review; Learning Systems},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Final Open Access; Green Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Taipalus2024,
	author = {Taipalus, Toni},
	title = {Database management system performance comparisons: A systematic literature review},
	year = {2024},
	journal = {Journal of Systems and Software},
	volume = {208},
	pages = {},
	doi = {10.1016/j.jss.2023.111872},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85177177518&doi=10.1016%2Fj.jss.2023.111872&partnerID=40&md5=046d6513e98beb30ce0a38f663a1baec},
	abstract = {Efficiency has been a pivotal aspect of the software industry since its inception, as a system that serves the end-user fast, and the service provider cost-efficiently benefits all parties. A database management system (DBMS) is an integral part of effectively all software systems, and therefore it is logical that different studies have compared the performance of different DBMSs in hopes of finding the most efficient one. This study systematically synthesizes the results and approaches of studies that compare DBMS performance and provides recommendations for industry and research. The results show that performance is usually tested in a way that does not reflect real-world use cases, and that tests are typically reported in insufficient detail for replication or for drawing conclusions from the stated results. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Comparison; Database; Database Management System; Newsql; Nosql; Performance; Relational Database; Comparison; End-users; Newsql; Nosql; Performance; Performance Comparison; Relational Database; Software Industry; Systematic Literature Review; Systems Performance; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Chakraborty2024249,
	author = {Chakraborty, Shalini and Liebel, Grischa},
	title = {Modelling guidance in software engineering: a systematic literature review},
	year = {2024},
	journal = {Software and Systems Modeling},
	volume = {23},
	number = {1},
	pages = {249 - 265},
	doi = {10.1007/s10270-023-01117-1},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85164973624&doi=10.1007%2Fs10270-023-01117-1&partnerID=40&md5=8eb51a6201c7c40c48df7f77a50b543b},
	abstract = {Despite potential benefits in Software Engineering, adoption of software modelling in industry is low. Technical issues such as tool support have gained significant research before, but individual guidance and training have received little attention. As a first step towards providing the necessary guidance in modelling, we conduct a systematic literature review to explore the current state of the art. We searched academic literature for guidance on model creation and selected 35 papers for full-text screening through three rounds of selection. We find research on model creation guidance to be fragmented, with inconsistent usage of terminology, and a lack of empirical validation or supporting evidence. We outline the different dimensions commonly used to provide guidance on software and system model creation. Additionally, we provide definitions of the three terms modelling method, style, and guideline as current literature lacks a well-defined distinction between them. These definitions can help distinguishing between important concepts and provide precise modelling guidance. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Modelling Guidance; Modelling Method; Modelling Styles; Modelling Training; Systematic Literature Review; 'current; Model Creation; Model Method; Model Training; Modeling Guidance; Modeling Style; Potential Benefits; Software Modeling; Systematic Literature Review; Tool Support; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Tiwari2024,
	author = {Tiwari, Divyanshu and Gautam, Ashu and Kumar, Sourabh and Fatima, Neda},
	title = {Sustainable Software Engineering: Integrating Environmental Considerations in Software Development},
	year = {2024},
	pages = {},
	doi = {10.1109/DELCON64804.2024.10866255},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85219264844&doi=10.1109%2FDELCON64804.2024.10866255&partnerID=40&md5=81624f922ebd6ec48a4e693a580a8ec0},
	abstract = {As the software industry flourishes, it plays an active role in contributing a big share of energy consumed by the world and emitted into the atmosphere, where it is often left to one side in software engineering processes. This research provides methods for incorporating environmental factors through the software development life cycle (SDLC) to make software engineering practice more sustainable. A systematic literature review, case studies of the leading industries, and experimental tests on energy-efficient coding practices. Our findings highlight that the energy usage associated with software products could be reduced by up to 30% without loss of functionality through optimization of algorithms, utilization of resources, and dynamic scaling. Main challenges include the fact that there is no unified scale of metrics and, importantly, the awareness levels about this issue are also really low among developers. This research lays the foundations of green computing by making practical recommendations and guidelines about the design of environmentally friendly software. Our results speak of the strategic importance that sustainability holds in software development and call for further industry take-up and empirical research. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Development Cycle; Green Computing; Software Engineering; Sustainability; Sustainable Development Goals; Development Cycle; Energy; Environmental Considerations; Environmental Factors; Software Development Life-cycle; Software Engineering Practices; Software Engineering Process; Software Industry; Sustainable Softwares; Systematic Literature Review; Green Development},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Hegazy202488,
	author = {Hegazy, Shady and Elsner, Christoph and Bosch, Jan and Olsson, Helena Holmström},
	title = {Experimentation in Software Ecosystems: a Systematic Literature Review},
	year = {2024},
	journal = {Proceedings of the Euromicro Conference on Software Engineering and Advanced Applications, EUROMICRO-SEAA},
	number = {2024},
	pages = {88 - 96},
	doi = {10.1109/SEAA64295.2024.00022},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85218635105&doi=10.1109%2FSEAA64295.2024.00022&partnerID=40&md5=4c97eebe0e047187587f9134ec8e2d1a},
	abstract = {Context: Software ecosystems have transformed many industries, redefining collaboration and value co-creation. The success of such ecosystems depends on the dynamism of the network of users on its different sides. Consequently, decision-making in such multifaceted and interconnected environments is more complex than in conventional software products. On-line controlled experiments are considered the gold standard for aiding decision-making in software engineering processes. Experiments are extensively used to reduce bias and estimation noise for design, engineering, and business decisions. However, experimentation in software ecosystems is inherently more com-plex as it deals with atypical sources of bias and technical complications. Primary studies of experimentation approaches in software ecosystems are scattered across multiple domains and disciplines, and secondary research on the topic is scarce as highlighted in different tertiary studies. Hence, we conducted this study. Objectives: To explore primary research on experimentation in software ecosystems; Summarize current approaches, toolboxes, and solutions that practitioners and researchers, facing similar problems, can use to inform their approaches; To outline underexplored research areas and provide recommendations for practitioners. Method: We conducted a systematic literature review. The search strategy, application of exclusion and inclusion criteria, and subsequent quality assessment resulted in 63 relevant studies. Data extraction process was designed and carried out to collect data relevant to the study objectives. The extracted data under-went descriptive and thematic syntheses and analyses, in addition to cross-analysis on relevant axes. Contributions: The study resulted in four contributions. First, a distillation of the themes and patterns in the available research on the topic. Second, a practical summary of the experimental designs specific to each software ecosystem type. Third, an actionable road map for practitioners in order to achieve exper-imentation maturity in software ecosystems. Fourth, an outline of the underexplored research areas. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {A/b Testing; Causal Inference; Experimentation; Software Ecosystems; Abiotic; Enterprise Software; A/b Testing; Causal Inferences; Controlled Experiment; Decisions Makings; Experimentation; Research Areas; Software Ecosystems; Software Products; Systematic Literature Review; Value Co Creations; Software Testing},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Ramirez2024331,
	author = {Ramirez, Leonardo Criollo and Limón, Xavier and Sánchez-García, Ángel J. and Pérez-Arriaga, Juan Carlos},
	title = {State of the Art of the Security of Code Generated by LLMs: A Systematic Literature Review},
	year = {2024},
	pages = {331 - 339},
	doi = {10.1109/CONISOFT63288.2024.00050},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85216806764&doi=10.1109%2FCONISOFT63288.2024.00050&partnerID=40&md5=478b2dad6bb50e1b31ca3fd74724cb8d},
	abstract = {AI -assisted programming has experienced a surge in popularity over the past few years, largely thanks to advancements in Large Language Model technologies. This has led to the emergence of tools like ChatGPT and GitHub Copilot. However, the use of AI models for code generation comes with a downside: the resulting code is susceptible to vulnerabilities, thus posing new challenges in the field of secure software development. In this study, we analyze the current state of research regarding the security of LLM generated code from the Software Engineering perspective. We conducted a Systematic Literature Review following the guidelines from Kitchenham et al. The search process included five sources: IEEE Xplore, ACM, Science Direct, Springer Link and Wiley Online Library. We also included an iteration of backward and forward snowballing. We obtained 3104 peer-reviewed studies though Quasi-Gold aided automated search and selected the most relevant ones through 5 stages. The final selection includes 15 primary studies from which we extracted and synthesized data. We identified seven different kinds of security vulnerability present in LLM generated code, six different mitigation strategies and practices, and four tools recommended by authors to use in conjunction with LLM code generation. Security related issues within LLM generated code have only just begun to be explored, initial research has already emphasized the significance of considering the inclusion of AI-powered code generation in software projects, as it carries the risk of introducing vulnerabilities at a higher rate than human-generated code. The vulnerabilities, practices and tools identified in this study, can potentially help developers to use LLM programming assistants more responsibly, making informed decisions when leveraging LLM technology. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Code Recommenders; Llm; Secure Software Development; Systematic Literature Review; Chatbots; Computer Aided Software Engineering; Computer Software Selection And Evaluation; Problem Oriented Languages; Search Engines; 'current; Code Recommender; Codegeneration; Language Model; Llm; Modeling Technology; Secure Software Development; State Of Research; State Of The Art; Systematic Literature Review; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Bello-Trejo2024127,
	author = {Bello-Trejo, Sebastian and Limón, Xavier and Ocharán-Hernández, Jorge Octavio and Hernández-González, Lizbeth Alejandra},
	title = {System-Oriented Testing on the Microservices Architecture: A Systematic Literature Review},
	year = {2024},
	pages = {127 - 136},
	doi = {10.1109/CONISOFT63288.2024.00026},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85216761869&doi=10.1109%2FCONISOFT63288.2024.00026&partnerID=40&md5=2a0f971784e179704b01e93de52074e0},
	abstract = {The Microservice Architecture (MSA) is gaining popularity in the industry and literature as a raising research topic. This architectural style brings advantages such as independent development, testing, and deployment. However, it is also plagued with many challenges due to its distributed nature. In the case of testing, complex dependencies, heterogeneous execution environments, and independent development teams make it difficult to test microservices using traditional methods and techniques. Our goal is to provide a collection of tests, tools, state-of-the-art solution proposals, as well as relevant challenges. To achieve this, we conducted a Systematic Literature Review following the guidelines presented by Kitchenham. We searched through search engines including IEEE Xplore, ACM Digital Library, ScienceDirect, SpringerLink, and Wiley Online Library. In total, we retrieved 13,556 articles and thoroughly analyzed them. Through this process, we identified 44 primary studies that were suitable for data extraction and synthesis. From our analysis, we identified 12 testing strategies that are applicable to the MSA. Additionally, we found proposed solutions for automated testing along with microservices benchmarks. Furthermore, we discovered a set of testing tools and challenges specifically related to MSA-based system testing. The main challenges we encountered include automated testing, performance testing, and finding realistic MSA-based systems. Our study aims to benefit software engineering practitioners and researchers interested in microservices testing by providing a comprehensive understanding of the current landscape of testing for MSA-based systems. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Automatic Testing; Benchmarking; Service Oriented Architecture (soa); Software Architecture; Software Testing; Architectural Style; Architecture-based; Automated Testing; Development Teams; Development Testing; Execution Environments; Method And Technique; Research Topics; Systematic Literature Review; Test Tools; Search Engines},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Hernandez-Marcial2024218,
	author = {Hernandez-Marcial, Bryan Josue and Limón, Xavier and Sánchez-García, Ángel J. and Pérez-Arriaga, Juan Carlos},
	title = {Secure Cryptography Usage in Software Development: A Systematic Literature Review},
	year = {2024},
	pages = {218 - 227},
	doi = {10.1109/CONISOFT63288.2024.00036},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85216725381&doi=10.1109%2FCONISOFT63288.2024.00036&partnerID=40&md5=7ba7b89ef9aa5c2714a1a1f93e028b8a},
	abstract = {Cryptography plays a significant role in software engineering, its application is paramount for the security of software systems. However, comprehending and securely utilizing cryptography in software development is complicated and prone to error. To mitigate these challenges, it is crucial to know best practices and utilize appropriate tools to aid in the implementation of secure and accurate cryptography in software projects. Unfortunately, this insightful guidance is frequently fragmented to developers and software engineering students seeking to integrate these principles into their projects. With this problem in mind, we conducted a Systematic Literature Review, yielding 52 primary studies. The review uncovered a range of essential tools, including cryptographic APIs, Integrated Development Environments, and static anal-ysis tools, designed to identify vulnerabilities in the initial phases of software development. Furthermore, we emphasized the importance of implementing effective strategies, such as regularly updating libraries and selecting appropriate cryp-tographic algorithms. On the contrary, we also underscored detrimental practices, such as utilizing outdated functions and depending on unreliable sources like online forums. Many studies mention that tools are being developed and tested for elementary or high school students to start learning basic cybersecurity topics, including cryptography. There is also a trend for developers to use these tools to mitigate vulnerabilities in software developments, highlighting the importance of this topic. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Cryptography; Secure Development; Security; Software Engineering; Application Programs; Software Design; Best Practices; Cryptographics; Integrated Development Environment; Its Applications; Secure Development; Security; Software Engineering Students; Software Project; Software-systems; Systematic Literature Review},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Lilholt2024234,
	author = {Lilholt, Addison and Heverin, Thomas},
	title = {Mapping Software-Engineering Industry AI Use to Software-Engineering Curriculum: Developing the AI-USE Framework},
	year = {2024},
	pages = {234 - 242},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85215657483&partnerID=40&md5=e28e0917d4449d472dc8a3fcc6acd658},
	abstract = {Estimates predict a global deficit of 4 million software engineers by 2025, further complicated by the software engineering (SE) industry's escalating use of artificial intelligence (AI). To tackle this issue, our research suggests that computer science (CS) curricula in middle and high schools need to be updated to incorporate SE industry segments that significantly employ AI. This strategic curriculum alignment is significant for preparing a workforce equipped to meet future industry demands. Our initial analysis involved reviewing nine international AI education guidelines to evaluate current methods for integrating AI into SE education. The findings indicated a pronounced lack of specific guidance connecting AI applications in the SE industry with educational content. To address this, we performed a systematic literature review of 12 research papers focusing on AI's role across the SE industry, followed by multiple rounds of inductive content analysis. An industry segment was deemed "essential" if it was referenced in 75% or more of the papers' findings. Through this method, we identified 10 essential SE industry segments for inclusion in CS education: software development, software maintenance, process improvement, software economics, knowledge management, project management, software testing, software security, quality assurance, and deployment and operations (DevOps). These findings led to the creation of the AI-USE (Artificial Intelligence Usage in Software Engineering) framework, which maps these 10 key segments to the predominant uses of SE in the industry as identified in the literature. Further inductive content analysis helped us develop subsegments for these essential areas. Ongoing framework development involves refining these subsegments and gathering feedback from industry and academic professionals. We anticipate that the fully developed AI-USE framework will significantly enhance SE education, equipping the next generation of software engineers with the AI proficiency required to address the industry’s evolving demands. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Artificial Intelligence In Education; Computer Science Education; Generative Ai; Se Education; Software Engineering; Application Programs; Computer Software Maintenance; Computer Software Selection And Evaluation; Curricula; Engineering Education; Integration Testing; Software Design; Software Quality; Teaching; Artificial Intelligence In Education; Computer Science Education; Content Analysis; Curriculum Developing; Engineering Industries; Generative Artificial Intelligence; Mapping Softwares; Software Engineering Curricula; Software Engineering Education; Subsegments; Project Management},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{McKenzie2024100,
	author = {McKenzie, Sophie and Fernando, Niroshinie and Dias, Maluge Pubuduni Imali and Cheng, Ben and Hoang, Thuong N. and Liu, Xiao},
	title = {Integrating Human-Centric Approaches into Undergraduate Software Engineering Education: A Scoping Review and Curriculum Analysis in the Australian Context},
	year = {2024},
	pages = {100 - 107},
	doi = {10.1145/3691621.3694940},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85213317824&doi=10.1145%2F3691621.3694940&partnerID=40&md5=537b552382161ff00b1322f8a813e2a7},
	abstract = {Human-Centric Software Engineering (HCSE) refers to the software engineering (SE) processes that put human needs and requirements as core practice throughout the software development life cycle. A large majority of software projects fail to cater to human needs and consequently run into budget, delivery, and usability issues. To support human-centric software engineering practices, it is important for universities to train their students on how to consider human needs. But what topics from HCSE should be provided in the undergraduate curriculum? This is still an open question. Curriculum guidelines for software engineering are available, however do not represent update to date considerations for how human-factors are included. In addition, curriculum approaches are not explored. To address this issue, this paper presents a scoping review to identify the topics and curriculum approaches suitable for teaching HCSE to undergraduate software engineering students. The scoping review was conducted according to the protocol by PRISMA-ScR (Preferred Reporting Items for Systematic reviews and Meta-Analyses extension for Scoping Reviews). Through PRISMA-ScR, a total of 36 conference or journal papers were identified as viable for analysis, with 5 common themes found that describe topics and curriculum approaches relevant for teaching software engineering. Using the outcomes of the scoping review, this paper also analyses the Australian Software Engineering curriculum to understand the extent at which human centred software engineering topics are scaffolded into course structures. This paper concludes by suggesting topic scaffolding for the undergraduate curriculum that aligns with the software engineering process. Overall, by providing a focus on HCSE topics and curriculum approaches, the education and awareness of HCSE among current and future software engineers can increase, leading to long-term impact on the success of software projects for all stakeholders. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Curriculum; Higher Education; Software Engineering; Teaching And Learning; Computer Aided Software Engineering; Computer Software Selection And Evaluation; Curricula; Engineering Education; Human Engineering; Life Cycle; Requirements Engineering; Scaffolds; Scaffolds (biology); Software Design; Students; Teaching; High Educations; Human Needs; Human-centric Software Engineerings; Scoping Review; Software Engineering Process; Software Project; Systematic Review; Teaching And Learning; Undergraduate Curricula; Undergraduate Software Engineering; Budget Control},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Rodríguez-Gallego2024,
	author = {Rodríguez-Gallego, Margarita R. and Ordónez-Sierra, Rosario and Domene-Martos, Soledad and De-Cecilia-Rodríguez, Cristina},
	title = {Company-university intersections through service-learning (SL): a systematic review},
	year = {2024},
	journal = {Frontiers in Education},
	volume = {9},
	pages = {},
	doi = {10.3389/feduc.2024.1501899},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85212292620&doi=10.3389%2Ffeduc.2024.1501899&partnerID=40&md5=155e02c11fe36221496d2277485fa81b},
	abstract = {The most relevant intersections in society include the relationship between universities and companies for a projection toward the sustainable employability of future graduates. Among the possible intersections, Service-learning (SL) is an educational proposition that may help university students to develop their personal skills, offering them opportunities to learn and practice civic commitment, improving their sense of social and citizen responsibility, and combining academic and community-service learning in a constructed programme where participants train by working on real needs of the environment to optimize and transform the latter. The development of SL programmes in university departments related to technical areas is posing a challenge to faculty members and students, thus it is important to explore this lack of programmes. The main aim of the present study was to identify SL projects and their topics through a systematic review, following the guidelines of the «Preferred Reporting Items for Systematic Reviews and Meta-Analyses» (PRISMA) declaration in the knowledge areas of Architecture, Computer Science, Environmental Engineering, Software Engineering, Computer Engineering, Artificial Intelligence, and Computer Languages and Systems, from the year 2008 to the year 2023. This review includes 128 articles, which were analyzed with ATLAS. Ti 22. The categorical system employed in this work emerged from the topics of the programmes identified in the selected articles, which were verified by experts in the mentioned fields of knowledge. The agreed categories were: accessibility, learning, social groups, courses, devices, infrastructure, games, environment, landscaping, heritage, software and web. The most relevant conclusions highlight that most of the articles refer to theoretical aspects of SL, showing a lack of data on the practical development of SL programmes and their impact on employability. The largest number of SL programmes are developed in the areas of Architecture, Computer Science and Software Engineering. Regarding the topics that are addressed in research, most of the articles refer to social groups, software, learning and accessibility. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Architecture; Employability; Engineering; Higher Education; Service-learning},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Durrani2024171185,
	author = {Durrani, Usman K. and Akpinar, Mustafa and Adak, M. Fatih and Talha Kabakus, Abdullah and Maruf Ozturk, Muhammed and Saleh, Mohammed},
	title = {A Decade of Progress: A Systematic Literature Review on the Integration of AI in Software Engineering Phases and Activities (2013-2023)},
	year = {2024},
	journal = {IEEE Access},
	volume = {12},
	pages = {171185 - 171204},
	doi = {10.1109/ACCESS.2024.3488904},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85208384243&doi=10.1109%2FACCESS.2024.3488904&partnerID=40&md5=0947a7da34c985383b0059ddf97e48cb},
	abstract = {The synergy between software engineering (SE) and artificial intelligence (AI) catalyzes software development, as numerous recent studies illustrate an intensified intersection between these domains. This systematic literature review examines the integration of AI techniques or methodologies across SE phases and related activities spanning from 2013 to 2023, resulting in the selection of 110 research papers. Investigating the profound influence of AI techniques, including machine learning, deep learning, natural language processing, optimization algorithms, and expert systems, across various SE phases - such as planning, requirement engineering, design, development, testing, deployment, and maintenance - is the focal point of this study. Notably, the extensive adoption of machine learning and deep learning algorithms in the development and testing phases has enhanced software quality through defect prediction, code recommendation, and vulnerability detection initiatives. Furthermore, natural language processing's role in automating requirements classification and sentiment analysis has streamlined SE practices. Optimization algorithms have also demonstrated efficacy in refining SE activities such as feature location and software repair action predictions, augmenting precision and efficiency in maintenance endeavors. Prospective research emphasizes the imperative of interpretable AI models and the exploration of novel AI paradigms, including explainable AI and reinforcement learning, to promote ethical and efficient software development practices. This paper fills the gap identified in AI techniques dedicated to improving SE phases. The review concludes that AI in SE is revolutionizing the discipline, enhancing software quality, efficiency, and innovation, with ongoing efforts targeting the mitigation of identified limitations and the augmentation of AI capabilities for intelligent and dependable SE. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Ai; Artificial Intelligence; Deep Learning; Expert Systems; Integration; Machine Learning; Natural Language Processing; Optimization Algorithms; Planning; Requirement Engineering; Software Deployment; Software Development; Software Engineering; Software Maintenance; Software Testing; Systematic Literature Review; Computer Software Maintenance; Computer Software Selection And Evaluation; Integration Testing; Reinforcement Learning; Repair; Requirements Engineering; Software Design; Software Quality; Deep Learning; Language Processing; Machine-learning; Natural Language Processing; Natural Languages; Optimization Algorithms; Requirement Engineering; Software Deployment; Software Testings; Systematic Literature Review; Deep Reinforcement Learning},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{de Jesus Bordalo2024177,
	author = {de Jesus Bordalo, Roberta Cláudia and Fernandes, Hugo Do Val F. and da Silva, Mônica Ferreira},
	title = {Conducting a Multivocal Systematic Literature Review About Compliance with the Brazilian Law for General Data Protection},
	year = {2024},
	pages = {177 - 186},
	doi = {10.1007/978-3-031-48941-9_14},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85205607569&doi=10.1007%2F978-3-031-48941-9_14&partnerID=40&md5=401dc03ab74a18f06377f10a9f59f484},
	abstract = {A Multivocal Systematic Literature Review (MSLR) is a form of Systematic Literature Review (SLR) that includes gray literature in addition to formal literature. In this chapter, the objective was to instantiate the MSLR to research information security and the Brazilian General Data Protection Law (called LGPD) in the public health area, based on the steps proposed by Kitchenham and Charters (Guidelines for performing Systematic Literature Reviews in Software Engineering, 2007) for an SLR and in the steps for inclusion of gray literature proposed by Garousi et al. (Guidelines for including grey literature and conducting multivocal literature reviews in software engineering. Inf. Softw. Technol. 106: 101–121). Thus, it was possible to identify formal works that have studied the level of compliance and the challenges to adapt to the LGPD in the Brazilian public health sector, as well as gray literature publications that help the reader to know the current scenario of public health from the perspective of the LGPD, from the beginning of its processing (May 2016) to the start of sanctions (August 2021). The MSLR adds value by listing the main publications on the subject studied and exposing the state of the art and practice, both in the academic and informal spheres. The MSLR proved to be a valuable tool in understanding a topic that permeates academic interest in an expressive way, since the method is suitable for recent topics that have not yet been formally explored in the academy. © 2024 Elsevier B.V., All rights reserved.},
	type = {Book chapter},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{AlZahrani2024155,
	author = {AlZahrani, Abdullah A.},
	title = {Software Systems Documentation: A Systematic Review},
	year = {2024},
	journal = {International Journal of Advanced Computer Science and Applications},
	volume = {15},
	number = {8},
	pages = {155 - 162},
	doi = {10.14569/IJACSA.2024.0150816},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85202718110&doi=10.14569%2FIJACSA.2024.0150816&partnerID=40&md5=6974bc7ceb2df489ec68030a418551c3},
	abstract = {In the domain of software engineering, software documentation encompasses the methodical creation and management of artifacts describing software systems. Traditionally linked to software maintenance, its significance extends throughout the entire software development lifecycle. While often regarded as a quintessential indicator of software quality, the perception of documentation as a time-consuming and arduous task frequently leads to its neglect or obsolescence. This research presents a systematic review of the past decade’s literature on software documentation to identify trends and challenges. Employing a rigorous systematic methodology, the study yielded 29 primary studies and a collection of related works. Analysis of these studies revealed two primary themes: issues and best practices, and models and tools. Findings indicate a notable research gap in the area of software documentation. Furthermore, the study underscores several critical challenges, including a dearth of automated tools, immature documentation models, and an insufficient emphasis on forward-looking documentation. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Software Development; Software Engineering; Software Maintenance; Software Quality; Software Systems Documentation; System Program Documentation; Best Model; Engineering Software; Related Works; Software Development Life-cycle; Software Documentation; Software Quality; Software System Documentation; Software-systems; Systematic Methodology; Systematic Review; Software Quality},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@CONFERENCE{Baldassarre2024528,
	author = {Baldassarre, Maria Teresa and Caivano, Danilo and Gigante, Domenico and Ragone, Azzurra},
	title = {POLARIS: A framework to guide the development of Trustworthy AI systems},
	year = {2024},
	journal = {CEUR Workshop Proceedings},
	volume = {3741},
	pages = {528 - 537},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85202042996&partnerID=40&md5=95d5f997da1933a2f575a996d581de0f},
	abstract = {In the ever-expanding landscape of Artificial Intelligence (AI), where innovation thrives and new products and services are continuously being delivered, ensuring that AI systems are designed and developed responsibly throughout their entire lifecycle is crucial. To this end, several AI ethics principles and guidelines have been issued to which AI systems should conform. Nevertheless, relying solely on high-level AI ethics principles is far from sufficient to ensure the responsible engineering of AI systems. In this field, AI professionals often navigate by sight. Indeed, while recommendations promoting Trustworthy AI (TAI) exist, they are often high-level statements difficult to translate into concrete implementation strategies. Currently, there is a significant gap between high-level AI ethics principles and low-level concrete practices for AI professionals. To address this challenge, in this discussion paper we describe the novel holistic framework for Trustworthy AI we developed - designed to bridge the gap between theory and practice. The framework builds up from the results of a systematic review of the state of the practice as well as a survey and think-aloud interviews with 34 AI practitioners. The framework, unlike most of the ones in the literature, is designed to provide actionable guidelines and tools to support different types of stakeholders throughout the entire Software Development Life Cycle (SDLC). Our goal is to empower AI professionals to confidently navigate the ethical dimensions of TAI through practical insights, ensuring that the vast potential of AI is exploited responsibly for the benefit of society as a whole. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Artificial Intelligence; Framework; Knowledge Base; Software Engineering; Trustworthy Ai; Ethical Aspects; Software Design; Artificial Intelligence Systems; Entire Life Cycles; Framework; Holistic Frameworks; Implementation Strategies; Knowledge Base; Product And Services; Systematic Review; Theory And Practice; Trustworthy Artificial Intelligence; Life Cycle},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Rajh202411,
	author = {Rajh, Nataša and Miesenberger, Klaus and Koutny, Reinhard},
	title = {Accessibility in the Software Engineering (SE) Process and in Integrated Development Environments (IDEs): A Systematic Literature Review},
	year = {2024},
	journal = {Lecture Notes in Computer Science},
	volume = {14750 LNCS},
	pages = {11 - 18},
	doi = {10.1007/978-3-031-62846-7_2},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85200367833&doi=10.1007%2F978-3-031-62846-7_2&partnerID=40&md5=1380a4025da80a060eb5774233799a56},
	abstract = {Software accessibility, once relatively unknown, is now recognized as both crucial and legally mandated, accumulating significant research attention in Computer Science. While various guidelines, methods, and tools have been developed, practical implementation still faces challenges, with persistent barriers in many products. Research often focuses on requirements engineering and evaluation, neglecting the implementation phase. While acknowledging the necessity of including accessibility throughout the engineering process, research on comprehensive approaches has been sparse, primarily focusing on requirements engineering and evaluation, neglecting implementation phase. We see integrating accessibility support into the core of design and development as a crucial step for improvements, revealing a need for integrating accessibility evaluation support into integrated development environments (IDEs). This paper aims to present a collection of techniques, methods and tools that support accessibility involvement within different stages of the engineering process, and additionally to provide a theoretical foundation for research and development of incorporating accessibility evaluation support within IDEs. Thereafter, we analyzed existing related Systematic Literature Reviews (SLRs) and complemented the findings with a new SLR. The study provides a solid base for advanced approaches in integrating accessibility into software engineering (SE). © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Engineering Assets; Integrated Development Environments; Software Accessibility; Software Engineering; Systematic Literature Review; Computer Software; Accessibility Evaluation; Design And Development; Engineering Assets; Engineering Process; Implementation Phasis; Integrated Development Environment; Requirement Engineering; Software Accessibility; Software Engineering Process; Systematic Literature Review; Requirements Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Erazo-Garzon2024137,
	author = {Erazo-Garzon, Lenin and Gutiérrez, Bayron and Illescas-Peña, L. and Bermeo, Alexandra},
	title = {Self-adaptive Internet of Things Systems: A Systematic Literature Review},
	year = {2024},
	journal = {Communications in Computer and Information Science},
	volume = {2051 CCIS},
	pages = {137 - 157},
	doi = {10.1007/978-3-031-58950-8_11},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85197281009&doi=10.1007%2F978-3-031-58950-8_11&partnerID=40&md5=e9820aa3f4ae33bcfa28e38ce7f24c3e},
	abstract = {The dynamic and uncertain nature in which IoT systems operate has led to the exploration of new emerging Software Engineering approaches, such as self-adaptation, to provide these systems with autonomous capabilities to adjust their behavior at runtime to environmental changes. There are numerous primary studies on self-adaptation in IoT; however, it is necessary to deepen and update the state of technological knowledge in this area, especially in aspects that have not been addressed in previous reviews. Therefore, this paper presents a systematic review of the literature on self-adaptation in IoT systems, according to the guidelines proposed by Kitchenham et al. and the self-adapting topology created by Krupitzer et al. This review aims to answer the following research questions: i) In what context has self-adaptation been used in the IoT domain? ii) How is self-adaptation performed in IoT platforms? and iii) What is the research approach in studies related to self-adaptive systems in IoT? First, 1136 primary studies were obtained through automatic and manual searches. Then, inclusion and exclusion criteria were applied to select 84 relevant studies on self-adaptation in IoT. Finally, quantitative and qualitative methods based on extraction criteria were used to synthesize the strengths and weaknesses of the studies concerning the research questions as well as to identify research gaps and opportunities. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Cyber-physical Systems; Internet Of Things (iot); Self-adaptation; Software Engineering; Systematic Literature Review; Adaptive Systems; Cyber Physical System; Embedded Systems; Software Engineering; Autonomous Capability; Cybe-physical Systems; Cyber-physical Systems; Environmental Change; Internet Of Thing; Research Questions; Runtimes; Self- Adaptations; Systematic Literature Review; Technological Knowledge; Internet Of Things},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Zohaib202471109,
	author = {Zohaib, Muhamad and AlSanad, Ahmed and AlHogail, Areej Abdullah},
	title = {Prioritizing DevOps Implementation Guidelines for Sustainable Software Projects},
	year = {2024},
	journal = {IEEE Access},
	volume = {12},
	pages = {71109 - 71130},
	doi = {10.1109/ACCESS.2024.3402832},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85194071108&doi=10.1109%2FACCESS.2024.3402832&partnerID=40&md5=bb7036cf29b67a908d27bafd2b910821},
	abstract = {The DevOps paradigm is increasingly being adopted in the software industry. To achieve sustainable DevOps adoption, organizations need to transform their culture, embrace automation, implement measurement practices, and foster sharing of knowledge and information (referred to as CAMS). Implementing DevOps principles can be complex for software organizations. However, sustainable DevOps implementation can lead to the development of high-quality projects with a favorable return on investment. This evidence-based study aims to explore the guidelines for sustainable DevOps implementation as reported in both the literature and industry practices. By conducting a systematic literature review and questionnaire survey, we identified 48 guidelines for sustainable DevOps implementation. Furthermore, we developed a decision-making framework to assist practitioners in prioritizing these guidelines. The results indicate that culture, among the CAMS aspects, is the most crucial principle for sustainable DevOps implementation. The highest priority guidelines for sustainable DevOps implementation include: (i) fostering a collaborative culture with shared goals, (ii) assessing the organization's readiness for a microservices architecture, and (iii) educating executives about the benefits of DevOps to gain resource and budget support. We believe that this comprehensive study will aid practitioners in understanding the core principles and guidelines for sustainable DevOps implementation. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Cams; Devops; Guidelines; Prioritization; Systematic Literature Review; Budget Control; Decision Making; Software Engineering; Guideline; Measurement Practices; Prioritization; Software; Software Industry; Software Project; Sustainable Softwares; Systematic; Systematic Literature Review; Cams},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Gupta202476,
	author = {Gupta, Manas Lokesh and Ramya, P. and Vadapalli, Vidhya Vikas and Gundu, Harshitha and Karthikeyan, C. V.S.S.},
	title = {Continuous Integration, Delivery and Deployment: A Systematic Review of Approaches, Tools, Challenges and Practices},
	year = {2024},
	journal = {Communications in Computer and Information Science},
	volume = {2045 CCIS},
	pages = {76 - 89},
	doi = {10.1007/978-3-031-59114-3_7},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85192344563&doi=10.1007%2F978-3-031-59114-3_7&partnerID=40&md5=aa64b9fb00906da81fe0ac805fa1d93e},
	abstract = {In the rapidly evolving landscape of software development, the adoption of Continuous Integration (CI) and Continuous Development (CD) practices has become paramount. This research paper delves into the heart of modern software engineering, providing a comprehensive study of CI/CD methodologies, their benefits, and their impact on software development processes. We examine the principles and practices that underpin CI/CD, exploring how these methodologies promote collaboration, automation, and the rapid delivery of high-quality software. Through an in-depth analysis of case studies, industry trends, and best practices, we shed light on the tangible advantages of CI/CD, such as shorter development cycles, reduced errors, and enhanced product stability. Furthermore, this research paper investigates the challenges and complexities associated with implementing CI/CD in various development environments. It addresses the cultural shifts required, the tools and technologies involved, and strategies for overcoming common obstacles. Our findings contribute to a deeper understanding of the role CI/CD plays in the software development process, offering insights for organizations seeking to optimize their software delivery pipelines. By embracing these practices, software development teams can enhance their efficiency, code quality, and agility, ultimately resulting in better products and improved customer satisfaction. This study provides a roadmap for organizations embarking on their CI/CD journey and underscores the significance of these practices in the ever-changing software development landscape. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Continuous Delivery; Continuous Deployment; Continuous Integration; Continuous Software Engineering; Empirical Software Engineering; Systematic Literature Review; Integration; Software Design; Continuous Delivery; Continuous Deployment; Continuous Development; Continuous Integrations; Continuous Software Engineerings; Empirical Software Engineering; Research Papers; Software Development Process; Systematic Literature Review; Systematic Review; Customer Satisfaction},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Mendoza2024214,
	author = {Mendoza, James Neil B. and Buhat-Mendoza, Dorothy G. and Ampaguey, Jocelyn O. and Gravides, Marilou G.},
	title = {Leveraging Software Engineering Practices to Enhance Nursing Informatics Systems Development: A Systematic Literature Review},
	year = {2024},
	pages = {214 - 220},
	doi = {10.1109/ICTAS59620.2024.10507143},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85192220972&doi=10.1109%2FICTAS59620.2024.10507143&partnerID=40&md5=bea8a521d1bd8240b318d7a3883d3bd6},
	abstract = {Nursing informatics (NI) integrates nursing knowledge with IT, making a difference in patient outcomes as well as better healthcare processes. Software Engineering (SE) principles deliver quality, efficiency, and optimal industry requirements in the NI system development process. This systematic literature review focuses on SE practices and their integration into NI systems development. Identifying, evaluating, and synthesizing relevant studies systematically using Parsifal were done in the review. Articles from peer-reviewed journals published in English from 2000 to 2023, SE and NI integration were among the selection criteria. In total, 26 studies were identified upon a screening process of the results from the search that yielded 202 unique and relevant studies. The PRISMA statement guides the process, ensuring transparency and reproducibility. A quality assessment checklist was employed to evaluate the study for final selection. Articles were analyzed based on SE methodologies applied to NI development either implied or explicit. The results show that SE practices, including Software Development, User-Centered Design, Prototyping, Agile Methodologies, Requirements Engineering, and Security Measures contribute to the improvement of NI system development. These practices provide advantages like efficiency, system quality, security, and system maintenance and evolution. Obstacles involve cultural differences, regulatory issues, and resource limitations. In this regard, there are several recommendations for promoting the successful implementation of SE practices into NI systems development through collaboration, agile methodologies, adaption to a healthcare context, and continuous education and training. This is to promote cooperation, adapting SE methodologies to the needs of health care and providing better understanding between software engineers and nurses. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Healthcare It; Nursing Informatics; Parsifal; Sdlc; Search String; Software Engineering; Agile Manufacturing Systems; Nursing; Requirements Engineering; Software Design; Software Prototyping; User Centered Design; Healthcare It; Informatics Systems; Nursing Informatics; Parsifal; Sdlc; Search String; Software Engineering Methodologies; Software Engineering Practices; System Development; Systematic Literature Review; Efficiency},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Utami2024,
	author = {Utami, Avita Tri and Raharjo, Teguh and Mustaqim, Ilham Zharif and Trisnawaty, Ni Wayan},
	title = {BARRIERS OF AGILE REQUIREMENTS ENGINEERING IN THE PUBLIC SECTOR: A SYSTEMATIC LITERATURE REVIEW},
	year = {2024},
	journal = {Interdisciplinary Journal of Information, Knowledge, and Management},
	volume = {19},
	pages = {},
	doi = {10.28945/5262},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85189356010&doi=10.28945%2F5262&partnerID=40&md5=05d3c9c231aa6935cfd8ca1d252e2f70},
	abstract = {Aim/Purpose The objective of this study is to summarize the challenges of Agile Require-ments Engineering (Agile RE) in the public sector in republican and constitu-tional monarchy nations. Additionally, it offers recommendations to address these challenges. Background Failure of IT projects in the public sector results in financial losses for the state and loss of public trust, often attributed to issues in requirements engineering such as prioritization of user needs and excessive scope of requirements. IT projects can have a higher success rate with Agile RE, but there are also draw-backs. Therefore, this study holds significance by presenting a thorough frame-work designed to pinpoint and overcome the challenges associated with Agile RE to increase the success rate of IT projects. Methodology This study employs a Systematic Literature Review (SLR) protocol in the field of software engineering or related domains, which consists of three main phases: planning the review, conducting the review with a snowballing ap- proach, and reporting the review. Furthermore, the authors perform open cod-ing to categorize challenges based on the Agile methodologies adoption factor model and axial coding to map potential solutions. Contribution The authors assert that this research enriches the existing literature on Agile RE, specifically within the public sector context, by mapping out challenges and possible solutions that contribute to creating a foundation for future studies to conduct a more in-depth analysis of Agile adoption in the public sector. Fur-thermore, it compares the barriers of Agile RE in the public sector with the general context, leading to the discovery of new theories specifically for this field. Findings Most challenges related to Agile RE in the public sector are found in the people and process aspects. Project and organizational-related are subsequent aspects. Therefore, handling people and processes proficiently is imperative within Agile RE to prevent project failure. Recommendations for Practitioners Our findings offer a comprehensive view of Agile RE in the public sector in re-publican and constitutional monarchy nations. This study maps the challenges encountered by the public sector and provides potential solutions. The authors encourage practitioners to consider our findings as a foundation for adopting Agile methodology in the public sector. Furthermore, this study can assist prac-titioners in identifying existing barriers related to Agile RE, pinpointing ele-ments that contribute to overcoming those challenges, and developing strategies based on the specific needs of the organizations. Recommendations for Researchers Researchers have the potential to expand the scope of this study by conducting research in other countries, especially African countries, as this study has not yet encompassed this geographic region. Additionally, they can strengthen the evi-dence linking Agile RE challenges to the risk of Agile project failure by per-forming empirical validation in a specific country. Impact on Society This research conducts a comprehensive exploration of Agile RE within the public sector, serving as a foundation for the successful adoption of Agile meth-odology by overcoming obstacles related to Agile RE. This study highlights the importance of managing people, processes, projects, and organizational ele-ments to increase the success of Agile adoption in the public sector. Future Research In the future, researchers should work towards resolving the limitations identi-fied in this study. This study has not provided a clear prioritization of challenges and solutions according to their significance. Therefore, future researchers can perform a Fuzzy Analytical Hierarchical Process (F-AHP) to prioritize the pro-posed solutions. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile Challenges; Agile Requirements Engineering; Public Sector; Systematic Litera-ture Review; Losses; Software Engineering; Agile Challenge; Agile Methodologies; Agile Requirement Engineering; Agile Requirements; It Project; Prioritization; Public Sector; Requirement Engineering; Systematic Literature Review; Systematic Literum-ture Review; Requirements Engineering},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Chueca2024,
	author = {Chueca, Jorge Rodríguez and Verón, Javier and Font, Jaime and Pérez, Francisca and Cetina, Carlos},
	title = {The consolidation of game software engineering: A systematic literature review of software engineering for industry-scale computer games},
	year = {2024},
	journal = {Information and Software Technology},
	volume = {165},
	pages = {},
	doi = {10.1016/j.infsof.2023.107330},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85172685092&doi=10.1016%2Fj.infsof.2023.107330&partnerID=40&md5=fd820a7bcfddc1335ee68585dfb0aa00},
	abstract = {Context: Game Software Engineering (GSE) is a branch of Software Engineering (SE) that focuses on the development of video game applications. In past years, GSE has achieved enough volume, differences from traditional software engineering, and interest by the community to be considered an independent scientific domain, veering out from traditional SE. Objective: This study evaluates the current state of the art in software engineering for industry-scale computer games identifying gaps and consolidating the magnitude and growth of this field. Method: A Systematic Literature Review is performed following best practices to ensure the relevance of the studies included in the review. We analyzed 98 GSE studies to extract the current intensity, topics, methods, and quality of GSE. Results: The GSE research community has been growing over the years, producing over four times more research than before the previous GSE survey. However, this community is still very dispersed, with no main venues holding most of the GSE scientific studies. A broader range of topics is covered in this area, evolving towards those of a mature field such as architecture and design. Also, the reviewed studies employ more elaborated empirical research methods, even though the study reports need to be more rigorous in sections related to the critical examination of the work. Conclusion: The results of the SLR lead to the identification of 13 potential future research directions for this domain. GSE is an independent, mature, and growing field that presents new ways of software creation where the gap between industry and academia is narrowing. Video games present themselves as powerful tools to push the boundaries of software knowledge. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Computer Games; Game Software Engineering; Industry-scale; Slr; Systematic Literature Review; Video Games; Application Programs; Engineering Research; Human Computer Interaction; 'current; Best Practices; Game Software; Game Software Engineering; Industry-scale; Slr; State Of The Art; Systematic Literature Review; Video-games; Volume Difference; Computer Games},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Abdulganiyu2024453,
	author = {Abdulganiyu, Oluwadamilare Harazeem and Ait Tchakoucht, Taha and Saheed, Yakub Kayode},
	title = {Towards an efficient model for network intrusion detection system (IDS): systematic literature review},
	year = {2024},
	journal = {Wireless Networks},
	volume = {30},
	number = {1},
	pages = {453 - 482},
	doi = {10.1007/s11276-023-03495-2},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85171288652&doi=10.1007%2Fs11276-023-03495-2&partnerID=40&md5=fc2162538a81095d1216636380c32c27},
	abstract = {With the recent rise in internet usage, the volume of crucial, private, and confidential data traveling online has increased. Attackers have made attempts to break into the network due to weaknesses in the security mechanisms, gaining access to sensitive data that could disrupt the operation of the systems and jeopardize the confidentiality of the data. Intrusion detection systems, a key component of cybersecurity, were used to defend against these potential threats. Numerous review papers have examined various intrusion detection system (IDS) approaches for networks, many of which focused primarily on the anomaly-based IDS while paying less attention to the signature and hybrid-based approaches. Additionally, a lot of these studies took a non-systematic approach, comparing existing techniques, without taking into account the in-depth analytical synthesis of methodologies and results of the approaches to provide a thorough grasp of state-of-the-art. In order to provide a thorough assessment of the current status of Network IDS, this work provides an in-depth insight into what is attainable in the research of Anomaly, Signature, and Hybrid-Based methods by adhering to the principles of Preferred Reporting Items for Systematic Reviews and Meta-Analyses and guidelines for Software Engineering Domain. We discovered unexplored study topics and unsolved research issues based on the study's findings. We end by highlighting potential, high impact future research areas in order to improve the IDS model. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Anomaly-based; Artificial Intelligence; Network Intrusion Detection System; Pattern Matching; Rule-based; Signature-based; Computer Crime; Cybersecurity; Intrusion Detection; Network Security; Sensitive Data; Software Engineering; Anomaly-based; Confidential Data; Internet Usage; Intrusion Detection Systems; Network Intrusion Detection Systems; Pattern-matching; Private Data; Rule Based; Signature-based; Systematic Literature Review; Pattern Matching},
	type = {Retracted},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ongoro2024202,
	author = {Ongoro, Catherine Akoth and FanJiang, Yong Yi},
	title = {Digital Game-Based Technology for English Language Learning in Preschools and Primary Schools: A Systematic Analysis},
	year = {2024},
	journal = {IEEE Transactions on Learning Technologies},
	volume = {17},
	pages = {202 - 228},
	doi = {10.1109/TLT.2023.3268282},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85153516406&doi=10.1109%2FTLT.2023.3268282&partnerID=40&md5=c38773ddac14d1708758fe3b87a711fc},
	abstract = {This article aims to provide a systematic review of existing research on the use of digital game-based learning (DGBL) technology for foreign language (English) in preschool and elementary schools. Digital game-based technology enables learning to become more interactive and inspirational, thereby enhancing language acquisition. The authors present a DGBL classification schema with four main components, design principles, language content, pedagogical factors, and feedback mechanisms, as guidelines for designing and implementing DGBL in foreign language learning. This survey classifies and filters 110 published articles from January 2010 to April 2022 based on the proposed DGBL schema adhering to the insertion and omission criteria, from which 50 studies focus on preschool and primary school students between the ages of 2 and 10 years. The findings indicate that DGBL influences motivation, creativity, and problem-solving ability. However, the synthesized literature also reveals challenges and issues in designing and developing DGBL systems based on novel technologies. The findings are fundamental for exploring the game classification schema for designing and implementing game-based learning to augment the trends of DBGL in foreign language learning and identify the possible issues and solutions for DGBL to lessen health concerns and technology challenges. The authors recommend emerging technologies and software engineering processes as possible solutions for continuity in DGBL research by enlightening the significance of evolving technologies such as artificial intelligence, blockchain, deep learning, AR/VR, and development and operations. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Applications In Subject Areas; Classification Model Architecture; Elementary Education; Games; Preschool; Systematic Review; Deep Learning; E-learning; Engineering Education; Modeling Languages; Problem Solving; Teaching; Applications In Subject Areas; Classification Model Architecture, Preschool, Elementary Education, Systematic Review; Classification Models; Context Models; Elementary Education; Game; Modeling Architecture; Psychology; Software; Systematic; Systematic Review; Serious Games},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Russo202454,
	author = {Russo, Nelson and Reis, Leonilde and Silveira, Clara and Mamede, Henrique São},
	title = {Towards a Comprehensive Framework for the Multidisciplinary Evaluation of Organizational Maturity on Business Continuity Program Management: A Systematic Literature Review},
	year = {2024},
	journal = {Information Security Journal},
	volume = {33},
	number = {1},
	pages = {54 - 72},
	doi = {10.1080/19393555.2023.2195577},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85152037415&doi=10.1080%2F19393555.2023.2195577&partnerID=40&md5=8054f6ce96a079424404d825483db675},
	abstract = {Organizational dependency on Information and Communication Technology (ICT) drives the preparedness challenge to cope with business process disruptions. Business Continuity Management (BCM) encompasses effective planning to enable business functions to resume to an acceptable state of operation within a defined timeframe. This paper presents a systematic literature review that communicates the strategic guidelines to streamline the organizational processes in the BCM program, culminating in the Business Continuity Plan design, according to the organization’s maturity. The systematic literature review methodology follows the Evidence-Based Software Engineering protocol assisted by the Parsifal tool, using the EbscoHost, ScienceDirect, and Scopus databases, ranging from 2000 to February 2021. International Standards and Frameworks guide the BCM program implementation, however, there is a gap in communicating metrics and what needs to be measured in the BCM program. The major paper result is the confirmation of the identified gap, through the analysis of the studies that, according to the BCM components, report strategic guidelines to streamline the BCM program. The analysis quantifies and discusses the contribution of the studies on each BCM component to design a framework supported by metrics, that allows assessing the organization’s preparedness in each BCM component, focusing on Information Systems and ICT strategies. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Business Continuity Plan; Information And Communication Technology; Information Systems; Measurement; Organizational Maturity; Information Management; Information Use; Software Engineering; Business Continuity; Business Continuity Management; Business Continuity Plans; Information And Communication Technologies; Management Components; Management Projects; Organisational; Organizational Maturity; Program Management; Systematic Literature Review; Information Systems},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access; Hybrid Gold Open Access}
}

@CONFERENCE{Klavins2024290,
	author = {Klavins, Atis},
	title = {ROBOTIC PROCESS AUTOMATION IN SMALL AND MEDIUM ENTERPRISES – A REVIEW},
	year = {2024},
	volume = {39},
	pages = {290 - 294},
	doi = {10.22616/RRD.30.2024.045},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105009322176&doi=10.22616%2FRRD.30.2024.045&partnerID=40&md5=2c27897e7abcf4b73112af8c0b842e28},
	abstract = {Robotic process automation (RPA) is relatively new software technology that is quickly being adopted by companies around the globe to free office workers from routine, monotonous and rule-based tasks letting them invest their time in higher complexity and value tasks. While big companies have money, time and workforce resources to implement RPA, small and medium enterprises (SME) fall behind in their effort to start using RPA despite the fact that for this segment of organizations RPA would be useful as it presents the opportunity to re-arrange their limited resources and delegate part of work to software. To address this situation, the aim of this paper is to conduct systematic review of literature regarding RPA appliances in enterprises in order to find out how to implement RPA successfully, what processes to give to RPA, and how SMEs can implement RPA better. During the review main guidelines on how to implement RPA in enterprise in general and which processes to delegate to RPA in particular were identified as well as challenges RPA implementation might bring to company. It was also noted that there is missing research on how to adopt RPA specifically in SMEs segment. The conclusion is that SMEs aimed RPA implementation guidelines are missing. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Robotic Process Automation; Small And Medium Enterprises; Office Buildings; Process Control; Software Engineering; High Complexity; Office Workers; Process Automation; Robotic Process Automation; Rule Based; Small-and-medium Enterprise; Software Technology; Systematic Review; Robotics},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Genero Bocco2024557,
	author = {Genero Bocco, Marcela Fabiana and Piattini, Mario Gerardo},
	title = {Teaching Systematic Literature Reviews: Strategies and Best Practices},
	year = {2024},
	pages = {557 - 592},
	doi = {10.1007/978-3-031-71769-7_20},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-105002522885&doi=10.1007%2F978-3-031-71769-7_20&partnerID=40&md5=25019ccab6b95c5bd91c1946342f6818},
	abstract = {Systematic literature reviews have become an important method in software engineering in order to obtain new findings and propose innovative ideas for future research. In this chapter, we share strategies and best practices on teaching systematic literature reviews. © 2025 Elsevier B.V., All rights reserved.},
	type = {Book chapter},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Goknil2023,
	author = {Goknil, Arda and Nguyen, Phu H. and Sen, Sagar and Politaki, Dimitra and Niavis, Harris and Pedersen, Karl John and Suyuthi, Abdillah and Anand, Abhilash and Ziegenbein, Amina},
	title = {A Systematic Review of Data Quality in CPS and IoT for Industry 4.0},
	year = {2023},
	journal = {ACM Computing Surveys},
	volume = {55},
	number = {14 S},
	pages = {},
	doi = {10.1145/3593043},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85168794623&doi=10.1145%2F3593043&partnerID=40&md5=39f505717655f75717b6e0ec268e701f},
	abstract = {The Internet of Things (IoT) and Cyber-Physical Systems (CPS) are the backbones of Industry 4.0, where data quality is crucial for decision support. Data quality in these systems can deteriorate due to sensor failures or uncertain operating environments. Our objective is to summarize and assess the research efforts that address data quality in data-centric CPS/IoT industrial applications. We systematically review the state-of-the-art data quality techniques for CPS and IoT in Industry 4.0 through a systematic literature review (SLR) study. We pose three research questions, define selection and exclusion criteria for primary studies, and extract and synthesize data from these studies to answer our research questions. Our most significant results are (i) the list of data quality issues, their sources, and application domains, (ii) the best practices and metrics for managing data quality, (iii) the software engineering solutions employed to manage data quality, and (iv) the state of the data quality techniques (data repair, cleaning, and monitoring) in the application domains. The results of our SLR can help researchers obtain an overview of existing data quality issues, techniques, metrics, and best practices. We suggest research directions that require attention from the research community for follow-up work. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Cps; Data Quality; Industry 4.0; Iot; Systematic Review; Application Programs; Data Reduction; Decision Support Systems; Embedded Systems; Engineering Research; Industrial Research; Information Management; Internet Of Things; Applications Domains; Best Practices; Cybe-physical Systems; Cyber-physical Systems; Data Quality; Quality Issues; Quality Techniques; Research Questions; Systematic Literature Review; Systematic Review; Industry 4.0},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Final Open Access; Green Open Access}
}

@ARTICLE{Govers2023,
	author = {Govers, Jarod and Feldman, Philip Gregory and Dant, Aaron P. and Patros, Panos},
	title = {Down the Rabbit Hole: Detecting Online Extremism, Radicalisation, and Politicised Hate Speech},
	year = {2023},
	journal = {ACM Computing Surveys},
	volume = {55},
	number = {14 s},
	pages = {},
	doi = {10.1145/3583067},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85165023260&doi=10.1145%2F3583067&partnerID=40&md5=068ae3d30fe7a790acbad44c9a6b6b15},
	abstract = {Social media is a modern person's digital voice to project and engage with new ideas and mobilise communities - a power shared with extremists. Given the societal risks of unvetted content-moderating algorithms for Extremism, Radicalisation, and Hate speech (ERH) detection, responsible software engineering must understand the who, what, when, where, and why such models are necessary to protect user safety and free expression. Hence, we propose and examine the unique research field of ERH context mining to unify disjoint studies. Specifically, we evaluate the start-to-finish design process from socio-technical definition-building and dataset collection strategies to technical algorithm design and performance. Our 2015-2021 51-study Systematic Literature Review (SLR) provides the first cross-examination of textual, network, and visual approaches to detecting extremist affiliation, hateful content, and radicalisation towards groups and movements. We identify consensus-driven ERH definitions and propose solutions to existing ideological and geographic biases, particularly due to the lack of research in Oceania/Australasia. Our hybridised investigation on Natural Language Processing, Community Detection, and visual-text models demonstrates the dominating performance of textual transformer-based algorithms. We conclude with vital recommendations for ERH context mining researchers and propose an uptake roadmap with guidelines for researchers, industries, and governments to enable a safer cyberspace. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Community Detection; Extremism; Hate Speech; Machine Learning; Natural Language Processing; Neural Networks; Radicalisation; Sociolinguistics; E-learning; Learning Algorithms; Natural Language Processing Systems; Population Dynamics; Software Engineering; Visual Languages; Community Detection; Extremism; Hate Speech; Language Processing; Machine-learning; Natural Language Processing; Natural Languages; Neural-networks; Radicalization; Sociolinguistic; Machine Learning},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Zein2023,
	author = {Zein, Samer and Salleh, Norsaremah and Grundy, John C.},
	title = {Systematic reviews in mobile app software engineering: A tertiary study},
	year = {2023},
	journal = {Information and Software Technology},
	volume = {164},
	pages = {},
	doi = {10.1016/j.infsof.2023.107323},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85172927223&doi=10.1016%2Fj.infsof.2023.107323&partnerID=40&md5=a75b455999dbeb8e0b4690802d05c4ff},
	abstract = {Context: A number of secondary studies in the form of systematic reviews and systematic mapping studies exist in the area of mobile application software engineering. Objective: The focus of this paper is to provide an overview and analysis of these secondary studies of mobile app software engineering for researchers and practitioners. Method: We conducted a systematic tertiary study following the guidelines by Kitchenham et al. to classify and analyze secondary studies in this area. Results: After going through several filtration steps, we identified 24 secondary studies addressing major software engineering phases, such as initiation, requirements engineering, design, development and testing. The majority of the secondary studies focused on testing and design phases. Specific research topics addressed by the included studies were: usability evaluation, test automation, context-aware testing, cloud-based development, architectural models, effort and size estimation models, defect prediction, and GUI testing. We found that the trend in secondary studies is towards more specific areas of mobile application software engineering such as architectural design models, context-aware testing, testing of non-functional requirements, mobile cloud computing, and intelligent mobile applications. Research directions and some identified practices for practitioners were also identified. Conclusions: Mobile application software engineering is an active research area. The area can benefit from additional research in terms of secondary studies targeting evolution, maintenance, requirements engineering, and cross-platform mobile application development. Additionally, some of the secondary studies identify some useful practices for practitioners. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Mapping Study; Mobile App Software Development; Systematic Reviews; Tertiary Study; Application Programs; Mobile Cloud Computing; Mobile Computing; Requirements Engineering; Software Design; Software Testing; Context-aware; Engineering Phase; Mapping Studies; Mobile App; Mobile App Software Development; Mobile Application Software; Requirement Engineering; Systematic Mapping Studies; Systematic Review; Tertiary Study; Mapping},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Wang2023,
	author = {Wang, Lu and Sun, Chenhan and Zhang, Chongyang and Nie, Weikun and Huang, Kaiyuan},
	title = {Application of knowledge graph in software engineering field: A systematic literature review},
	year = {2023},
	journal = {Information and Software Technology},
	volume = {164},
	pages = {},
	doi = {10.1016/j.infsof.2023.107327},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85171613779&doi=10.1016%2Fj.infsof.2023.107327&partnerID=40&md5=d06398bab70b93bc599b2c95d18db5b8},
	abstract = {Context: Knowledge graphs describe knowledge resources and their carriers through visualization. Moreover, they mine, analyze, construct, draw, and display knowledge and their interrelationships to reveal the dynamic development law of the knowledge field. Furthermore, knowledge graphs provide practical and valuable references for subject research. With the development of software engineering, powerful semantic processing and organizational interconnection capabilities of knowledge graphs are gradually required. Current research suggests using knowledge graphs for code or API recommendation, vulnerability mining, and positioning to improve the efficiency and accuracy of development and design. However, software engineering lacks a systematic analysis of the knowledge graphs application. Objective: This paper explores the construction techniques and application status of knowledge graphs in the field of software engineering, broadens the application prospects of knowledge graphs in this field, and facilitates the subsequent research of researchers. Methods: We collected over 100 documents from 2017 to date and selected 55 directly related documents for systematic analysis. Then, we analyzed the organized knowledge mainly stored in software engineering knowledge graphs, including software architecture, code details, and security reports. Results: We studied the emerging research methods in ontology modeling, named entity recognition, and knowledge fusion in graph construction and found that current knowledge graphs are mainly used in intelligent software development, software vulnerability mining, security testing, and API recommendation. Conclusion: Our research on the innovation of knowledge graph in software engineering and the future construction of integrating open-source community software and developer recommendations with knowledge-driven microservice O&M aspects can inspire more scholars and knowledge workers to use knowledge graph technology, which is important to solve software engineering problems and promote the development of both fields. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Api Recommendation; Code Recommendation; Intelligent Development; Knowledge Graph; Software Engineering; Vulnerability Mining And Location; Application Programs; Graphic Methods; Open Source Software; Open Systems; Semantics; Software Design; Software Testing; 'current; Api Recommendation; Code Recommendation; Engineering Fields; Intelligent Development; Knowledge Graphs; Systematic Analysis; Systematic Literature Review; Vulnerabilities Minings; Vulnerability Mining And Location; Knowledge Graph},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Alnaseef2023,
	author = {Alnaseef, Faisal H. and Niazi, Mahmood K. and Mahmood, Sajjad L. and Alshayeb, Mohammad R. and Ahmad, Irfan},
	title = {Towards a successful secure software acquisition},
	year = {2023},
	journal = {Information and Software Technology},
	volume = {164},
	pages = {},
	doi = {10.1016/j.infsof.2023.107315},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85167437686&doi=10.1016%2Fj.infsof.2023.107315&partnerID=40&md5=57a817bf988dde8f3750dbef6abdf2d6},
	abstract = {Context: Security is a critical attribute of software quality. Organizations invest considerable sums of money in protecting their assets. Despite investing in secure infrastructure, organizations remain prone to security risks and cyberattacks that exploit security flaws. Many factors contribute to the challenges related to software security, e.g., the exponential increase in Internet-enabled applications, threats from hackers, and the susceptibility of inexperienced Internet users. Moreover, organizations tend to procure off-the-shelf software from third-party suppliers. However, gaining a complete understanding of ways to assess suppliers’ readiness to provide secure software before selecting a supplier is imperative. Objective: We have developed a readiness model for secure software acquisition (RMSSA) to help software organizations select suppliers who can provide secure software. Method: We employed state-of-the-art techniques based on systematic literature review to determine the best practices undertaken by organizations in terms of acquiring secure software, which depends on six core security knowledge areas: confidentiality, integrity, availability, authorization, authentication, and accountability. Results: We evaluated the RMSSA theoretically and in a practical environment based on three case studies with software organizations. Our findings can guide software organizations in selecting the supplier who can develop secure software. Conclusion: The proposed RMSSA can be used to evaluate suppliers’ readiness to provide secure software. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Software Engineering; Software Acquisition; Software Process; Software Security; Systematic Reviews; Application Programs; Computer Software Selection And Evaluation; Mergers And Acquisitions; Personal Computing; Critical Attributes; Empirical Software Engineering; Readiness Models; Secure Software; Software Acquisition; Software Organization; Software Process; Software Quality; Software Security; Systematic Review; Authentication},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Russo2023,
	author = {Russo, Nelson and Mamede, Henrique São and Reis, Leonilde and Martins, José Luís Bandeira and Branco, Frederico Augusto},
	title = {Exploring a Multidisciplinary Assessment of Organisational Maturity in Business Continuity: A Perspective and Future Research Outlook},
	year = {2023},
	journal = {Applied Sciences (Switzerland)},
	volume = {13},
	number = {21},
	pages = {},
	doi = {10.3390/app132111846},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85192352194&doi=10.3390%2Fapp132111846&partnerID=40&md5=88fdf390021453090877fe6b9ff9b76e},
	abstract = {In a competitive business landscape heavily reliant on information and communication technology, organisations must be prepared to address disruptions in their business operations. Business continuity management involves effective planning for the swift reestablishment of business processes in the short term. However, there are still obstacles to implementing business continuity plans, which can be justified by various factors. The purpose of this study is to present the perspectives and future research paths based on a systematic literature review from the peer-reviewed literature published from 1 January 2000 to 31 December 2021. This systematic literature review adheres to the guidelines established by evidence-based software engineering and leverages the Parsifal online tool. The primary research results identify and establish connections between the common components and activities of business continuity management as defined in international standards and frameworks to identify gaps in the existing knowledge. These findings will contribute to the development of a framework that provides a practical approach applicable to organisations of all sizes, taking into account each aspect of business continuity management, with a particular emphasis on information and communication technology systems. This paper’s contribution lies in offering insights from a systematic literature review regarding the strategic principles for designing and implementing a business continuity plan, along with a comprehensive overview of related research. Furthermore, it presents a path forward to guide future research efforts aimed at addressing the gaps in the literature concerning continuity planning. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Business Continuity Plan; Framework; Guidelines; Information And Communication Technology; Literature Review; Organisational Resilience; Strategy},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Zakeri-Nasrabadi2023,
	author = {Zakeri-Nasrabadi, Morteza and Parsa, Saeed and Ramezani, Mohammad and Roy, Chanchal K. and Ekhtiarzadeh, Masoud},
	title = {A systematic literature review on source code similarity measurement and clone detection: Techniques, applications, and challenges},
	year = {2023},
	journal = {Journal of Systems and Software},
	volume = {204},
	pages = {},
	doi = {10.1016/j.jss.2023.111796},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85165159999&doi=10.1016%2Fj.jss.2023.111796&partnerID=40&md5=2a83ca80b393dc2b5162bbc3d66c8de3},
	abstract = {Measuring and evaluating source code similarity is a fundamental software engineering activity that embraces a broad range of applications, including but not limited to code recommendation, duplicate code, plagiarism, malware, and smell detection. This paper proposes a systematic literature review and meta-analysis on code similarity measurement and evaluation techniques to shed light on the existing approaches and their characteristics in different applications. We initially found over 10,000 articles by querying four digital libraries and ended up with 136 primary studies in the field. The studies were classified according to their methodology, programming languages, datasets, tools, and applications. A deep investigation reveals 80 software tools, working with eight different techniques on five application domains. Nearly 49% of the tools work on Java programs and 37% support C and C++, while there is no support for many programming languages. A noteworthy point was the existence of 12 datasets related to source code similarity measurement and duplicate codes, of which only eight datasets were publicly accessible. The lack of reliable datasets, empirical evaluations, hybrid methods, and focuses on multi-paradigm languages are the main challenges in the field. Emerging applications of code similarity measurement concentrate on the development phase in addition to the maintenance. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Code Clone; Code Recommendation; Plagiarism Detection; Source Code Similarity; Systematic Literature Review; Application Programs; C++ (programming Language); Cloning; Codes (symbols); Intellectual Property; Clone Detection Techniques; Code Clone; Code Recommendation; Code Similarities; Engineering Activities; Malwares; Plagiarism Detection; Similarity Measurements; Source Code Similarities; Systematic Literature Review; Digital Libraries},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Molléri2023,
	author = {Molléri, Jefferson Seide and Lassenius, Casper and Jørgensen, Magne},
	title = {Backsourcing of IT with focus on software development—A systematic literature review},
	year = {2023},
	journal = {Journal of Systems and Software},
	volume = {204},
	pages = {},
	doi = {10.1016/j.jss.2023.111771},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85164225673&doi=10.1016%2Fj.jss.2023.111771&partnerID=40&md5=e09932288806caf32d6384ea06251f78},
	abstract = {Context: Backsourcing is the process of insourcing previously outsourced activities. Backsourcing can be a viable alternative when companies experience environmental or strategic changes, or challenges with outsourcing. While outsourcing and related processes have been extensively studied, few studies report experiences with backsourcing. Objectives: We summarize the results of the research literature on backsourcing of IT, with a focus on software development. By identifying practically relevant experience, we present findings that may help companies considering backsourcing. In addition, we identify gaps in the current research literature and point out areas for future work. Method: Our systematic literature review (SLR) started with a search for empirical studies on the backsourcing of IT. From each study, we identified the context in which backsourcing occurred, the factors leading to the decision, the backsourcing process, and the outcomes of backsourcing. We employed inductive coding to extract textual data from the papers and qualitative cross-case analysis to synthesize the evidence. Results: We identified 17 papers that reported 26 cases of backsourcing, six of which were related to software development. The cases came from a variety of contexts. The most common reasons for backsourcing were improving quality, reducing costs, and regaining control of outsourced activities. We model the backsourcing process as containing five sub-processes: change management, vendor relationship management, competence building, organizational build-up, and transfer of ownership. We identified 14 positive outcomes and nine negative outcomes of backsourcing. We also aggregated the evidence and detailed three relationships of potential use to companies considering backsourcing. Finally, we have highlighted the knowledge areas of software engineering associated with the backsourcing of software development. Conclusion: The backsourcing of IT is a complex process; its implementation depends on the prior outsourcing relationship and other contextual factors. Our systematic literature review contributes to a better understanding of this process by identifying its components and their relationships based on the peer-reviewed literature. Our results can serve as a motivation and baseline for further research on backsourcing and provide guidelines and process fragments from which practitioners can benefit when they engage in backsourcing. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Backsourcing; Information Technology; Software Development; Software Engineering Management; Systematic Literature Review; Engineering Research; Quality Control; Software Design; 'current; Backsourcing; Empirical Studies; Environmental Change; Insourcing; Software Engineering Management; Strategic Challenges; Strategic Changes; Systematic Literature Review; Textual Data; Outsourcing},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@CONFERENCE{Lu2023,
	author = {Lu, Yuting and Alexandru, Cristina Adriana},
	title = {Systematic Review of UML Diagramming Software Tools for Higher Education Software Engineering Courses},
	year = {2023},
	pages = {},
	doi = {10.1145/3610969.3611123},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85174543641&doi=10.1145%2F3610969.3611123&partnerID=40&md5=c98031cf4302c886e07565cfdf7088b6},
	abstract = {The Unified Modelling Language (UML) is a set of graphical notations underpinned by a single meta-model that aid in the description and design of software systems. Learning to draw UML diagrams is an important objective of higher education (HE) software engineering (SE) courses. To this end, UML diagramming software tools can facilitate the application of the UML notation in drawing complex diagrams collaboratively between students. Numerous UML diagramming tools are available on the market nowadays, which makes it difficult for academics and students to choose the best tool for their needs, and no thorough evaluation of such tools for education is available. This project conducted a systematic review of UML diagramming tools that are freely available or available for a trial, from the point of view of meeting desirable diagramming and collaboration features for use in HE SE courses. This paper presents the methodology and results of this systematic review, before concluding on the best tools overall and for different features, and proposing a set of guidelines for the design of better UML diagramming tools for HE SE courses. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Higher Education; Software Engineering; Systematic Review; Uml Diagramming Tools; Application Programs; Education Computing; Engineering Education; Students; Unified Modeling Language; Design Of Softwares; Education Softwares; Graphical Notation; High Educations; Meta Model; Metamodeling; Software Engineering Course; Software-tools; Systematic Review; Unified Modeling Language Diagramming Tool; Curricula},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Kleinwaks2023675,
	author = {Kleinwaks, Howard and Batchelor, Ann and Bradley, Thomas H.},
	title = {Technical debt in systems engineering—A systematic literature review},
	year = {2023},
	journal = {Systems Engineering},
	volume = {26},
	number = {5},
	pages = {675 - 687},
	doi = {10.1002/sys.21681},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85152246393&doi=10.1002%2Fsys.21681&partnerID=40&md5=93f161f8b369d7e07f1fa6344c54ed77},
	abstract = {The metaphor of “technical debt” is used in software engineering to describe technical solutions that may be pragmatic in the near-term but may have a negative long-term impact. Similar decisions and similar dynamics are present in the field of systems engineering. This work investigates the current body of knowledge to identify if, and how, the technical debt metaphor is used within the systems engineering field and which systems engineering lifecycle stages are most susceptible to technical debt. A systematic literature review was conducted on 354 papers in February 2022, of which 18 were deemed relevant for inclusion in the study. The results of the systematic literature review show that the technical debt metaphor is not prevalent within systems engineering research and that existing research is limited to specific fields and theoretical discussions. This paper concludes with recommendations for future work to establish a research agenda on the identification and management of technical debt within systems engineering. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Literature Review; Systems Engineering; Technical Debt; Engineering Research; Software Engineering; 'current; Body Of Knowledge; Engineering Fields; Life Cycle Stages; Literature Reviews; Long-term Impacts; Systematic Literature Review; Systems Engineering Lifecycle; Technical Debts; Technical Solutions; Life Cycle},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Chiroma20231,
	author = {Chiroma, Haruna and Abawjy, Jemal H.},
	title = {Computing Research Survival Manual: A practical handbook for beginners},
	year = {2023},
	pages = {1 - 52},
	doi = {10.1088/978-0-7503-5017-4},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85172700496&doi=10.1088%2F978-0-7503-5017-4&partnerID=40&md5=02f528985392bb2ac9858bd3ef541ede},
	abstract = {Research methodology is the core component of any valid research. This book provides a guide to conducting research within the broad field of computing. This book is a survival manual that contains a detailed research procedure from the perspective of different computing disciplines in place of the commonly written books on general research methodology. The book can equip the readers with an understanding of identifying research problem, problem formulation, extensive literature review (critical and systematic), methodologies, sources of research datasets, computing research tools, trending research areas in computing, academic databases housing computing literature, research ethics in computing, how to overcome potential challenges in a journey to research in computing and provide tips/skills required for writing journal manuscript for publication in high impact journals. Key features • Practical • Includes pedagogical features including case studies, end of chapter summaries and pictorial representation of concepts • Presents research methodology from the perspective of different computing disciplines • Presents guide on conducting extensive systematic literature review and problem formulation according to computing guidelines • Presents research tools for easing the conduct of research • Overview of datasets, sources of datasets and data management techniques • Presents clear differences among computer science, Information technology, information science, computer engineering, cybersecurity, data science, and software engineering in terms of discipline and research. © 2023 Elsevier B.V., All rights reserved.},
	type = {Book},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Stradowski2023,
	author = {Stradowski, Szymon and Madeyski, Lech},
	title = {Industrial applications of software defect prediction using machine learning: A business-driven systematic literature review},
	year = {2023},
	journal = {Information and Software Technology},
	volume = {159},
	pages = {},
	doi = {10.1016/j.infsof.2023.107192},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85150041533&doi=10.1016%2Fj.infsof.2023.107192&partnerID=40&md5=1bdf7de187ebfdf7472ae1e5174801d5},
	abstract = {Context: Machine learning software defect prediction is a promising field of software engineering, attracting a great deal of attention from the research community; however, its industry application tents to lag behind academic achievements. Objective: This study is part of a larger project focused on improving the quality and minimising the cost of software testing of the 5G system at Nokia, and aims to evaluate the business applicability of machine learning software defect prediction and gather lessons learnt. Methods: The systematic literature review was conducted on journal and conference papers published between 2015 and 2022 in popular online databases (ACM, IEEE, Springer, Scopus, Science Direct, and Google Scholar). A quasi-gold standard procedure was used to validate the search, and SEGRESS guidelines were used for transparency, reporting, and replicability. Results: We have selected and analysed 32 publications out of 397 found by our automatic search (and seven by snowballing). We have identified highly relevant evidence of methods, features, frameworks, and datasets used. However, we found a minimal emphasis on practical lessons learnt and cost consciousness — both vital from a business perspective. Conclusion: Even though the number of machine learning software defect prediction studies validated in the industry is increasing (and we were able to identify several excellent papers on studies performed in vivo), there is still not enough practical focus on the business aspects of the effort that would help bridge the gap between the needs of the industry and academic research. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Effort And Cost Minimisation; Industry; Machine Learning; Real-world; Software Defect Prediction; Systematic Literature Review; 5g Mobile Communication Systems; Application Programs; Costs; Defects; Forecasting; Software Testing; Cost Minimization; Effort And Cost Minimization; Industry Applications; Lesson Learnt; Machine Learning Software; Machine-learning; Real-world; Research Communities; Software Defect Prediction; Systematic Literature Review; Machine Learning},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@CONFERENCE{Momin2023,
	author = {Momin, Khondhaker Al and Kittur, Javeed and Rouf, Tahrima B. and Sadri, Arif Mohaimin},
	title = {Exploring the Use of Social Media in Engineering Education-Preliminary Findings from a Systematic Literature Review},
	year = {2023},
	journal = {ASEE Annual Conference and Exposition, Conference Proceedings},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85172166249&partnerID=40&md5=2b18994869bcc9f4b8b0774d71792f28},
	abstract = {Social media is an interactive platform that allows individuals to share their ideas, beliefs, and information to express their thoughts and opinions on different aspects. Social media has been gaining recognition and acceptance in engineering education, and it has been shown to increase student participation, engagement, and learning. To create guidelines for the effective use of social media platforms in engineering education, this theory paper primarily focuses on analyzing the various research studies done in the field by summarizing the different research topics, elements of social media used, and analysis techniques, among others. The articles for this study have been retrieved from various databases, including Scopus, Science Direct, Web of Science, Wiley Online Library, ERIC, IEEE Xplore Library, and Google Scholar. As a part of this literature search, the search phrases used to retrieve articles from these databases are Facebook + Engineering, Instagram + Engineering, and Twitter + Engineering. The review process involved five distinct steps. Initially, all articles from various databases were gathered and compared to eliminate any duplicates, resulting in a total of 1821 articles. Articles that met the exclusion criteria, such as those published before 2017, articles not focused on engineering, articles in languages other than English, articles with a focus other than Facebook, Instagram, and Twitter, and work-in-progress articles, were removed from the final list. In the second step, these 1821 articles were screened based on their titles and abstracts to assess their relevance and applicability to the study. Out of these, 65 articles were selected for further consideration. Articles not meeting the relevance and applicability criteria were excluded from the study. In the third step, the remaining 48 articles were screened based on their full text to ensure they met the exclusion criteria. In the fourth step, the 21 articles that remained were critically reviewed to extract the relevant information necessary for the analysis. Information such as research questions, research design, data collection, and data analysis, among others, were retrieved from the articles and consolidated in a separate file. Finally, this consolidated information was further analyzed and synthesized to generate observations and trends. The findings indicate that Facebook, Instagram, and Twitter have been used as a learning environment in a few engineering disciplines, including software engineering, civil engineering, mechanical engineering, and electronics engineering. More than half of the sampled articles used quantitative research designs and descriptive statistics for data analysis, and Facebook emerged as the most preferred choice of researchers among the sampled articles. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Computer Aided Instruction; Data Acquisition; Data Handling; Database Systems; Digital Libraries; Search Engines; Social Networking (online); Facebook; Interactive Platform; Research Designs; Research Studies; Social Media; Social Media Platforms; Student Engagement; Student Learning; Student Participation; Systematic Literature Review; Engineering Education},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{2023,
	title = {Proceedings of EASE 2023 - Evaluation and Assessment in Software Engineering},
	year = {2023},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85162269648&partnerID=40&md5=7b430900b380e8fa9f6655755d52f73b},
	abstract = {The proceedings contain 75 papers. The topics discussed include: a systematic literature review on client selection in federated learning; investigating software engineering artifacts in DevOps through the lens of boundary objects; impact of architectural smells on software performance: an exploratory study; code reviewer recommendation for architecture violations: an exploratory study; measuring user experience of adaptive user interfaces using EEG: a replication study; on the energy consumption and performance of WebAssembly binaries across programming languages and runtimes in IoT; on the reliability of the area under the ROC curve in empirical software engineering; understanding self-efficacy in software engineering industry: an interview study; do developers benefit from recommendations when repairing inconsistent design models? a controlled experiment; and analyzing the resource usage overhead of mobile app development frameworks. © 2023 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Patnaik2023,
	author = {Patnaik, Nikhil and Dwyer, Andrew C. and Hallett, Joseph and Rashid, Awais},
	title = {SLR: From Saltzer and Schroeder to 2021...47 Years of Research on the Development and Validation of Security API Recommendations},
	year = {2023},
	journal = {ACM Transactions on Software Engineering and Methodology},
	volume = {32},
	number = {3},
	pages = {},
	doi = {10.1145/3561383},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85162042025&doi=10.1145%2F3561383&partnerID=40&md5=706534f20e5aafd7d89bf1d1d3fbd92b},
	abstract = {Producing secure software is challenging. The poor usability of security Application Programming Interfaces (APIs) makes this even harder. Many recommendations have been proposed to support developers by improving the usability of cryptography libraries - rooted in wider best practice guidance in software engineering and API design. In this SLR, we systematize knowledge regarding these recommendations. We identify and analyze 65 papers, offering 883 recommendations. Through thematic analysis, we identify seven core ways to improve usability of APIs. Most of the recommendations focus on helping API developers to construct and structure their code and make it more usable and easier for programmers to understand. There is less focus, however, on documentation, writing requirements, code quality assessment, and the impact of organizational software development practices. By tracing and analyzing paper ancestry, we map how this knowledge becomes validated and translated over time. We find that very few API usability recommendations are empirically validated, and that recommendations specific to usable security APIs lag even further behind. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Additional Key Words And Phrasesapi; Recommendations; Security; Slr; Usability; Application Programming Interfaces (api); Codes (symbols); Usability Engineering; Additional Key Word And Phrasesapi; Applications Programming Interfaces; Best Practices; Key Words; Recommendation; Secure Software; Security; Security Application; Slr; Usability; Software Design},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Bronze Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Al-Sai2023,
	author = {Al-Sai, Zaher Ali and Husin, Mohd Heikal and Syed-Mohamad, Sharifah Mashita and Abdullah, Rosni B. and Zitar, Raed Abu and Abualigah, Laith Mohammad Qasim and Gandomi, Amir H.},
	title = {Big Data Maturity Assessment Models: A Systematic Literature Review},
	year = {2023},
	journal = {Big Data and Cognitive Computing},
	volume = {7},
	number = {1},
	pages = {},
	doi = {10.3390/bdcc7010002},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85147362501&doi=10.3390%2Fbdcc7010002&partnerID=40&md5=99f4b9e9c12e546292065002c08128a0},
	abstract = {Big Data and analytics have become essential factors in managing the COVID-19 pandemic. As no company can escape the effects of the pandemic, mature Big Data and analytics practices are essential for successful decision-making insights and keeping pace with a changing and unpredictable marketplace. The ability to be successful in Big Data projects is related to the organization’s maturity level. The maturity model is a tool that could be applied to assess the maturity level across specific key dimensions, where the maturity levels indicate an organization’s current capabilities and the desirable state. Big Data maturity models (BDMMs) are a new trend with limited publications published as white papers and web materials by practitioners. While most of the related literature might not have covered all of the existing BDMMs, this systematic literature review (SLR) aims to contribute to the body of knowledge and address the limitations in the existing literature about the existing BDMMs, assessment dimensions, and tools. The SLR strategy in this paper was conducted based on guidelines to perform SLR in software engineering by answering three research questions: (1) What are the existing maturity assessment models for Big Data? (2) What are the assessment dimensions for Big Data maturity models? and (3) What are the assessment tools for Big Data maturity models? This SLR covers the available BDMMs written in English and developed by academics and practitioners (2007–2022). By applying a descriptive qualitative content analysis method for the reviewed publications, this SLR identified 15 BDMMs (10 BDMMs by practitioners and 5 BDMMs by academics). Additionally, this paper presents the limitations of existing BDMMs. The findings of this paper could be used as a grounded reference for assessing the maturity of Big Data. Moreover, this paper will provide managers with critical insights to select the BDMM that fits within their organization to support their data-driven decisions. Future work will investigate the Big Data maturity assessment dimensions towards developing a new Big Data maturity model. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Big Data; Big Data Analytics; Big Data Maturity Model; Capability Maturity Model (cmm); Covid-19 Pandemic; Critical Success Factors; Maturity Model; Readiness Assessment; Systematic Literature Review; Big Data; Data Analytics; Decision Making; Software Engineering; Big Data Analytic; Big Data Maturity Model; Capability Maturity Model; Capability Maturity Models; Covid-19 Pandemic; Critical Success Factor; Data Analytics; Data Maturity; Maturity Model; Readiness Assessment; Success Factors; Systematic Literature Review; Covid-19},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{García2023,
	author = {García, Sergio and Strüber, Daniel G. and Brugali, Davide and Di Fava, Alessandro and Pelliccione, Patrizio and Berger, Thorsten},
	title = {Software variability in service robotics},
	year = {2023},
	journal = {Empirical Software Engineering},
	volume = {28},
	number = {2},
	pages = {},
	doi = {10.1007/s10664-022-10231-5},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85144631217&doi=10.1007%2Fs10664-022-10231-5&partnerID=40&md5=3c3a3a017140ca633b1c09e858875b54},
	abstract = {Robots artificially replicate human capabilities thanks to their software, the main embodiment of intelligence. However, engineering robotics software has become increasingly challenging. Developers need expertise from different disciplines as well as they are faced with heterogeneous hardware and uncertain operating environments. To this end, the software needs to be variable—to customize robots for different customers, hardware, and operating environments. However, variability adds substantial complexity and needs to be managed—yet, ad hoc practices prevail in the robotics domain, challenging effective software reuse, maintenance, and evolution. To improve the situation, we need to enhance our empirical understanding of variability in robotics. We present a multiple-case study on software variability in the vibrant and challenging domain of service robotics. We investigated drivers, practices, methods, and challenges of variability from industrial companies building service robots. We analyzed the state-of-the-practice and the state-of-the-art—the former via an experience report and eleven interviews with two service robotics companies; the latter via a systematic literature review. We triangulated from these sources, reporting observations with actionable recommendations for researchers, tool providers, and practitioners. We formulated hypotheses trying to explain our observations, and also compared the state-of-the-art from the literature with the-state-of-the-practice we observed in our cases. We learned that the level of abstraction in robotics software needs to be raised for simplifying variability management and software integration, while keeping a sufficient level of customization to boost efficiency and effectiveness in their robots’ operation. Planning and realizing variability for specific requirements and implementing robust abstractions permit robotic applications to operate robustly in dynamic environments, which are often only partially known and controllable. With this aim, our companies use a number of mechanisms, some of them based on formalisms used to specify robotic behavior, such as finite-state machines and behavior trees. To foster software reuse, the service robotics domain will greatly benefit from having software components—completely decoupled from hardware—with harmonized and standardized interfaces, and organized in an ecosystem shared among various companies. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Autonomous And (self-)adaptive Systems; Robotics Software Engineering; Service Robots; Variability; Abstracting; Adaptive Systems; Intelligent Robots; Mobile Robots; Robot Programming; Autonomous And (self-)adaptive System; Robotic Software Engineering; Robotic Softwares; Self-adaptive System; Service Robotics; Service Robots; Software Variabilities; Software-reuse; State Of The Practice; Variability; Computer Software Reusability},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Final Open Access; Green Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Kitchenham20231273,
	author = {Kitchenham, Barbara Ann and Madeyski, Lech and Budgen, David},
	title = {SEGRESS: Software Engineering Guidelines for REporting Secondary Studies},
	year = {2023},
	journal = {IEEE Transactions on Software Engineering},
	volume = {49},
	number = {3},
	pages = {1273 - 1298},
	doi = {10.1109/TSE.2022.3174092},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85132534569&doi=10.1109%2FTSE.2022.3174092&partnerID=40&md5=360debd5b4eb6fe54f8180493e2e2a9d},
	abstract = {Context: Several tertiary studies have criticized the reporting of software engineering secondary studies. Objective: Our objective is to identify guidelines for reporting software engineering (SE) secondary studies which would address problems observed in the reporting of software engineering systematic reviews (SRs). Method: We review the criticisms of SE secondary studies and identify the major areas of concern. We assess the PRISMA 2020 (Preferred Reporting Items for Systematic Reviews and Meta-Analyses) statement as a possible solution to the need for SR reporting guidelines, based on its status as the reporting guideline recommended by the Cochrane Collaboration whose SR guidelines were a major input to the guidelines developed for SE. We report its advantages and limitations in the context of SE secondary studies. We also assess reporting guidelines for mapping studies and qualitative reviews, and compare their structure and content with that of PRISMA 2020. Results: Previous tertiary studies confirm that reports of secondary studies are of variable quality. However, ad hoc recommendations that amend reporting standards may result in unnecessary duplication of text. We confirm that the PRISMA 2020 statement addresses SE reporting problems, but is mainly oriented to quantitative reviews, mixed-methods reviews and meta-analyses. However, we show that the PRISMA 2020 item definitions can be extended to cover the information needed to report mapping studies and qualitative reviews. Conclusions: In this paper and its Supplementary Material, we present and illustrate an integrated set of guidelines called SEGRESS (Software Engineering Guidelines for REporting Secondary Studies), suitable for quantitative systematic reviews (building upon PRISMA 2020), mapping studies (PRISMA-ScR), and qualitative reviews (ENTREQ and RAMESES), that addresses reporting problems found in current SE SRs. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Evidence-based Software Engineering; Mapping Studies; Mixed-methods Reviews; Prisma 2020; Quality Assessment; Quality Reviews; Reporting Guidelines; Risk Of Bias; Systematic Reviews; Threats To Validity; Risk Assessment; Software Engineering; Evidence Based Software Engineering; Guideline; Mapping Studies; Mixed Method; Mixed-method Review; Prisma 2020; Quality Assessment; Quality Reviews; Reporting Guideline; Risk Of Bias; Software; Systematic; Systematic Review; Threat To Validity; Mapping},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Sjøberg20231374,
	author = {Sjøberg, Dag I.K. and Bergersen, Gunnar Rye},
	title = {Construct Validity in Software Engineering},
	year = {2023},
	journal = {IEEE Transactions on Software Engineering},
	volume = {49},
	number = {3},
	pages = {1374 - 1396},
	doi = {10.1109/TSE.2022.3176725},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85130827829&doi=10.1109%2FTSE.2022.3176725&partnerID=40&md5=3124690bae4059522127892f53cf2bd0},
	abstract = {Empirical research aims to establish generalizable claims from data. Such claims may involve concepts that must be measured indirectly by using indicators. Construct validity is concerned with whether one can justifiably make claims at the conceptual level that are supported by results at the operational level. We report a quantitative analysis of the awareness of construct validity in the software engineering literature between 2000 and 2019 and a qualitative review of 83 articles about human-centric experiments published in five high-quality journals between 2015 and 2019. Over the two decades, the appearance in the literature of the term construct validity increased sevenfold. Some of the reviewed articles we reviewed employed various ways to ensure that the indicators span the concept in an unbiased manner. We also found articles that reuse formerly validated constructs. However, the articles disagree about how to define construct validity. Several interpret construct validity excessively by including threats to internal, external, or statistical conclusion validity. A few articles also include fundamental challenges of a study, such as cheating and misunderstanding of experiment material. The diversity of topics included as threats to construct validity calls for a more minimalist approach. Based on the review, we propose seven guidelines to improve how construct validity is handled and reported in software engineering. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Research; Guidelines; Measurement; Research Quality; Systematic Review; Object Oriented Programming; Reviews; Complexity Theory; Empirical Research; Guideline; Marine Vehicles; Object Oriented Modelling; Research Quality; Software Measurement; Systematic; Systematic Review; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Croft20231044,
	author = {Croft, Roland and Xie, Yongzheng and Ali Babar, Muhammad Ali},
	title = {Data Preparation for Software Vulnerability Prediction: A Systematic Literature Review},
	year = {2023},
	journal = {IEEE Transactions on Software Engineering},
	volume = {49},
	number = {3},
	pages = {1044 - 1063},
	doi = {10.1109/TSE.2022.3171202},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85129673347&doi=10.1109%2FTSE.2022.3171202&partnerID=40&md5=bc828f34245d82dd693ce30d3a6e5acc},
	abstract = {Software Vulnerability Prediction (SVP) is a data-driven technique for software quality assurance that has recently gained considerable attention in the Software Engineering research community. However, the difficulties of preparing Software Vulnerability (SV) related data is considered as the main barrier to industrial adoption of SVP approaches. Given the increasing, but dispersed, literature on this topic, it is needed and timely to systematically select, review, and synthesize the relevant peer-reviewed papers reporting the existing SV data preparation techniques and challenges. We have carried out a Systematic Literature Review (SLR) of SVP research in order to develop a systematized body of knowledge of the data preparation challenges, solutions, and the needed research. Our review of the 61 relevant papers has enabled us to develop a taxonomy of data preparation for SVP related challenges. We have analyzed the identified challenges and available solutions using the proposed taxonomy. Our analysis of the state of the art has enabled us identify the opportunities for future research. This review also provides a set of recommendations for researchers and practitioners of SVP approaches. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Data Preparation; Data Quality; Software Vulnerability Prediction; Systematic Literature Review; Computer Software Selection And Evaluation; Data Structures; Quality Assurance; Taxonomies; Code; Data Driven Technique; Data Integrity; Data Preparation; Data Quality; Software; Software Vulnerabilities; Software Vulnerability Prediction; Systematic; Systematic Literature Review; Forecasting},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Pieva2023533,
	author = {Pieva, Lucas and Bernardino, Maicon},
	title = {Trends and Research in Digital Game Project Management: A Systematic Literature Review},
	year = {2023},
	journal = {Journal on Interactive Systems},
	volume = {14},
	number = {1},
	pages = {533 - 545},
	doi = {10.5753/jis.2023.3196},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85205003030&doi=10.5753%2Fjis.2023.3196&partnerID=40&md5=af91ad72d56db45bb9e2afc6cbd47c3f},
	abstract = {Given the rapid growth and high demand in the entertainment industry, it is crucial to implement best practices in digital game project management to ensure successful projects within the Triple Constraint of costs, time, and scope. This study aims to provide a valuable empirical reference for game project professionals and researchers by identifying the primary methods, processes, and methodologies used in digital game project management. Using a systematic literature review (SLR) approach, we analyzed 65 primary studies out of an initial pool of 6,658, covering the period from 2010 to 2021. Our results reveal that the most frequently mentioned artifact groups were models (34.1%) and processes (31.7%), and the majority of authors were from Brazil and Indonesia. Overall our findings highlight the prevalence of game projects that do not adopt project management practices, particularly among indie game teams. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Digital Game; Indie Game; Project Management; Slr; Software Engineering; Systematic Literature Review},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Lakshman202333,
	author = {Lakshman, Shashank Bangalore and Eisty, Nasir U.},
	title = {Software Engineering Approaches for TinyML based IoT Embedded Vision: A Systematic Literature Review},
	year = {2023},
	pages = {33 - 40},
	doi = {10.1145/3528227.3528569},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85136221574&doi=10.1145%2F3528227.3528569&partnerID=40&md5=395fbe4e290806816db0cc1b6925d544},
	abstract = {Internet of Things (IoT) has catapulted human ability to control our environments through ubiquitous sensing, communication, computation, and actuation. Over the past few years, IoT has joined forces with Machine Learning (ML) to embed deep intelligence at the far edge. TinyML (Tiny Machine Learning) has enabled the deployment of ML models for embedded vision on extremely lean edge hardware, bringing the power of IoT and ML together. However, TinyML powered embedded vision applications are still in a nascent stage, and they are just starting to scale to widespread real-world IoT deployment. To harness the true potential of IoT and ML, it is necessary to provide product developers with robust, easy-to-use software engineering (SE) frameworks and best practices that are customized for the unique challenges faced in TinyML engineering. Through this systematic literature review, we aggregated the key challenges reported by TinyML developers and identified state-of-art SE approaches in large-scale Computer Vision, Machine Learning, and Embedded Systems that can help address key challenges in TinyML based IoT embedded vision. In summary, our study draws synergies between SE expertise that embedded systems developers and ML developers have independently developed to help address the unique challenges in the engineering of TinyML based IoT embedded vision. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Embedded Vision; Iot; Software Engineering; Systematic Literature Review; Tinyml; Deep Learning; Embedded Systems; Learning Systems; Software Engineering; Embedded Visions; Embedded-system; Human Abilities; Iot; Machine Learning Models; Machine-learning; Power; Systematic Literature Review; Tinyml; Vision Applications; Internet Of Things},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Bronze Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Verbruggen2023111,
	author = {Verbruggen, Charlotte and Snoeck, Monique},
	title = {Practitioners’ experiences with model-driven engineering: a meta-review},
	year = {2023},
	journal = {Software and Systems Modeling},
	volume = {22},
	number = {1},
	pages = {111 - 129},
	doi = {10.1007/s10270-022-01020-1},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146282245&doi=10.1007%2Fs10270-022-01020-1&partnerID=40&md5=1818ccd9c9be080cf2940b4c7d215b84},
	abstract = {The Object Management Group introduced the Model-Driven Architecture in 2001. Since then, the research community has embraced model-driven engineering (MDE), but to a lesser extent than practitioners had hoped. A good awareness of practitioners’ challenges, particularly with modeling, is required to ensure the relevance of a research agenda. Therefore, this study conducts a meta-review on the state of practice in using modeling languages for software engineering over the last five years using Kitchenham’s guidelines. This study serves as an orientation within the research field and a basis for further research. It contributes to the literature by focusing on publications discussing the practical use of modeling languages and the benefits and problems perceived by practitioners. The main finding of this review is that practitioners benefit from MDE in the following ways: it is beneficial for several stakeholders; it saves cost; it is easy to use; it improves productivity, quality, and understanding of the system; and it provides support for software development activities. However, practitioners continue to face several serious challenges. The most frequently reported issues are the missing tool functionalities. Many studies have found that adhering to the Physics of Notation principles would improve modeling languages. Other findings include that modeling is mostly used for documentation and requirements elicitation, and UML is the most often used. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Bpmn; Conceptual Modeling; Meta-review; Model-driven Engineering; Modeling In Practice; Systematic Literature Review; Uml; Software Architecture; Software Design; Bpmn; Conceptual Model; Meta-review; Model Driven Architectures; Model-driven Engineering; Modeling In Practice; Object Management; Research Communities; Systematic Literature Review; Uml; Modeling Languages},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Kitchenham2023872,
	author = {Kitchenham, Barbara Ann and Madeyski, Lech and Budgen, David},
	title = {How Should Software Engineering Secondary Studies Include Grey Material?},
	year = {2023},
	journal = {IEEE Transactions on Software Engineering},
	volume = {49},
	number = {2},
	pages = {872 - 882},
	doi = {10.1109/TSE.2022.3165938},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85128295733&doi=10.1109%2FTSE.2022.3165938&partnerID=40&md5=665db8a169ec82a00b441a021bb1426a},
	abstract = {Context: Recent papers have proposed the use of grey literature (GL) and multivocal reviews. These papers have raised issues about the practices used for systematic reviews (SRs) in software engineering (SE) and suggested that there should be changes to the current SR guidelines. Objective: To investigate whether current SR guidelines need to be changed to support GL and multivocal reviews. Method: We discuss the definitions of GL and the importance of GL and of industry-based field studies in SE SRs. We identify properties of SRs that constrain the material used in SRs: a) the nature of primary studies; b) the requirements of SRs to be auditable, traceable, and reproducible; and explain why these requirements restrict the use of blogs in SRs. Results: SR guidelines have always considered GL as a possible source of primary studies and have never supported exclusion of field studies that incorporate the practitioners' viewpoint. However, the concept of GL, which was meant to refer to documents that were not formally published, is now being extended to information from sources such as blogs/tweets/Q&A posts. Thus, it might seem that SRs do not make full use of GL because they do not include such information. However, the unit of analysis for an SR is the primary study. Thus, it is not the source but the type of information that is important. Any report describing a rigorous empirical evaluation is a candidate primary study. Whether it is actually included in an SR depends on the SR eligibility criteria. However, any study that cannot be guaranteed to be publicly available in the long term should not be used as a primary study in an SR. This does not prevent such information from being aggregated in surveys of social media and used in the context of evidence-based software engineering (EBSE). Conclusions: Current guidelines for SRs do not require extensions, but their scope needs to be better defined. SE researchers require guidelines for analysing social media posts (e.g., blogs, tweets, vlogs), but these should be based on qualitative primary (not secondary) study guidelines. SE researchers can use mixed-methods SRs and/or the fourth step of EBSE to incorporate findings from social media surveys with those from SRs and to develop industry-relevant recommendations. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Evidence-based Software Engineering; Grey Literature; Mixed-methods Reviews; Multivocal Reviews; Systematic Mapping Studies; Systematic Reviews; Blogs; Social Sciences Computing; Software Engineering; Surveys; Evidence Based Software Engineering; Government; Grey Literature; Guideline; Mixed Method; Mixed-method Review; Multivocal Review; Social Networking (online); Systematic; Systematic Mapping Studies; Systematic Review},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Final Open Access; Green Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Ullrich2023,
	author = {Ullrich, Meike and Houy, Constantin and Stottrop, Tobias and Striewe, Michael and Willems, Brian and Fettke, Peter and Loos, Peter and Oberweis, Andreas},
	title = {Automated Assessment of Conceptual Models in Education: A Systematic Literature Review},
	year = {2023},
	journal = {Enterprise Modelling and Information Systems Architectures},
	volume = {18},
	pages = {},
	doi = {10.18417/emisa.18.2},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85165334947&doi=10.18417%2Femisa.18.2&partnerID=40&md5=9c326fea449289d0e70027bed9cafdb2},
	abstract = {In Computer Science, Software Engineering, Business Informatics or Information Systems, conceptual modeling is an important tool and as such also contained in the respective curricular recommendations. Especially in large university courses, an automated assessment of models can improve the quality of teaching and learning. While there are many different approaches to automatically assess conceptual models, these approaches, however, often only tackle a single aspect or a single type of conceptual model. In this paper, we aim to take a comprehensive perspective on the topic and shed light on the current state of the art and technique. Furthermore, as assessment approaches have to be developed in accordance with appropriate teaching or learning activities and desired learning outcomes, we inquire in which settings automated assessment approaches are included and to which extent didactic aspects are taken into account. To this end, we have conducted a systematic literature review in which we identified 110 relevant publications on the topic which we have analyzed in a structured way. The results provide answers to five relevant research questions and pinpoint open issues which should be inquired in further research. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Automated Assessment; Conceptual Models; Didactics; Education; Modeling Languages; Systematic Literature Review; Technology-enhanced Learning},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Barisch-Fritz2023,
	author = {Barisch-Fritz, Bettina and Nigg, Claudio Renato and Barisch, Marc and Woll, Alexander},
	title = {App development in a sports science setting: A systematic review and lessons learned from an exemplary setting to generate recommendations for the app development process},
	year = {2023},
	journal = {Frontiers in Sports and Active Living},
	volume = {4},
	pages = {},
	doi = {10.3389/fspor.2022.1012239},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146396570&doi=10.3389%2Ffspor.2022.1012239&partnerID=40&md5=392c60ead9047a8c6e8c794444780518},
	abstract = {The digital health sector is rapidly growing. With only 4% of publishers out of academic settings, it is under-represented in app development. The objective of this study is to assess the current state of app development with a systematic review and a survey within an exemplary academic setting along the following research questions: (Q1) Are software engineering principles sufficiently known in the sports science app development context? (Q2) Is the role of sports scientists in the context of app development sufficiently understood? The systematic review was conducted by two independent reviewers within databases Pubmed, Scopus, Web of Science, and IEEE Xplore. The PICO schema was used to identify the search term. We subtracted information about five main topics: development process, functional requirements and features, security, technology, and dissemination. The survey was developed by a multidisciplinary team and focused on five main topics. Out of 701 matches, 21 were included in the review. The development process was only described in seven studies. Functional requirements and features were considered in 11 studies, security in 3, technology in 13, and dissemination in 12 with varying details. Twelve respondents [mean age 33(7) years, 58% women] replied to the survey. The survey revealed limited knowledge in realization of security measures, underlying technology and source code management, and dissemination. Respondents were able to provide input on development processes as well as functional requirements and features. The involvement of domain experts is given in seven review studies and described in two more. In 50% of survey respondents, the role in app development is defined as a research assistant. We conclude that there is a varying degree of software engineering knowledge in the sports science app development context (Q1). Furthermore, we found that the role of sports scientists within app development is not sufficiently defined (Q2). We present recommendations for improving the success probability and sustainability of app development and give orientation on the potential roles of sports scientists as domain experts. Future research should focus on the generalizability of these findings and the reporting of the app development process. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Barriers Of Implementing Apps; Checklist; Digital Health; Digitalization; Mobile Applications; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Final Open Access; Green Open Access}
}

@CONFERENCE{Camarillo-Villa202335,
	author = {Camarillo-Villa, José Daniel and Limón, Xavier and Cortés-Verdín, Karen and Sánchez-García, Ángel J.},
	title = {Functional Programming Oriented Software Design: A Systematic Literature Review},
	year = {2023},
	pages = {35 - 44},
	doi = {10.1109/CONISOFT58849.2023.00015},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85198228790&doi=10.1109%2FCONISOFT58849.2023.00015&partnerID=40&md5=4755fb340390ea21b401542df4565fc5},
	abstract = {In recent years, there has been a renewed interest in Functional Programming (FP) as it has become a popular programming paradigm in several languages, including Python and JavaScript. Additionally, Functional Programming is the primary paradigm for increasingly used languages such as Clo-jure and Haskell, which have taken on significant importance for researchers and developers alike. FP has several benefits in software development, providing readable, maintainable, and scalable systems. However, despite these benefits, most of the literature related to software design currently lacks clear and detailed specifications concerning the functional paradigm. In contrast, Object-Oriented Programming, for instance, possesses a vast array of design resources and tools. This and other challenges can make the adoption of FP difficult for developers who seek to integrate the FP paradigm in their systems. The objective of the research work is to present the state of the art of FP-oriented software design, covering method-ologies, practices, and artefacts; analysing different proposals, and identifying open challenges. To arhieve the objective, a Systematic Literature Review (SRL) was conducted, following the Kitchenham's guidelines. We found a total of 14 primary studies published between 2012 and 2022, covering different artefacts and practices for software design under FP. Although Software design under FP is currently a little-explored topic in Software Engineering, its importance in software development is undeniable, and its use is expected to continue growing, being an interesting opportunity area for future research. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Design; Functional Programming; Software Design; Systematic Literature Review; Engineering Research; Functional Programming; High Level Languages; Object Oriented Programming; Design Resources; Design Tool; Haskell; Javascript; Objectoriented Programming (oop); Programming Paradigms; Scalable Systems; State Of The Art; Systematic Literature Review; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Pale-Parra2023132,
	author = {Pale-Parra, Daniel and Perez-Salazar, Christian and Sánchez-García, Ángel J. and Ocharán-Hernández, Jorge Octavio},
	title = {Web Systems for the Development of Computational Thinking in Software Engineering Students: A Systematic Literature Review},
	year = {2023},
	pages = {132 - 139},
	doi = {10.1109/CONISOFT58849.2023.00026},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85198223075&doi=10.1109%2FCONISOFT58849.2023.00026&partnerID=40&md5=1e482c07894c88072fef33d7386a9383},
	abstract = {Many undergraduate students in software engineering have trouble developing computational thinking. Several tools have been reported in the literature to support the development of computational thinking. This paper reports a Systematic Literature Review to present the characteristics that have made successful web systems that support the development of computational thinking in recent years and the reported limitations. Eighteen primary studies were selected where the strategies used are usually learning through lessons, practicing with exercises, working through games, and using feedback. The systems found have been used at different elementary, middle, high school, and bachelor's degree levels. Finally, the main limitations reported in using these systems were mainly the difficulty of the topics, the previous knowledge that the students should have, the attitude that the students showed and the lack of motivation. Finally, we make some recommendations to software engineering curriculum planners and programming teachers about systems for developing computational thinking. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Computational Thinking; Learning; Software Engineering; Students; Web System; Curricula; Engineering Education; Learning Systems; Software Engineering; Websites; Bachelor's Degree; Computational Thinkings; Higher School; Learning; Software Engineering Curricula; Software Engineering Students; Systematic Literature Review; Teachers'; Undergraduate Students; Web System; Students},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Arredondo-Reyes202345,
	author = {Arredondo-Reyes, Víctor Manuel and Domínguez-Isidro, Saúl and Sánchez-García, Ángel J. and Ocharán-Hernández, Jorge Octavio},
	title = {Benefits and Challenges of the Behavior-Driven Development: A Systematic Literature Review},
	year = {2023},
	pages = {45 - 54},
	doi = {10.1109/CONISOFT58849.2023.00016},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85198221255&doi=10.1109%2FCONISOFT58849.2023.00016&partnerID=40&md5=caa6901af50fe791447b2bca266d25bd},
	abstract = {Behavior-Driven Development (BDD) emphasizes collaboration and communication between developers, testers, and stakeholders. However, identifying the types of software projects and the characteristics in which BDD has been adopted could clarify the advantages and difficulties inherent in the process. This review aims to provide a comprehensive analysis of the state-of-the-art research in BDD, classify the benefits and challenges, and propose future directions for research. The review followed a well-known methodology in the software engineering field. The selected studies were analyzed based on research questions and key findings. The results evince that BDD has been used in large-scale software development, environments requiring natural language implementation, and projects with agile development teams. According to the re-viewed studies, BDD benefits improving communication among stakeholders, better tracking of requirements, and the reuse of artifacts. On the other hand, relevant challenges in BDD include the cost and time required for implementation, the maintenance of BDD specifications, and the need for a common language among stakeholders. In addition, the analysis provides the best practices for adapting to BDD and improving its effectiveness, such as developing feature files, using language effectively, and using tools for BDD. Finally, BDD's limitations include the difficulty of writing effective scenarios, the need for a cultural transition in the development team, and the lack of standardization and guidelines for BDD implementation. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile Development; Behavior-driven Development; Narrative Synthesis; Systematic Literature Review; Boolean Functions; Agile Development; Art Research; Behavior-driven Development; Benefit And Challenges; Comprehensive Analysis; Development Teams; Narrative Synthesis; Software Project; State Of The Art; Systematic Literature Review; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Tablada-Domínguez2023,
	author = {Tablada-Domínguez, Antonio and Muñoz, Mirna and Ocharán-Hernández, Jorge Octavio and Sánchez-García, Ángel J.},
	title = {Machine Learning-Based Software Development Challenges Focusing on using Best Practices of Software Engineering Standards},
	year = {2023},
	pages = {},
	doi = {10.1109/ENC60556.2023.10508685},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85192841835&doi=10.1109%2FENC60556.2023.10508685&partnerID=40&md5=2d988a4186123ffbc66ff895859a89ab},
	abstract = {The AI era established significant challenges for software developers, especially those working on Machine Learning (ML)-based software. This article presents the findings of a systematic literature review (SLR) focused on identifying software engineering practices for ML-based software development. We identified 16 primary studies highlighting the challenges scientists face in lacking software engineering training when developing ML-based software. The results emphasize the importance of documentation, standardized processes, and skills acquisition to overcome these challenges effectively in the AI era. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Artificial Intelligence; Machine Learning; Software Best Practices; Software Development; Software Engineering; Software Processes; Computer Software; Engineering Education; Software Design; Best Practices; Machine-learning; On-machines; Software Best Practices; Software Developer; Software Engineering Practices; Software Engineering Standards; Software Engineering Training; Software Process; Systematic Literature Review; Machine Learning},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Claderón-Blas2023,
	author = {Claderón-Blas, Javier A. and Cerdan, Maria Angélica and Sánchez-García, Ángel J. and Domingue-Isidro, Saúl},
	title = {Medical Recommender Systems: a Systematic Literature Review},
	year = {2023},
	pages = {},
	doi = {10.1109/ENC60556.2023.10508695},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85192802746&doi=10.1109%2FENC60556.2023.10508695&partnerID=40&md5=dc4057dd1aea1812795f9ac88f3b39b0},
	abstract = {Medical recommender systems are applications in the field of health. These systems use Artificial Intelligence techniques to provide personalized recommendations to healthcare professionals and patients, based on available and relevant patient information. Software engineering is essential in developing medical recommender systems, as these systems must be accurate, reliable, and secure for use in clinical settings. This work presents a Systematic Literature Review based on the Kitchenham and Charters guide, in order to explore the Artificial Intelligence techniques used in this type of system, which can be incorporated or improved by software developers who participate in this type of project. Twelve primary studies were selected, where mainly machine learning approaches were identified (algorithms based on decision trees, neural networks, Bayesian classifiers and clustering such as k-means), matrix approaches, based on rules, among others. Precision, Recall, and Root Mean Square Error (RMSE) were the main measures used to evaluate the performance of these systems. Finally, the studies propose always increasing the sample size of the tests carried out, including relevant patient information such as social networks and clinical information, as well as exploring other algorithms and approaches that allow improving the results of the recommendation. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Artificial Intelligence; Medical Recommender System; Metrics; Software; Bayesian Networks; Decision Trees; K-means Clustering; Learning Algorithms; Machine Learning; Mean Square Error; Artificial Intelligence Techniques; Clinical Settings; Health Care Professionals; Medical Recommende System; Metric; Patient Information; Personalized Recommendation; Software; System Use; Systematic Literature Review; Recommender Systems},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Martinez2023,
	author = {Martinez, Zaira Hernandez and Martinez-Moreno, Patricia and Vergara Camacho, Jose Antonio and Vega, Gerardo Contreras},
	title = {Study on the Use of Defect Metrics in the Software Development Process. Flaws and Vulnerabilities},
	year = {2023},
	pages = {},
	doi = {10.1109/ICEV59168.2023.10329656},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85180366271&doi=10.1109%2FICEV59168.2023.10329656&partnerID=40&md5=5b0d5f530f31fdee87e609790249653c},
	abstract = {The quality compliance has become an aspect of big importance in the development of software engineering, here the term 'defect metrics' comes in the prevention of errors, failures and defects in the software. As a result of applying this type of metrics we can obtain quality and more reliable systems for today's world. Therefore, establishing criteria for defect metrics is a relevant step within the components that make up the software product. The main objective of this research is to show an overview of defect metrics in software products. We aim to show their benefits and limitations and the causes of vulnerabilities in applications in order to obtain better built applications. This study was carried out using different sources of information obtained from academic databases, which were: ACM Digital Library, IEEE Xplore, Springer Link and Science Direct. The study recovered a total of 20 research papers that met the necessary guidelines to belong to the systematic literature review; these primary studies were previously subjected to multiple quality tests. The use of software metrics contributes significantly to the quality of a software product, however, limiting factors that interfere with the full use of defect metrics are also discussed. Finding the option with the lowest risk of limiting the use of these metrics and greater gain is relevant to the creation of a software product. In addition to supporting the testing process early on, they also prevent software vulnerabilities due to their nature and incorporation in the components of a system. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Defect Metrics; Software Defects; Software Metrics; Software Vulnerabilities; Digital Libraries; Software Design; Software Testing; Defect Metric; Reliable Systems; Research Papers; Software Defects; Software Development Process; Software Metrics; Software Products; Software Vulnerabilities; Sources Of Informations; Systematic Literature Review; Defects},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Fernández del Carpio202393,
	author = {Fernández del Carpio, Álvaro and Bermón-Angarita, Leonardo},
	title = {Assistant Solutions in Software Engineering: A Systematic Literature Review},
	year = {2023},
	journal = {Proceedings of the IEEE International Conference on Software Engineering and Service Sciences, ICSESS},
	pages = {93 - 100},
	doi = {10.1109/ICSESS58500.2023.10293029},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85178599884&doi=10.1109%2FICSESS58500.2023.10293029&partnerID=40&md5=4adf1d13f20e73aaa7ab4e408eb625c5},
	abstract = {Increasing technological advancements in developing assistants have gained attention because of its wide use in a variety of fields. In the realm of Software Engineering, developers are including these solutions in diverse software tasks. This research aims to identify and analyze the role and diversity of these solutions, including forms of interaction, functionalities, and technologies used for their implementation, evaluation, drawbacks, and current challenges. This research involves a systematic literature review of different approaches of assistant solutions in order to support software practitioners in developing their tasks. The solutions identified are oriented to recommendation systems, chatbots, and virtual assistants, covering a wide range of software processes such as requirements, design, construction, maintenance and, additionally management and process learning. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Assistants; Software Engineering; Systematic Review; 'current; Assistant; Chatbots; Software Practitioners; Software Process; Software Tasks; Systematic Literature Review; Systematic Review; Technological Advancement; Virtual Assistants; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Espinoza-Mina2023165,
	author = {Espinoza-Mina, Marcos Antonio and Colina Vargas, Alejandra and Montero-Ramos, Natalia},
	title = {Management framework of software development: a systematic review},
	year = {2023},
	journal = {CEUR Workshop Proceedings},
	volume = {3520},
	pages = {165 - 184},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85177437413&partnerID=40&md5=d2e1b11de4c3f40a2d45fcba74bf8d00},
	abstract = {Software development is a complex process since it synthesizes the theoretical and practical knowledge of all those involved in satisfying a business need at the technology level. This study proposes a systematic review of the literature on the administrative framework of software development. The main objective is to map the current literature concerning the management framework of software development. Methodologically, it was adjusted to the three phases proposed for a systematic review of the Kitchenham and Charter guidelines, which are: planning, review, and results. The review was limited to open-access scientific articles published in Spanish-speaking countries between 2013 and 2022. We obtained 62 in WoS and 153 in Scopus. According to the results, the components of the administrative framework are control, organization, people, planning, technologies, and technique. The most widely used methodology is the agile methodology. Among the trends that the development administrative framework must respond to are: Global Software Development, Secure Software Development, and Integrating the business intelligence framework. This study identifies that there are no unique criteria within the factors of the administrative framework. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Development Methodology; Management; Projects; Software Engineering; 'current; Administrative Framework; Business Needs; Complex Processes; Development Methodology; Management Frameworks; Project; Systematic Review; Three Phase; Three Phasis; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Moulla20232455,
	author = {Moulla, Donatien Koulla and Mnkandla, Ernest and Abran, Alain},
	title = {Evaluation of IoT Measurement Solutions from a Metrology Perspective},
	year = {2023},
	journal = {Computer Systems Science and Engineering},
	volume = {47},
	number = {2},
	pages = {2455 - 2479},
	doi = {10.32604/CSSE.2023.039736},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85169687188&doi=10.32604%2FCSSE.2023.039736&partnerID=40&md5=b138c933d7491b9807c515eb2dd3e55a},
	abstract = {To professionally plan and manage the development and evolution of the Internet of Things (IoT), researchers have proposed several IoT performance measurement solutions. IoT performance measurement solutions can be very valuable for managing the development and evolution of IoT systems, as they provide insights into performance issues, resource optimization, predictive maintenance, security, reliability, and user experience. However, there are several issues that can impact the accuracy and reliability of IoT performance measurements, including lack of standardization, complexity of IoT systems, scalability, data privacy, and security. While previous studies proposed several IoT measurement solutions in the literature, they did not evaluate any individual one to figure out their respective measurement strengths and weaknesses. This study provides a novel scheme for the evaluation of proposed IoT measurement solutions using a metrology-coverage evaluation based on evaluation theory, metrology principles, and software measurement best practices. This evaluation approach was employed for 12 IoT measure categories and 158 IoT measurement solutions identified in a Systematic Literature Review (SLR) from 2010 to 2021. The metrology coverage of these IoT measurement solutions was analyzed from four perspectives: across IoT categories, within each study, improvement over time, and implications for IoT practitioners and researchers. The criteria in this metrology-coverage evaluation allowed for the identification of strengths and weaknesses in the theoretical and empirical definitions of the proposed IoT measurement solutions. We found that the metrological coverage varies significantly across IoT measurement solution categories and did not show improvement over the 2010–2021 timeframe. Detailed findings can help practitioners understand the limitations of the proposed measurement solutions and choose those with stronger designs. These evaluation results can also be used by researchers to improve current IoT measurement solution designs and suggest new solutions with a stronger metrology base. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Internet Of Things; Iot Measurement Solutions; Metrics; Metrology; Software Engineering Measurement; Data Privacy; Software Engineering; Engineering Measurements; Internet Of Thing Measurement Solution; Metric; Performance Issues; Performance Measurements; Predictive Maintenance; Resources Optimization; Software Engineering Measurement; System Scalability; Users' Experiences; Internet Of Things},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Li202384048,
	author = {Li, Zheng and Rainer, Austen W.},
	title = {Reproducible Searches in Systematic Reviews: An Evaluation and Guidelines},
	year = {2023},
	journal = {IEEE Access},
	volume = {11},
	pages = {84048 - 84060},
	doi = {10.1109/ACCESS.2023.3299211},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85165868236&doi=10.1109%2FACCESS.2023.3299211&partnerID=40&md5=820d20b96c226a85939dbe1fd0cfec76},
	abstract = {[Context:] The Systematic Review is promoted as a more reliable way of producing a high-quality review of prior research. But there are a range of threats that can undermine the reliability and quality of such reviews. One threat is the reproducibility of automated searches. [Objectives:] To evaluate the state-of-practice of reproducible searches in secondary studies, and to consider ways to improve the reproducibility of searches. [Method:] We re-run the searches of 621 secondary studies and analyse the outcomes of those (attempted) re-runs. We use the outcomes, and our experience of re-running the searches, to propose ways to improve the reproducibility of automated searches. [Results:] With the 621 studies, more than 50% of the literal search strings (ignoring other settings) are not reusable; about 87% of the searches (e.g., with settings) cannot be repeated; and around 94% of the searches (including all elements of the search) are irreproducible. We propose guidelines for automated search, directing particular attention at the formulation of search strings. [Conclusion:] While some aspects of automated search are beyond the direct control of researchers (e.g., variations in features, constraints and performance of search engines), many aspects can be effectively managed through more careful formulation and execution of the search strings themselves, and of the search settings. While the results of our evaluation are disappointing there are many simple, concrete steps that researchers can make to improve the reproducibility of their searches. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Automated Search; Evidence Based Software Engineering; Reproducibility; Search Engine; Secondary Study; Systematic Review; Automation; Quality Control; Software Reliability; Automated Searches; Evidence Based Software Engineering; Guideline; Reproducibilities; Reproducibility Of Result; Search Problem; Secondary Study; Systematic; Systematic Review; Search Engines},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Final Open Access; Green Open Access}
}

@CONFERENCE{Nahar2023171,
	author = {Nahar, Nadia and Zhang, Haoran and Lewis, Grace A. and Zhou, Shurui and Kästner, Christian},
	title = {A Meta-Summary of Challenges in Building Products with ML Components - Collecting Experiences from 4758+ Practitioners},
	year = {2023},
	pages = {171 - 183},
	doi = {10.1109/CAIN58948.2023.00034},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85165138275&doi=10.1109%2FCAIN58948.2023.00034&partnerID=40&md5=8612bd19f071d104c7502de987757dee},
	abstract = {Incorporating machine learning (ML) components into software products raises new software-engineering challenges and exacerbates existing ones. Many researchers have invested significant effort in understanding the challenges of industry practitioners working on building products with ML components, through interviews and surveys with practitioners. With the intention to aggregate and present their collective findings, we conduct a meta-summary study: We collect 50 relevant papers that together interacted with over 4758 practitioners using guidelines for systematic literature reviews. We then collected, grouped, and organized the over 500 mentions of challenges within those papers. We highlight the most commonly reported challenges and hope this meta-summary will be a useful resource for the research community to prioritize research and education in this field. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Meta Summary; Ml In Production; Se4ml; Slr; Software Engineering For Machine Learning; Machine Components; Software Engineering; Building Products; In-buildings; Learning In Productions; Machine Learning In Production; Machine-learning; Meta Summary; Se4ml; Slr; Software Engineering For Machine Learning; Machine Learning},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Çiço2023,
	author = {Çiço, Orges and Cico, Betim and Cico, Andja},
	title = {AI-assisted Software Engineering: A tertiary study},
	year = {2023},
	pages = {},
	doi = {10.1109/MECO58584.2023.10154972},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85164974144&doi=10.1109%2FMECO58584.2023.10154972&partnerID=40&md5=58cff6bb453ab5562ef763099a9dabe1},
	abstract = {The research in Artificial Intelligence (AI) and its applications across the software engineering (SE) domain has progressed significantly in the last decade, evidenced by an increase in systematic literature reviews. Our study aims to provide an overview of existing systematic reviews within this research area and synthesize the findings related to AI subfields (Machine Learning, Search-based, Evolutionary Computation, Vision, Robotics, Expert Systems, Speech Processing, Natural Language Processing, and Planning) supporting the five main SE processes: requirements, design, development, testing, and maintenance. For our tertiary study, we used the methodology based on Kitchenham's guidelines. We selected 11 reviews published between 2000 and 2021, including results from 513 primary studies. The selected reviews cover the AI subfields across the five main SE processes. Studies have covered Machine Learning, Natural Language Processing, and Evolutionary Computations as AI subfields assisting SE processes. We have found that reviews in AI-assisted software testing are the most common, followed by software maintenance and development. Our study can help researchers identify missing reviews on AI-assisted SE topics to help further consolidate this research area. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Artificial Intelligence; Software Engineering; Tertiary Study; Application Programs; Expert Systems; Learning Algorithms; Machine Learning; Natural Language Processing Systems; Robot Programming; Its Applications; Language Processing; Machine-learning; Natural Languages; Research Areas; Software Engineering Domain; Software Engineering Process; Subfields; Systematic Literature Review; Tertiary Study; Software Testing},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Liubchenko202381,
	author = {Liubchenko, Vira},
	title = {Software Metrics Visualization},
	year = {2023},
	journal = {Proceedings of International Conference on Applied Innovation in IT},
	volume = {11},
	number = {1},
	pages = {81 - 87},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85160233423&partnerID=40&md5=29676108f2d78a348ce7a91813a73bb3},
	abstract = {Software engineering is an empirical field of study. To support managerial and technical decision-making, the engineer needs numerical measures closely connected with different software metrics. Visual representation of numerical data improves the effectiveness of human data processing and shows insights that humans may miss. This paper aims to provide a systematic review of the approaches for software metrics visualization and define the possible recommendation for their use. The study is based on the literature review of the papers from two text collections – IEEE Xplore and ACM Digital Library – and the scientometric database Scopus. After merging and filtering, the final set of publications contains 16 papers. Our study showed that there were the metrics used significantly more often; among them are lines-of-code, cyclomatic complexity, coupling, and cohesion. We were not able to identify such leaders for visualization means. Instead, there was a tendency to combine different metrics on one chart or dashboard to provide the whole process picture. Based on the results of empirical studies reported in the literature, we offered an analysis of simple charts’ properties and recommendations on their use for support decision-making in the software engineering process. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Analysis; Data; Decision Making; Diagrams; Effectiveness; Metrics; Software; Visualization},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Weber202341796,
	author = {Weber, Simon B. and Stein, Stefan and Pilgermann, Michael and Schrader, Thomas},
	title = {Attack Detection for Medical Cyber-Physical Systems-A Systematic Literature Review},
	year = {2023},
	journal = {IEEE Access},
	volume = {11},
	pages = {41796 - 41815},
	doi = {10.1109/ACCESS.2023.3270225},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85159709641&doi=10.1109%2FACCESS.2023.3270225&partnerID=40&md5=22a80e2103d2da09a48d9d32be5d52c4},
	abstract = {The threat situation due to cyber attacks in hospitals is emerging and patient life is at risk. One significant source of potential vulnerabilities is medical cyber-physical systems (MCPS). Detecting intrusions in this environment faces challenges different from other domains, mainly due to the heterogeneity of devices, the diversity of connectivity types, and the variety of terminology. To summarize existing results, we conducted a structured literature review (SLR) following the guidelines of Kitchenham et al. for SLRs in software engineering. We developed six research questions regarding detection approach, detection location, included features, adversarial focus, utilized datasets, and intrusion prevention. We identified that most researchers focused on an anomaly-based detection approach at the network layer. The primary focus was on the detection of malicious insiders. While several researchers used publicly available datasets for training and testing their algorithms, the lack of suitable datasets resulted in the development of testbeds consisting of various medical devices. Based on the results, we formulated five future research topics. First, the special conditions of hospital networks, the MCPS deployed within them, and the contrasts to other IT and OT environments should be examined. Thereupon, MCPS-specific datasets should be created that allow researchers to address the health domain's unique requirements and possibilities. At the same time, endeavors aimed at standardization in this area should be supported and expanded. Moreover, the use of medical context for attack detection should be further explored. Last but not least, efforts for MCPS-tailored intrusion prevention should be intensified. This way, the emerging threat landscape can be addressed, IT security in hospitals can be improved, and patient health can be protected. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Connected Health; Detection; Healthcare 4.0; Ids; Internet Of Health Things; Intrusion Prevention; Iomt; Medical Cps; Medical Cyber-physical Systems; Medical Iot; Cyber Physical System; Cybersecurity; Embedded Systems; Health Risks; Hospitals; Internet Of Things; Intrusion Detection; Medical Imaging; Network Layers; Network Security; Biomedical Imaging; Connected Health; Detection; Healthcare 4.0; Ids; Internet Of Health Thing; Intrusion Prevention; Intrusion-detection; Iomt; Medical Cps; Medical Cyber Physical Systems; Medical Devices; Medical Iot; Medical Services; Security; Wireless Sensor Networks},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Usman2023,
	author = {Usman, Muhammad and Ali, Nauman Bin and Wohlin, Claes},
	title = {A Quality Assessment Instrument for Systematic Literature Reviews in Software Engineering},
	year = {2023},
	journal = {E-Informatica Software Engineering Journal},
	volume = {17},
	number = {1},
	pages = {},
	doi = {10.37190/e-Inf230105},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85152967598&doi=10.37190%2Fe-Inf230105&partnerID=40&md5=117e3bbf2799204489eec614e0ce8019},
	abstract = {Background: Systematic literature reviews (SLRs) have become a standard practice as part of software engineering (SE) research, although their quality varies. To build on the reviews, both for future research and industry practice, they need to be of high quality. Aim: To assess the quality of SLRs in SE, we put forward an appraisal instrument for SLRs. Method: A well-established appraisal instrument from research in healthcare was used as a starting point to develop the instrument. It is adapted to SE using guidelines, checklists, and experiences from SE. The first version was reviewed by four external experts on SLRs in SE and updated based on their feedback. To demonstrate its use, the updated version was also used by the authors to assess a sample of six selected systematic literature studies. Results: The outcome of the research is an appraisal instrument for quality assessment of SLRs in SE. The instrument includes 15 items with different options to capture the quality. The instrument also supports consolidating the items into groups, which are then used to assess the overall quality of an SLR. Conclusion: The presented instrument may be helpful support for an appraiser in assessing the quality of SLRs in SE. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Amstar 2; Critical Appraisal; Quality Assessment; Systematic Literature Review; Systematic Reviews; Tertiary Study; Industrial Research; Amstar 2; Assessment Instruments; Critical Appraisal; Industry Practices; Quality Assessment; Software Engineering Research; Standard Practices; Systematic Literature Review; Systematic Review; Tertiary Study; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Accepted Open Access; Green Final Open Access; Green Open Access}
}

@ARTICLE{Singh2023101,
	author = {Singh, Ajmer and Singhrova, Anita and Bhatia, Rajesh Kumar and Rattan, Dhavleesh},
	title = {A Systematic Literature Review on Test Case Prioritization Techniques},
	year = {2023},
	pages = {101 - 159},
	doi = {10.1002/9781119896838.ch7},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85152327776&doi=10.1002%2F9781119896838.ch7&partnerID=40&md5=5ad0485f58cd7befaa55048ba4a1d2d2},
	abstract = {Software Testing consumes very significant amount of time in the life cycle of software. Test case prioritization is a way to provide priorities to test cases, to meet various testing goals. This study reports a systematic literature review of prioritization techniques. The survey adheres to the guidelines of eminent researchers in the field of software engineering. This survey is based on a review of 312 articles selected from leading research journals and proceedings of premier conferences. The survey provides a deep insight into the area of prioritization and highlights 22 different techniques that have been emerged in the past. The study not only throws light on different possible techniques for prioritization but also presents a set of applicable tools and subject systems in this domain. The survey also has a specific focus on prioritization in model-based testing and object-oriented testing since these two paradigms have become popular among the researchers. The study concludes that the field of prioritization has considerably been explored and many prioritization techniques have evolved. But still, there are possibilities of improvements, especially in implementation and analysis. The study also highlights the current status of prioritization and provides comparative analysis with similar works. Results presented in this survey would benefit the researchers to gain knowledge of the field of prioritization in general, and object-oriented prioritization, in particular. This review follows the guidelines of eminent researchers like Kitchenham et al. [1, 2] and Budgen et al. [3]. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Software Testing; Systematic Review; Test Case Prioritization; Test Case Prioritization Techniques},
	type = {Book chapter},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Zeb2023,
	author = {Zeb, Alam and Din, Fakhrud Ud and Fayaz, Muhammad and Mehmood, Gulzar and Zamli, K. Z.},
	title = {A Systematic Literature Review on Robust Swarm Intelligence Algorithms in Search-Based Software Engineering},
	year = {2023},
	journal = {Complexity},
	volume = {2023},
	pages = {},
	doi = {10.1155/2023/4577581},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85149384508&doi=10.1155%2F2023%2F4577581&partnerID=40&md5=76236fefdd2eca7308ef36f48dd5ecaf},
	abstract = {Swarm intelligence algorithms are metaheuristics inspired by the collective behavior of species such as birds, fish, bees, and ants. They are used in many optimization problems due to their simplicity, flexibility, and scalability. These algorithms get the desired convergence during the search by balancing the exploration and exploitation processes. These metaheuristics have applications in various domains such as global optimization, bioinformatics, power engineering, networking, machine learning, image processing, and environmental applications. This paper presents a systematic literature review (SLR) on applications of four swarm intelligence algorithms i.e., grey wolf optimization (GWO), whale optimization algorithms (WOA), Harris hawks optimizer (HHO), and moth-flame optimizer (MFO) in the field of software engineering. It presents an in-depth study of these metaheuristics' adoption in the field of software engineering. This SLR is mainly comprised of three phases such as planning, conducting, and reporting. This study covers all related studies published from 2014 up to 2022. The study shows that applications of the selected metaheuristics have been utilized in various fields of software engineering especially software testing, software defect prediction, and software reliability. The study also points out some of the areas where applications of these swarm intelligence algorithms can be utilized. This study may act as a guideline for researchers in improving the current state-of-the-art on generally adopting these metaheuristics in software engineering. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Application Programs; Balancing; Global Optimization; Heuristic Algorithms; Image Processing; Software Reliability; Swarm Intelligence; Collective Behaviour; Exploration And Exploitation; Global Optimisation; Metaheuristic; Optimization Problems; Optimizers; Power Engineering; Search-based; Swarm Intelligence Algorithms; Systematic Literature Review; Software Testing},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{García-Peñalvo20231023,
	author = {García-Peñalvo, Francisco José and Vázquez-Ingelmo, Andrea and García-Holgado, Alicia},
	title = {Explainable Rules and Heuristics in AI Algorithm Recommendation Approaches—A Systematic Literature Review and Mapping Study},
	year = {2023},
	journal = {CMES - Computer Modeling in Engineering and Sciences},
	volume = {136},
	number = {2},
	pages = {1023 - 1051},
	doi = {10.32604/cmes.2023.023897},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85148216883&doi=10.32604%2Fcmes.2023.023897&partnerID=40&md5=a7cd600ae92c21543e9a92f991e29fae},
	abstract = {The exponential use of artificial intelligence (AI) to solve and automated complex tasks has catapulted its popularity generating some challenges that need to be addressed. While AI is a powerful means to discover interesting patterns and obtain predictive models, the use of these algorithms comes with a great responsibility, as an incomplete or unbalanced set of training data or an unproper interpretation of the models’ outcomes could result in misleading conclusions that ultimately could become very dangerous. For these reasons, it is important to rely on expert knowledge when applying these methods. However, not every user can count on this specific expertise; non-AI-expert users could also benefit from applying these powerful algorithms to their domain problems, but they need basic guidelines to obtain the most out of AI models. The goal of this work is to present a systematic review of the literature to analyze studies whose outcomes are explainable rules and heuristics to select suitable AI algorithms given a set of input features. The systematic review follows the methodology proposed by Kitchenham and other authors in the field of software engineering. As a result, 9 papers that tackle AI algorithm recommendation through tangible and traceable rules and heuristics were collected. The reduced number of retrieved papers suggests a lack of reporting explicit rules and heuristics when testing the suitability and performance of AI algorithms. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Algorithm Recommendation; Artificial Intelligence; Explainability; Heuristics; Machine Learning; Slr; Systematic Literature Review; Learning Algorithms; Software Engineering; Algorithm Recommendation; Artificial Intelligence Algorithms; Explainability; Exponentials; Heuristic; Machine-learning; Mapping Studies; Slr; Systematic Literature Review; Systematic Review; Machine Learning},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Kinast2023,
	author = {Kinast, Benjamin and Ulrich, Hannes and Bergh, Björn and Schreiweis, Björn},
	title = {Functional Requirements for Medical Data Integration into Knowledge Management Environments: Requirements Elicitation Approach Based on Systematic Literature Analysis},
	year = {2023},
	journal = {Journal of Medical Internet Research},
	volume = {25},
	pages = {},
	doi = {10.2196/41344},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85147834110&doi=10.2196%2F41344&partnerID=40&md5=7f340150eb8ca8d9698836e9cfe13d67},
	abstract = {Background: In patient care, data are historically generated and stored in heterogeneous databases that are domain specific and often noninteroperable or isolated. As the amount of health data increases, the number of isolated data silos is also expected to grow, limiting the accessibility of the collected data. Medical informatics is developing ways to move from siloed data to a more harmonized arrangement in information architectures. This paradigm shift will allow future research to integrate medical data at various levels and from various sources. Currently, comprehensive requirements engineering is working on data integration projects in both patient care- and research-oriented contexts, and it is significantly contributing to the success of such projects. In addition to various stakeholder-based methods, document-based requirement elicitation is a valid method for improving the scope and quality of requirements. Objective: Our main objective was to provide a general catalog of functional requirements for integrating medical data into knowledge management environments. We aimed to identify where integration projects intersect to derive consistent and representative functional requirements from the literature. On the basis of these findings, we identified which functional requirements for data integration exist in the literature and thus provide a general catalog of requirements. Methods: This work began by conducting a literature-based requirement elicitation based on a broad requirement engineering approach. Thus, in the first step, we performed a web-based systematic literature review to identify published articles that dealt with the requirements for medical data integration. We identified and analyzed the available literature by applying the PRISMA (Preferred Reporting Items for Systematic Reviews and Meta-Analyses) guidelines. In the second step, we screened the results for functional requirements using the requirements engineering method of document analysis and derived the requirements into a uniform requirement syntax. Finally, we classified the elicited requirements into a category scheme that represents the data life cycle. Results: Our 2-step requirements elicitation approach yielded 821 articles, of which 61 (7.4%) were included in the requirement elicitation process. There, we identified 220 requirements, which were covered by 314 references. We assigned the requirements to different data life cycle categories as follows: 25% (55/220) to data acquisition, 35.9% (79/220) to data processing, 12.7% (28/220) to data storage, 9.1% (20/220) to data analysis, 6.4% (14/220) to metadata management, 2.3% (5/220) to data lineage, 3.2% (7/220) to data traceability, and 5.5% (12/220) to data security. Conclusions: The aim of this study was to present a cross-section of functional data integration-related requirements defined in the literature by other researchers. The aim was achieved with 220 distinct requirements from 61 publications. We concluded that scientific publications are, in principle, a reliable source of information for functional requirements with respect to medical data integration. Finally, we provide a broad catalog to support other scientists in the requirement elicitation phase. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Data Integration; Knowledge Management; Requirements; Requirements Engineering; Software Engineering; Adult; Article; Data Analysis; Data Integration; Document Analysis; Female; Human; Information Security; Information Source; Information Storage; Knowledge Management; Life Cycle; Male; Meta Analysis; Metadata; Patient Care; Practice Guideline; Preferred Reporting Items For Systematic Reviews And Meta-analyses; Software; Systematic Review; Information Processing; Information Retrieval; Publication; System Analysis; Data Collection; Humans; Information Storage And Retrieval; Knowledge Management; Publications; Systems Analysis},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Final Open Access; Green Open Access}
}

@ARTICLE{Cabral2023,
	author = {Cabral, José Thiago Hde A. and Oliveira, Adriano L.I. and da Silva, Fabio Q.B.},
	title = {Ensemble Effort Estimation: An updated and extended systematic literature review},
	year = {2023},
	journal = {Journal of Systems and Software},
	volume = {195},
	pages = {},
	doi = {10.1016/j.jss.2022.111542},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85141926894&doi=10.1016%2Fj.jss.2022.111542&partnerID=40&md5=5fdd2cce0b17fb3505c1c0733d75a69a},
	abstract = {Ensemble Effort Estimation (EEE) techniques combine several individual software estimation methods in order to address the weaknesses of individual methods for prediction tasks. A systematic review published in 2016 analyzed empirical studies on EEE techniques published between 2010 and (January) 2016. The research on EEE has continuously evolved over the past five years (2016–2020), generating new findings that should be aggregated to the existing body of evidence on the subject. The goal of this paper is to update the systematic review from 2016 with new findings from studies published between 2016 (full year) and 2020 (inclusive). To conduct our review update, we followed existing guidelines for updating systematic reviews in software engineering and other fields. We started with an appraisal of the background and methods of the 2016 review, which resulted in the updated review protocol used to conduct our study. We retrieved 3,682 papers using automatic searching techniques, from which we selected 30 papers for data extraction and analysis. Our findings reinforce the results of the previous review in that machine learning is still the technique most common to construct EEE and that the ensemble techniques have outperformed the individual models. We added new evidence showing that there is no clear superiority of an EEE model over the others. Also, we found that ensemble dynamic selection is still little used in Software Effort Estimation (SEE). This review adds new evidence about the use of EEE techniques in software development which reinforces previous findings and also shows research opportunities in constructing more effective EEE. Besides, ensemble dynamic selection appears as a promising area of research which still is underexplored. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Machine Learning; Software Effort Estimation; Software Engineering; Systematic Literature Review, Ensemble Effort Estimation; Software Design; Dynamic Selection; Effort Estimation; Estimation Methods; Estimation Techniques; Machine-learning; Software Effort Estimation; Software Estimation; Systematic Literature Review; Systematic Literature Review, Ensemble Effort Estimation; Systematic Review; Machine Learning},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ndukwe2023,
	author = {Ndukwe, Ifeanyi Glory and Licorish, Sherlock A․ and Tahir, Amjed and MacDonell, Stephen Gerard},
	title = {How have views on Software Quality differed over time? Research and practice viewpoints},
	year = {2023},
	journal = {Journal of Systems and Software},
	volume = {195},
	pages = {},
	doi = {10.1016/j.jss.2022.111524},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85140313968&doi=10.1016%2Fj.jss.2022.111524&partnerID=40&md5=da546667bffb7acfdf2792a6be4c87f6},
	abstract = {Context: Over the years, there has been debate about what constitutes software quality and how it should be measured. This controversy has caused uncertainty across the software engineering community, affecting levels of commitment to the many potential determinants of quality among developers. An up-to-date catalogue of software quality views could provide developers with contemporary guidelines and templates. In fact, it is necessary to learn about views on the quality of code on frequently used online collaboration platforms (e.g., Stack Overflow), given that the quality of code snippets can affect the quality of software products developed. If quality models are unsuitable for aiding developers because they lack relevance, developers will hold relaxed or inappropriate views of software quality, thereby lacking awareness and commitment to such practices. Objective: We aim to explore differences in interest in quality characteristics across research and practice. We also seek to identify quality characteristics practitioners consider important when judging code snippet quality. First, we examine the literature for quality characteristics used frequently for judging software quality, followed by the quality characteristics commonly used by researchers to study code snippet quality. Finally, we investigate quality characteristics used by practitioners to judge the quality of code snippets. Methods: We conducted two systematic literature reviews followed by semi-structured interviews of 50 practitioners to address this gap. Results: The outcomes of the semi-structured interviews revealed that most practitioners judged the quality of code snippets using five quality dimensions: Functionality, Readability, Efficiency, Security and Reliability. However, other dimensions were also considered (i.e., Reusability, Maintainability, Usability, Compatibility and Completeness). This outcome differed from how the researchers judged code snippet quality. Conclusion: Practitioners today mainly rely on code snippets from online code resources, and specific models or quality characteristics are emphasised based on their need to address distinct concerns (e.g., mobile vs web vs standalone applications, regular vs machine learning applications, or open vs closed source applications). Consequently, software quality models should be adapted for the domain of consideration and not seen as one-size-fits-all. This study will lead to targeted support for various clusters of the software development community. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Code Snippet Quality; Software Quality; Stack Overflow; Application Programs; Codes (symbols); Computer Software Reusability; Reusability; Software Design; Code Snippet Quality; Collaboration Platforms; Engineering Community; Learn+; On-line Collaborations; Quality Characteristic; Semi Structured Interviews; Software Quality; Stack Overflow; Uncertainty; Computer Software Selection And Evaluation},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Caballero2023,
	author = {Caballero, Eduardo and Carver, Jeffrey C. and Stowers, Kimberly L.},
	title = {Community smells—The sources of social debt: A systematic literature review},
	year = {2023},
	journal = {Information and Software Technology},
	volume = {153},
	pages = {},
	doi = {10.1016/j.infsof.2022.107078},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85139314025&doi=10.1016%2Fj.infsof.2022.107078&partnerID=40&md5=78c9a873382c5f6bb512fccda74fb3aa},
	abstract = {Context: Social debt describes the accumulation of unforeseen project costs (or potential costs) from sub-optimal software development processes. Community smells are sociotechnical anti-patterns and one source of social debt. Because community smells impact software teams, development processes, outcomes, and organizations, we to understand their impact on software engineering. Objective: To provide an overview of community smells in social debt, based on published literature, and describe future research. Method: We conducted a systematic literature review (SLR) to identify properties, understand origins and evolution, and describe the emergence of community smells. This SLR explains the impact of community smells on teamwork and team performance. Results: We include 25 studies. Social debt describes the impacts of poor socio-technical decisions on work environments, people, software products, and society. For each of the 30 community smells identified as sources of social debt, we provide a detailed description, management approaches, organizational strategies, and mitigation effectiveness. We identify five groups of management approaches: organizational strategies, frameworks, models, tools, and guidelines. We describe 11 common properties of community smells. We develop the Community Smell Stages Framework to concisely describe the origin and evolution of community smells. We then describe the causes and effects for each community smell. We identify and describe 8 types of causes and 11 types of effects related to the community smells. Finally, we provide 8 comprehensive Sankey diagrams that offer insights into threats the community smells pose to teamwork factors and team performance. Conclusion: Community smells explain the influence work conditions have on software developers. The literature is scarce and focuses on a small number of community smells. Thus, the community smells still need more research. This review helps by organizing the state of the art about community smells. Our contributions provide motivations for future research and provide educational material for software engineering professionals. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Community Smells; Social Debt; Software Development Teams; Systematic Literature Review; Team Performance; Teamwork; Odors; Community Smell; Organizational Strategy; Project Cost; Social Debt; Sociotechnical; Software Development Process; Software Development Teams; Systematic Literature Review; Team Performance; Teamwork; Software Design},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{González Moyano2022,
	author = {González Moyano, Cielo and Pufahl, Luise and Weber, Ingo M. and Mendling, Jan},
	title = {Uses of business process modeling in agile software development projects},
	year = {2022},
	journal = {Information and Software Technology},
	volume = {152},
	pages = {},
	doi = {10.1016/j.infsof.2022.107028},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85135709784&doi=10.1016%2Fj.infsof.2022.107028&partnerID=40&md5=3a9daebe867cec5b1961045c47d3c3cb},
	abstract = {Context: Agile methodologies and frameworks are widely used in software development projects because of their support for continuous change and delivery. Agile software development advocates de-prioritizing aspects such as processes and documentation. In traditional software engineering methodologies, however, business process models have been extensively used to support these aspects. Up until now, it is unclear to what extent recommendations to focus on code imply that conceptual modeling should be discontinued. Objective: The objective of this study is to investigate this hypothesis. More specifically, we develop a theoretical argument of how business process models are and can be used to support agile software development projects. Method: To this end, we use a multi-method study design. First, we conduct a systematic literature review, in which we identify studies on the usage of business process models in agile software development. Second, we apply procedures from thematic synthesis to analyze the connection between these uses and the phases of the development cycle. Third, we use a focus group design with practitioners to systematically reflect upon how these uses can help regarding four categories of challenges in agile software development: management, team, technology, and process. Results: From 37 relevant studies, we distill 15 different uses. The results highlight the benefits of process modeling as an instrument to support agile software development projects from different angles and in all project phases. Process modeling appears to be particularly relevant for the first phases of the development cycle, and for management and process issues in agile projects. Conclusion: We conclude that business process models indeed provide benefits for agile software development projects. Our findings have practical implications and emphasize the need for future research on modeling and agile development. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile Methodologies; Focus Group; Literature Review; Multi-method; Process Models; Thematic Synthesis; Human Resource Management; Process Engineering; Systems Engineering; Agile Methodologies; Agile Software Development; Agile Software Development Projects; Business Process Modeling; Focus Groups; Literature Reviews; Multi Methods; Process-models; Support Agile Software Development; Thematic Synthesis; Software Design},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Burzlaff20224052,
	author = {Burzlaff, Fabian and Wilken, Nils and Bartelt, Christian and Stuckenschmidt, Heiner},
	title = {Semantic Interoperability Methods for Smart Service Systems: A Survey},
	year = {2022},
	journal = {IEEE Transactions on Engineering Management},
	volume = {69},
	number = {6},
	pages = {4052 - 4066},
	doi = {10.1109/TEM.2019.2922103},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85069944353&doi=10.1109%2FTEM.2019.2922103&partnerID=40&md5=a8412657179ab58cf93ff7d3517e2191},
	abstract = {Functional and nonfunctional characteristics of software systems are defined by their architecture. Therefore, research streams such as Internet-of-Things (IoT) or component-based software engineering provide researchers and practitioners with construction guidelines for selected architectural characteristics. Current systems can be categorized in delivering services to the user and being engineered in a smart way. For example, services being provided by IoT-Systems must fulfill users' goals in a highly dynamic and ad-hoc way. Consequently, this survey aims at answering various research questions regarding the methodical composition of system components and services. Furthermore, new research opportunities are sketched that should be tackled to make the scientific progress available to practitioners. Based on a systematic literature review from a software architecture point of view, in this paper we identify 75 primary studies for domain-specific IoT component composition approaches and architectures. Initial results show that current integration approaches mainly focus on performance evaluation of their integration solutions, which may be too narrow for fulfilling user goals by utilizing of IoT architectures. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Ai Systems Engineering; Knowledge-based Methods And Approaches; Semantic Interoperability; Software Architecture; Systematic Literature Review; Computer Software; Internet Of Things; Interoperability; Knowledge Based Systems; Software Architecture; Surveys; Ai System Engineering; Ai Systems; Knowledge-based Approach; Knowledge-based Methods; Runtimes; Semantic Interoperability; Smart Services; Software; Systematic; Systematic Literature Review; Semantics},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Ralph20221632,
	author = {Ralph, Paul and Baltes, Sebastian},
	title = {Paving the way for mature secondary research: the seven types of literature review},
	year = {2022},
	pages = {1632 - 1636},
	doi = {10.1145/3540250.3560877},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85143053770&doi=10.1145%2F3540250.3560877&partnerID=40&md5=623311605b5a2260eef9601a2efc08d7},
	abstract = {Confusion over different kinds of secondary research, and their divergent purposes, is undermining the effectiveness and usefulness of secondary studies in software engineering. This short paper therefore explains the differences between ad hoc review, case survey, critical review, meta-analysis (aka systematic literature review), meta-synthesis (aka thematic analysis), rapid review and scoping review (aka systematic mapping study). These definitions and associated guidelines help researchers better select and describe their literature reviews, while helping reviewers select more appropriate evaluation criteria. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Literature Review; Secondary Research; Systematic Review; Case Surveys; Critical Review; Divergents; Literature Reviews; Meta-analysis; Meta-synthesis; Secondary Researches; Systematic Literature Review; Systematic Review; Thematic Analysis; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Fulcini202217,
	author = {Fulcini, Tommaso and Garaccione, Giacomo and Coppola, Riccardo and Ardito, Luca and Torchiano, Marco},
	title = {Guidelines for GUI testing maintenance: A linter for test smell detection},
	year = {2022},
	pages = {17 - 24},
	doi = {10.1145/3548659.3561306},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85142936994&doi=10.1145%2F3548659.3561306&partnerID=40&md5=a8c4876e36fd1fbfce3363242efdd5b8},
	abstract = {GUI Test suites suffer from high fragility, in fact modifications or redesigns of the user interface are commonly frequent and often invalidate the tests. This leads, for both DOM- and visual-based techniques, to frequent need for careful maintenance of test suites, which can be expensive and time-consuming. The goal of this work is to present a set of guidelines to write cleaner and more robust test code, reducing the cost of maintenance and producing more understandable code. Based on the provided recommendations, a static test suite analyzer and code linter has been developed. An ad-hoc grey literature research was conducted on the state of the practice, by performing a semi-systematic literature review. Authors' experience was coded into a set of recommendations, by applying the grounded theory methodology. Based on these results, we developed a linter in the form of a plugin for Visual Studio Code, implementing 17 of the provided guidelines. The plugin highlights test smells in the Java and Javascript languages. Finally, we conducted a preliminary validation of the tool against test suites from real GitHub projects. The preliminary evaluation, meant to be an attempt of application of the plugin to real test suites, detected three main smells, namely the usage of global variables, the lack of adoption of the Page Object design pattern, and the usage of fragile locator such as the XPath. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Gui Testing; Software Engineering; Software Testing; Test Smell; Graphical User Interfaces; Maintenance; Odors; Testing; Cost Of Maintenance; Grey Literature; Gui Testing; Literature Researches; Plug-ins; Robust Tests; Software Testings; Static Tests; Test Code; Test Smell; Software Testing},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Li202225,
	author = {Li, Zheng and Rainer, Austen W.},
	title = {Academic search engines: Constraints, bugs, and recommendations},
	year = {2022},
	pages = {25 - 32},
	doi = {10.1145/3548659.3561310},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85142919308&doi=10.1145%2F3548659.3561310&partnerID=40&md5=045647a469baa33a34d24ccaba36914e},
	abstract = {Academic search engines (i.e., digital libraries and indexers) play an increasingly important role in systematic reviews however these engines do not seem to effectively support such reviews, e.g., researchers confront usability issues with the engines when conducting their searches. To investigate whether the usability issues are bugs (i.e., faults in the search engines) or constraints, and to provide recommendations to search-engine providers and researchers on how to tackle these issues. Using snowball-sampling from tertiary studies, we identify a set of 621 secondary studies in software engineering. By physically re-attempting the searches for all of these 621 studies, we effectively conduct regression testing for 42 search engines. We identify 13 bugs for eight engines, and also identify other constraints. We provide recommendations for tackling these issues. There is still a considerable gap between the search-needs of researchers and the usability of academic search engines. It is not clear whether search-engine developers are aware of this gap. Also, the evaluation, by academics, of academic search engines has not kept pace with the development, by search-engine providers, of those search engines. Thus, the gap between evaluation and development makes it harder to properly understand the gap between the search-needs of researchers and search-features of the search engines. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Academic Search Engine; Regression Testing; Systematic Review; Usability Evaluation; User Interaction; Digital Libraries; Regression Analysis; Software Testing; Usability Engineering; Academic Search; Academic Search Engine; Regression Testing; Systematic Review; Tertiary Study; Usability Evaluation; User Interaction; Search Engines},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Giordano2022,
	author = {Giordano, Giammaria and Palomba, Fabio and Ferrucci, Filomena},
	title = {On the use of artificial intelligence to deal with privacy in IoT systems: A systematic literature review},
	year = {2022},
	journal = {Journal of Systems and Software},
	volume = {193},
	pages = {},
	doi = {10.1016/j.jss.2022.111475},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85136467284&doi=10.1016%2Fj.jss.2022.111475&partnerID=40&md5=95239250fda9b6a089e7b2c0014fe03f},
	abstract = {The Internet of Things (IoT) refers to a network of Internet-enabled devices that can make different operations, like sensing, communicating, and reacting to changes arising in the surrounding environment. Nowadays, the number of IoT devices is already higher than the world population. These devices operate by exchanging data between them, sometimes through an intermediate cloud infrastructure, and may be used to enable a wide variety of novel services that can potentially improve the quality of life of billions of people. Nonetheless, all that glitters is not gold: the increasing adoption of IoT comes with several privacy concerns due to the lack or loss of control over the sensitive data exchanged by these devices. This represents a key challenge for software engineering researchers attempting to address those privacy concerns by proposing (semi-)automated solutions to identify sources of privacy leaks. In this respect, a notable trend is represented by the adoption of smart solutions, that is, the definition of techniques based on artificial intelligence (AI) algorithms. This paper proposes a systematic literature review of the research in smart detection of privacy concerns in IoT devices. Following well-established guidelines, we identify 152 primary studies that we analyze under three main perspectives: (1) What are the privacy concerns addressed with AI-enabled techniques; (2) What are the algorithms employed and how they have been configured/validated; and (3) Which are the domains targeted by these techniques. The key results of the study identified six main tasks targeted through the use of artificial intelligence, like Malware Detection or Network Analysis. Support Vector Machine is the technique most frequently used in literature, however in many cases researchers do not explicitly indicate the domain where to use artificial intelligence algorithms. We conclude the paper by distilling several lessons learned and implications for software engineering researchers. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Artificial Intelligence; Data Privacy; Internet-of-things; Software Engineering For Iot; Electronic Data Interchange; Malware; Sensitive Data; Software Engineering; Support Vector Machines; Artificial Intelligence Algorithms; Cloud Infrastructures; Loss Of Control; Privacy Concerns; Quality Of Life; Sensitive Datas; Software Engineering For Internet Of Thing; Surrounding Environment; Systematic Literature Review; World Population; Internet Of Things},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Boaye Belle2022,
	author = {Boaye Belle, Alvine and Zhao, Yixi},
	title = {Evidence-Based Software Engineering: A Checklist-Based Approach to Assess the Abstracts of Reviews Self-Identifying as Systematic Reviews},
	year = {2022},
	journal = {Applied Sciences (Switzerland)},
	volume = {12},
	number = {18},
	pages = {},
	doi = {10.3390/app12189017},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85138522700&doi=10.3390%2Fapp12189017&partnerID=40&md5=92aa249f1a2ef53b4979522d27aa6e38},
	abstract = {A systematic review allows synthesizing the state of knowledge related to a clearly formulated research question as well as understanding the correlations between exposures and outcomes. A systematic review usually leverages explicit, reproducible, and systematic methods that allow reducing the potential bias that may arise when conducting a review. When properly conducted, a systematic review yields reliable findings from which conclusions and decisions can be made. Systematic reviews are increasingly popular and have several stakeholders to whom they allow making recommendations on how to act based on the review findings. They also help support future research prioritization. A systematic review usually has several components. The abstract is one of the most important parts of a review because it usually reflects the content of the review. It may be the only part of the review read by most readers when forming an opinion on a given topic. It may help more motivated readers decide whether the review is worth reading or not. But abstracts are sometimes poorly written and may, therefore, give a misleading and even harmful picture of the review’s contents. To assess the extent to which a review’s abstract is well constructed, we used a checklist-based approach to propose a measure that allows quantifying the systematicity of review abstracts i.e., the extent to which they exhibit good reporting quality. Experiments conducted on 151 reviews published in the software engineering field showed that the abstracts of these reviews had suboptimal systematicity. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Evidence-based Software Engineering; Prisma (preferred Reporting Items For Systematic Reviews And Meta-analyses) Statement; Reporting Guideline Adherence; Systematic Reviews; Systematicity},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Budgen2022,
	author = {Budgen, David and Brereton, Pearl},
	title = {Short communication: Evolution of secondary studies in software engineering},
	year = {2022},
	journal = {Information and Software Technology},
	volume = {145},
	pages = {},
	doi = {10.1016/j.infsof.2022.106840},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85123792402&doi=10.1016%2Fj.infsof.2022.106840&partnerID=40&md5=8ce019af3f0f1ec7e8eb1fd35e24f4b2},
	abstract = {Context: Other disciplines commonly employ secondary studies to address the needs of practitioners and policy-makers. Since being adopted by software engineering in 2004, many have been undertaken by researchers. Objective: To assess how the role of secondary studies in software engineering has evolved. Methods: We examined a sample of 131 secondary studies published in a set of five major software engineering journals for the years 2010, 2015 and 2020. These were categorised by their type (e.g. mapping study), their research focus (quantitative/qualitative and practice/methodological), as well as the experience of the first authors. Results: Secondary studies are now a well-established research tool. They are predominantly qualitative and there is extensive use of mapping studies to profile research in particular areas. A significant number are clearly produced as part of postgraduate study, although experienced researchers also conduct many secondary studies. They are sometimes also used as part of a multi-method study. Conclusion: Existing guidelines largely focus upon quantitative systematic reviews. Based on our findings, we suggest that more guidance is needed on how to conduct, analyse, and report qualitative secondary studies. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Experience Of Authors; Mapping Study; Qualitative Study; Systematic Review; Mapping; Experience Of Author; Mapping Studies; Multi Methods; Policy Makers; Postgraduate Studies; Qualitative Study; Research Focus; Research Tools; Software Engineering Journals; Systematic Review; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Final Open Access; Green Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Vidoni2022,
	author = {Vidoni, Melina},
	title = {A systematic process for Mining Software Repositories: Results from a systematic literature review},
	year = {2022},
	journal = {Information and Software Technology},
	volume = {144},
	pages = {},
	doi = {10.1016/j.infsof.2021.106791},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85120968413&doi=10.1016%2Fj.infsof.2021.106791&partnerID=40&md5=12d7f8668b8166d6d670d9adb9245e7b},
	abstract = {Context: Mining Software Repositories (MSR) is a growing area of Software Engineering (SE) research. Since their emergence in 2004, many investigations have analysed different aspects of these studies. However, there are no guidelines on how to conduct systematic MSR studies. There is a need to evaluate how MSR research is approached to provide a framework to do so systematically. Objective: To identify how MSR studies are conducted in terms of repository selection and data extraction. To uncover potential for improvement in directing systematic research and providing guidelines to do so. Method: A systematic literature review of MSR studies was conducted following the guidelines and template proposed by Mian et al. (which refines those provided by Kitchenham and Charters). These guidelines were extended and revised to provide a framework for systematic MSR studies. Results: MSR studies typically do not follow a systematic approach for repository selection, and many do not report selection or data extraction protocols. Furthermore, few manuscripts discuss threats to the study's validity due to the selection or data extraction steps followed. Conclusions: Although MSR studies are evidence-based research, they seldom follow a systematic process. Hence, there is a need for guidelines on how to conduct systematic MSR studies. New guidelines and a template have been proposed, consolidating related studies in the MSR field and strategies for systematic literature reviews. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Evidence-based Software Engineering; Guidelines; Mining Software Repositories; Systematic Literature Review; Extraction; Software Engineering; Context Minings; Data Extraction; Evidence Based Software Engineering; Guideline; Mining Software; Mining Software Repository; Software Engineering Research; Software Repositories; Systematic Literature Review; Systematic Process; Data Mining},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Dixit2022,
	author = {Dixit, Abhishek and Deval, Vipin and Dwivedi, Vimal Kumar and Norta, Alexander Horst and Draheim, Dirk},
	title = {Towards user-centered and legally relevant smart-contract development: A systematic literature review},
	year = {2022},
	journal = {Journal of Industrial Information Integration},
	volume = {26},
	pages = {},
	doi = {10.1016/j.jii.2021.100314},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85123032227&doi=10.1016%2Fj.jii.2021.100314&partnerID=40&md5=bd64cf2e91a1b281aa1ad2552cd8491e},
	abstract = {Smart contracts (SC) run on blockchain technology (BCT) to implement agreements between several parties. As BCT grows, organizations aim to automate their processes and engage in business collaborations using SCs. The translation of contract semantics into SC language semantics is difficult due to ambiguous contractual interpretation by the several parties and the developers. Also, an SC language itself misses the language constructs needed for semantically expressing collaboration terms. This leads to SC coding errors that result in contractual conflicts over transactions during the performance of SCs and thus, novel SC solutions incur high development and maintenance costs. Various model-based and no/low code development approaches address this issue by enabling higher abstractions in SC development. Still, the question remains unanswered how contractual parties, i.e., end-users with non-IT skills, manage to develop legally relevant SCs with ease. This study aims to (1) identify and categorize the state of the art of SC automation models, in terms of their technical features, and their legal significance, and to (2) identify new research opportunities. The review has been conducted as a systematic literature review (SLR) that follows the guidelines proposed by Kitchenham for performing SLRs in software-engineering. As a result of the implementation of the review protocol, 1367 papers are collected, and 33 of them are selected for extraction and analysis. The contributions of this article are threefold: (1) 10 different SC automation models/frameworks are identified and classified according to their technical and implementation features; (2) 11 different legal contract parameters are identified and categorized into 4 legal criteria classes; (3) a comparative analysis of SC-automation models in the context of their legal significance is conducted that identifies the degrees to which the SC-automation models are considered legally relevant. As a conclusion, we produce a comprehensive and replicable overview of the state of the art of SC automation models and a systematic measure of their legal significance to benefit practitioners in the field. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Blockchain; Business Collaboration; Legal Relevance; Ricardian Contract; Smart Contract; Automation; Codes (symbols); Semantics; Software Engineering; Automation Model; Block-chain; Business Collaboration; Contract Languages; Language Semantics; Legal Relevance; Ricardian Contract; State Of The Art; Systematic Literature Review; User-centred; Smart Contract},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@CONFERENCE{Nesterenko2022101,
	author = {Nesterenko, Oleksandr V.},
	title = {Computing Education & Technological Trends: A Systematic Review Study},
	year = {2022},
	journal = {CEUR Workshop Proceedings},
	volume = {3501},
	pages = {101 - 112},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85175719154&partnerID=40&md5=e092df1462db151a0d357b1fa617e815},
	abstract = {According to international recommendations, the quality of computing education is influenced by the consideration of modern industrial trends and IT tendency, as well as the methodology of computer curricula. The transition to a new level of industry, characterized by robotics and cyber-socialization, brings a wave of new, never-before-seen challenges to the field of IT and programming. Under such conditions, it is impossible to achieve the desired synergistic effect of learning without the formation and actualization of the appropriate information environment in higher education institutions. One of the sources of the content of such an environment can be the publications of the world scientific community registered in international scient metric databases. On these sources, it becomes possible not only to provide effective digital educational content, but also to choose and use the latest technological means of learning supporting. A targeted review of primary sources in such a database allowed for the identification, selection, synthesis and evaluation of evidence related to the following research questions: (i) what industrial technological trends are analyzed in research, (ii) what information technologies are considered in research, (iii) what strategies are reflected in publications to overcome the above challenges of computing education. According to results of this study conducted on example of software engineering, it is proposed to improve the methodological support of computing education based on ontological modeling of the requirements integration a modern development trends in industry and IT sector, international recommendations and the capabilities of technologies learning tools. This approach is a good basis for the processes of intellectualization of educational environment information systems and the construction of appropriate technological educational tools on their basis. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Digital Transformation; Educational Environment; Educational Technologies; Information Technologies; Ontologies; Quality Of Education; Software Engineering; E-learning; Educational Technology; Engineering Education; Industrial Research; Learning Systems; Robot Programming; Software Engineering; Computing Education; Condition; Digital Transformation; Educational Environment; Information Environment; Ontology's; Quality Of Education; Synergistic Effect; Systematic Review; Technological Trends; Ontology},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Dekkers20221,
	author = {Dekkers, Rob and Langhorne, Peter and Carey, Lindsey Drylie},
	title = {Making Literature Reviews Work: A Multidisciplinary Guide to Systematic Approaches},
	year = {2022},
	pages = {1 - 571},
	doi = {10.1007/978-3-030-90025-0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85172155937&doi=10.1007%2F978-3-030-90025-0&partnerID=40&md5=0e77dc219a1148e0307642a3f3fadbbe},
	abstract = {This textbook guides the reader on how to undertake high-quality literature reviews, from traditional narrative to protocol-driven reviews. The guidance covers a broad range of purposes, disciplines and research paradigms. Whether the literature review is part of a research project, doctoral study, dissertation or a stand-alone study, the book offers approaches, methods, tools, tips and guidelines to produce more effective literature reviews in an efficient manner. The numerous examples are drawn from an array of subject areas, such as economics, healthcare, education, medicine, psychology, software engineering amongst others. This makes it worthwhile for a wide range of studies and for reviews into evidence-based interventions, policies, practices and treatments. There is attention given to presenting, reporting and publishing literature reviews. With the additional clarity brought about by explanatory tables and graphs, this textbook is a ‘must-have’ for all students, researchers, academics and practitioners at any stage of their project or career when engaging with literature.In addition, citizens, policymakers and practitioners will benefit from the guidance with better insight into how literature reviews could and should have been conducted. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Literature Review Example; Literature Review For Research; Literature Review In Dissertation; Literature Reviews; Meta-aggregation; Meta-analysis; Systematic Reviews},
	type = {Book},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Hermann20221,
	author = {Hermann, Jordan and Tenbergen, Bastian and Daun, Marian},
	title = {Metrics to Estimate Model Comprehension Quality: Insights from a Systematic Literature Review},
	year = {2022},
	journal = {Complex Systems Informatics and Modeling Quarterly},
	volume = {2022},
	number = {31},
	pages = {1 - 17},
	doi = {10.7250/csimq.2022-31.01},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85169302862&doi=10.7250%2Fcsimq.2022-31.01&partnerID=40&md5=48af536718fa49b85988187993c2b3ae},
	abstract = {Conceptual models are an effective and unparalleled means to communicate complicated information with a broad variety of stakeholders in a short period of time. However, in practice, conceptual models often vary in clarity, employed features, communicated content, and overall quality. This potentially impacts model comprehension to a point where models are factually useless. To counter this, guidelines to create “good” conceptual models have been suggested. However, these guidelines are often abstract, hard to operationalize in different modeling languages, partly overlap, or even contradict one another. In addition, no comparative study of proposed guidelines exists so far. This issue is exacerbated as no established metrics to measure or estimate model comprehension for a given conceptual model exist. In this article, we present the results of a literature survey investigating 109 publications in the field and discuss metrics to measure model comprehension, their quantification, and their empirical substantiation. Results show that albeit several concrete quantifiable metrics and guidelines have been proposed, concrete evaluative recommendations are largely missing. Moreover, some suggested guidelines are contradictory, and few metrics exist that allow instantiating common frameworks for model quality in a specific way. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Graphical Representations; Literature Survey; Model Comprehension; Model Quality; Model-based Development; Model-based Engineering; Model-based Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Accepted Open Access; Green Open Access}
}

@CONFERENCE{Boaye Belle2022502,
	author = {Boaye Belle, Alvine and Zhao, Yixi},
	title = {A checklist-based approach to assess the systematicity of the abstracts of reviews self-identifying as systematic reviews},
	year = {2022},
	journal = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
	volume = {2022-December},
	pages = {502 - 506},
	doi = {10.1109/APSEC57359.2022.00071},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85149183747&doi=10.1109%2FAPSEC57359.2022.00071&partnerID=40&md5=00bf242d55a96b3e608ca32830a8ebd6},
	abstract = {Systematic reviews are crucial for various stakeholders since they allow them to make evidence-based decisions without being overwhelmed by a large volume of research. Systematic reviews are increasingly popular in the software engineering field. The abstract is one of the most important systematic review's components since it usually reflects the content of the review. It may be the only part of the review that most of the readers will read when needing to form an opinion on a given topic. Besides, the content of an abstract is usually the main information readers use to decide if they want to access the full content of the review or not. Since an abstract usually summarizes a review, readers may therefore mostly rely on that abstract to judge the quality of the review as well as its methodological rigor. However, abstracts are sometimes poorly written and may therefore give a misleading and even harmful picture of the reviews' contents. To assess abstracts, we propose a measure that allows quantifying the systematicity of reviews' abstracts i.e., the extent to which these abstracts exhibit good reporting quality. Experiments on 151 reviews published in the software engineering (SE) field showed that these reviews' abstracts exhibit a suboptimal systematicity. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Adherence To Reporting Guidelines; Evidence-based Software Engineering; Prisma (preferred Reporting Items For Systematic Reviews And Meta-analyses) Statement; Systematic Reviews; Systematicity.; Abstracting; Adherence To Reporting Guideline; Engineering Fields; Evidence Based Software Engineering; Meta-analysis; Preferred Reporting Item For Systematic Review And Meta-analyze Statement; Self-identifying; Systematic Review; Systematicity; Systematicity.; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{2022,
	title = {2022 1st International Conference on Software Engineering and Information Technology, ICoSEIT 2022},
	year = {2022},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85148249572&partnerID=40&md5=e7a2f3595419bab04a0ce0861111c18a},
	abstract = {The proceedings contain 49 papers. The topics discussed include: analysis of e-learning Indonesian student acceptance behavior in online practicum using tam and flow theory; factors affecting information assurance for big data; automatic hand sanitizer and body temperature measurement system with low liquid hand sanitizer condition notification; study of multi-modal diary service using spoken dialogue agent for self-care in elderly people; an optimized clustering model for heterogeneous cross-project defect prediction using quantum crow search; evaluation and improvement of user interface for online passport service application using user centered design approach; systematic literature review of artificial intelligence in malware detection; evaluation and user interface design recommendation using user centered design method in Finpay money application; extended finite state machine-model based testing on mobile application; analysis and redesign web navigation Telkom University using usability testing and trunk test; and user interface design pattern selection and implementation for designing a web-based transaction and goods record-keeping application for micro, small and medium enterprises. © 2023 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Estrada-Molina2022109,
	author = {Estrada-Molina, Odiel},
	title = {A Systematic Mapping of Variables Studied in Research Related to Education in Informatics And Computing},
	year = {2022},
	journal = {Journal of Engineering Education Transformations},
	volume = {36},
	number = {2},
	pages = {109 - 125},
	doi = {10.16920/jeet/2022/v36i2/22159},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85142475839&doi=10.16920%2Fjeet%2F2022%2Fv36i2%2F22159&partnerID=40&md5=5ff5331c93cb27e6c7d680f559212bee},
	abstract = {Previous theoretical studies (reviews and systematic mappings) have only focused on certain variables of the education of Informatics and Computing such as game-based learning, project-based learning, and problem-based learning. Therefore, the objective of this article was to carry out a systematic mapping (2010-2019) to determine which variables are studied in research related to the education of informatics and computing. We performed a systematic mapping to IEEE Xplore (2010-2019). The protocol corresponds to the PRISMA guidelines for systematic reviews and its contextualization to the performance of systematic mappings. When applying the protocol, 160 articles were finally selected of which 154 are indexed in Scopus (96.25%) and 132 indexed in Scopus and WoS (82.5%). The results highlight that the most studied variables are teaching programming, teaching software engineering, teamwork, collaborative learning, educational technology, assessment, project-based learning, problem-based learning, and game-based learning. There is evidence of a cause-effect relationship (multiple correlations) between the dependent variables: teaching of software engineering and teaching of programming with the independent variables: didactic models based on m-learning, e-learning, and b-learning, project-based learning, problem-based learning, artificial intelligence, and educational technology. It concludes by identifying the principal's studies (higher scientific productivity) and the most studied variables in the didactics of Informatics and Computing. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Computer Education; Engineering Education; Informatics; Programming Teaching; Software Engineering Teaching; Systematic Mapping},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Accepted Open Access; Green Open Access}
}

@CONFERENCE{Nascimento2022268,
	author = {Nascimento, Nicolas and Santos, Alan R. and Sales, Afonso and Chanin, Rafael Matone},
	title = {Teaching BDD in Active Learning Environments: A Multi-study Analysis},
	year = {2022},
	journal = {International Conference on Computer Supported Education, CSEDU - Proceedings},
	volume = {2},
	pages = {268 - 275},
	doi = {10.5220/0011057300003182},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85140881553&doi=10.5220%2F0011057300003182&partnerID=40&md5=c4710d4d40c5946ebc9867937708e390},
	abstract = {Software development practices to enhance software quality and help teams better develop collaboratively have received attention by the academic community. Among these techniques is Behavior-Driven Development (BDD), a development approach which proposes software to be developed focusing primarily on its expected behavior. Teaching-wise, introducing BDD on software engineering classes and/or training courses for software developers has become important. In this context, this study presents a body of knowledge on the impacts of teaching BDD in active learning environments (ALE). To achieve this, we have triangulated data from four data sources: (i) a systematic literature review; (ii) an expert panel with active-learning experts, (iii) a survey with participants in a software development course which teaches through active learning, and (iv) a case study on the effects of teaching and using BDD in an ALE. This study results are (i) the-state-of-the-art literature on this topic, (ii) an assessment of benefits and challenges of BDD in ALEs, and (iii) a set of best practices when teaching BDD in ALEs. We concluded that BDD has more positive than negative outcomes and we present a body of knowledge regarding BDD in ALEs. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Active Learning; Agile Development; Behavior-driven Development; Software Engineering Education; Artificial Intelligence; Boolean Functions; Computer Aided Instruction; Computer Software Selection And Evaluation; E-learning; Software Design; Surveys; Teaching; Academic Community; Active Learning; Active Learning Environment; Agile Development; Behavior-driven Development; Body Of Knowledge; Development Approach; Software Development Practices; Software Engineering Education; Software Quality; Curricula},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Restrepo-Tamayo2022688,
	author = {Restrepo-Tamayo, Luz Marcela and Gasca-Hurtado, Gloria Piedad and Muñoz, Mirna},
	title = {Building Effective Software Development Teams Based on the Personality of Its Members},
	year = {2022},
	journal = {Communications in Computer and Information Science},
	volume = {1646 CCIS},
	pages = {688 - 703},
	doi = {10.1007/978-3-031-15559-8_48},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85137984774&doi=10.1007%2F978-3-031-15559-8_48&partnerID=40&md5=2af639a577a36d504733785a5d2b93f8},
	abstract = {Software development teams are built to achieve the highest level of performance and ensure the fulfillment of the project's objectives. Social and human factors are consolidated as fundamental aspects to ensure this purpose. In addition, personality is another determining aspect to build a team due to the role played by the interaction between the members of the work team and its influence on the conformation of the software development team. Therefore, the objective of this study is to identify the procedures and recommendations that allow building software development teams based on the personality of their members. To achieve this objective, a systematic literature review was carried out with 26 primary studies, from which 14 procedures were identified to build work teams in Software Engineering, where personality is measured using psychometric tests. The results of the empirical studies allowed consolidating recommendations for assigning roles according to personality traits. The most relevant result indicates that the management of software development teams can be improved by including social and human factors within their measurement and decision-making processes. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Building Teams; Personality; Software Engineering; Systematic Literature Review; Decision Making; Human Resource Management; Software Design; Software Testing; Building Softwares; Building Team; Empirical Studies; Performance; Personality; Project Objectives; Psychometric Test; Software Development Teams; Systematic Literature Review; Work Team; Human Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{2022,
	title = {5th International Conference on Big Data Cloud and Internet of Things, BDIoT 2021},
	year = {2022},
	journal = {Lecture Notes in Networks and Systems},
	volume = {489 LNNS},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85135016710&partnerID=40&md5=4189971b161c9bc23ec72a9540f7da19},
	abstract = {The proceedings contain 44 papers. The special focus in this conference is on Big Data Cloud and Internet of Things. The topics include: A Hybrid Machine Learning Method for Movies Recommendation; The Retirement Supply Chain Improvement Using L-SCOR; Toward a Self-adaptive Supply Chains: L-SCOR Implementation Proposal, and Case Studies Methodology Proposal; policy Gradient for Arabic to English Neural Machine Translation; sentiment Analysis of Moroccan Dialect Using Deep Learning; automatic Key-Phrase Extraction: Empirical Study of Graph-Based Methods; a Hybrid Learning Approach for Text Classification Using Natural Language Processing; Transformer Model and Convolutional Neural Networks (CNNs) for Arabic to English Machine Translation; Implicit JSON Schema Versioning Triggered by Temporal Updates to JSON-Based Big Data in the τJSchema Framework; empirical Study: What is the Best N-Gram Graphical Indexing Technique; a Study of Machine Learning Based Approach for Hotels’ Matching; home Automation and Machine Learning Models for Health Monitoring; machine Learning for Used Cars Price Prediction: Moroccan Use Case; a Systematic Literature Review of Machine Learning Applications in Software Engineering; prediction of Risks in Intelligent Transport Systems; A Smart Healthcare Imbalanced Classes Model Using Multi Conditional-Task GAN; new Deep Learning Architecture for Improving the Accuracy and the Inference Time of Traffic Signs Classification in Intelligent Vehicles; A Review of the State of Higher Education in MOROCCO at the Time of Covid-19; collaboration in Adaptive E Learning; personalization Between Pedagogy and Adaptive Hypermedia System; Application of Artificial Intelligence to X-ray Image-Based Coronavirus Diseases (COVID-19) for Automatic Detection; Predicting the Mode of Transport from GPS Trajectories; detection of Appliance-Level Abnormal Energy Consumption in Buildings Using Autoencoders and Micro-moments. © 2022 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Alvear-Suárez2022,
	author = {Alvear-Suárez, Alcides and Alvear-Otálora, Felipe},
	title = {Software development model in Small and Medium Enterprises: A still uncertain process},
	year = {2022},
	journal = {Iberian Conference on Information Systems and Technologies, CISTI},
	volume = {2022-June},
	pages = {},
	doi = {10.23919/CISTI54924.2022.9820075},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85134799970&doi=10.23919%2FCISTI54924.2022.9820075&partnerID=40&md5=c8da9d191143c45e77236a6f9d3b85ce},
	abstract = {The Systematic Literature Review (SLR) objective was to search for evidence and investigate the state of the art of hybrid software development methodologies and answer the following research questions. RQ1: What hybrid software development methods have been reported in the literature in the context of Small and Medium Enterprises (SMEs)? RQ2: What challenges are faced by software development SMEs in the adoption, execution, and governance of projects carried out with hybrid methodologies? RQ3. What are the best practices reported in the literature to successfully adopt hybrid methods in SMEs? To justify the SRL, the "Information and Software Technology" database was used, the search string was tested: Systematic Literature Review AND Hybrid Software Development AND Small and Medium Enterprise. The search yielded 43 articles, of which 6 analyzed study topics similar to those proposed for this research but did not focus on the particular context of SMEs. Taking into account the limitations of any SLR, the analysis carried out allows us to understand what has been the evolution of the methodologies in the last decade and extends the frontiers of understanding to conclude that hybrid methodologies constitute a field of software engineering, which can still mature to give more scientific support to this branch of knowledge. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Hybrid Methods; Software Development; Enterprise Software; Software Testing; Hybrid Method; Hybrid Methodologies; Research Questions; Small-and-medium Enterprise; Software Development Methodologies; Software Development Methods; Software Development Models; State Of The Art; Systematic Literature Review; Uncertain Process; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Ahmed2022112,
	author = {Ahmed, Sharif and Ahmed, Arif and Eisty, Nasir U.},
	title = {Automatic Transformation of Natural to Unified Modeling Language: A Systematic Review},
	year = {2022},
	pages = {112 - 119},
	doi = {10.1109/SERA54885.2022.9806783},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85134346533&doi=10.1109%2FSERA54885.2022.9806783&partnerID=40&md5=fbd8853cfb88bf2c5fa3505d1c985193},
	abstract = {Context: Processing Software Requirement Specifications (SRS) manually takes a much longer time for requirement analysts in software engineering. Researchers have been working on making an automatic approach to ease this task. Most of the existing approaches require some intervention from an analyst or are challenging to use. Some automatic and semi-automatic approaches were developed based on heuristic rules or machine learning algorithms. However, there are various constraints to the existing approaches to UML generation, such as restrictions on ambiguity, length or structure, anaphora, incompleteness, atomicity of input text, requirements of domain ontology, etc. Objective: This study aims to better understand the effectiveness of existing systems and provide a conceptual framework with further improvement guidelines. Method: We performed a systematic literature review (SLR). We conducted our study selection into two phases and selected 70 papers. We conducted quantitative and qualitative analyses by manually extracting information, cross-checking, and validating our findings. Result: We described the existing approaches and revealed the issues observed in these works. We identified and clustered both the limitations and benefits of selected articles. Conclusion: This research upholds the necessity of a common dataset and evaluation framework to extend the research consistently. It also describes the significance of natural language processing obstacles researchers face. In addition, it creates a path forward for future research. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Natural Language Processing; Requirement Elicitation; Software Engineering; Unified Modeling Language; Heuristic Algorithms; Natural Language Processing Systems; Requirements Engineering; Software Engineering; Unified Modeling Language; Automatic Approaches; Automatic Transformations; Context Processing; Language Processing; Natural Language Processing; Natural Languages; Processing Software; Requirements Elicitation; Software Requirements Specifications; Systematic Review; Learning Algorithms},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Patel2022235,
	author = {Patel, Akshit Raj and Tyagi, Sulabh},
	title = {Lightweight Review: Challenges and Benefits of Adopting DevOps},
	year = {2022},
	pages = {235 - 237},
	doi = {10.1109/ICI53355.2022.9786902},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85133300282&doi=10.1109%2FICI53355.2022.9786902&partnerID=40&md5=9072caedf8952ecde55b0bf6e72223f3},
	abstract = {This review gives a clear picture of DevOps and its benefits when it is adopted by an organization. This study is based on the formal guidelines for the systematic literature review process. We used the standard methodology for the preparation of literature review, we employed a manual search with the use of search strings that have a DevOps as a center topic and this manual search has been done on four databases. The objective of this study is to review the current status of DevOps from 2010 to 2020 using primary and secondary studies to review the articles related to DevOps. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile; Benefits; Continuous Delivery; Devops; Devops Practices; Slr Tools; Software Engineering; A-center; Agile; Benefit; Continuous Delivery; Current Status; Devops Practice; Literature Reviews; Review Process; Slr Tool; Systematic Literature Review; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Farooq202260341,
	author = {Farooq, Muhammad Shoaib and Hamid, Ayza and Alvi, Atif and Omer, Uzma},
	title = {Blended Learning Models, Curricula, and Gamification in Project Management Education},
	year = {2022},
	journal = {IEEE Access},
	volume = {10},
	pages = {60341 - 60361},
	doi = {10.1109/ACCESS.2022.3180355},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85131712093&doi=10.1109%2FACCESS.2022.3180355&partnerID=40&md5=72e0e645a829a1693fa32725797f2da2},
	abstract = {Project management learning involves realization of the project management's knowledge areas, familiarity with advanced tools as well as developing abilities like critical thinking and decision-making. The majority of inexperienced project managers struggle to achieve these essential skills. Teaching project management is sometimes difficult due to the involvement of practical implementation along with delivering the theoretical concepts. The subject has been explored in a variety of ways by the research community highlighting the enhancements in teaching methodologies and curricula as well as the applications of alternative approaches such as blended learning and gamification. This study systematically identifies and examines the state-of-the-art in project management education by evaluating the improvements attempted through blended learning models, curricula, and gamification. The primary goal of this work is to summarize the impact of the aforementioned facets in project management education by evaluating the empirically verified research. The key findings represent that most of the studies used the mixed blended learning model, which combines advanced online and the traditional face-to-face educational practices. Moreover, the research emphasizes the modifications and improvements in existing curricula in order to achieve what the industry requires from the project managers. In addition, an imbalance has been observed in the use of gamification for the specific knowledge areas where most of the gamification is focused on communication management while the procurement and stakeholder management appeared to be neglected areas. Furthermore, this study proposes a taxonomy, which is designed to summarize the fundamental components of blended learning along with their advantages. The challenges and gaps as open issues are also presented in the area of project management education. Additionally, this research suggests a project centric model to enhance the learning outcomes of project management courses and provides guidelines for instructors to improve the blended learning and gamification experience for students of project management courses. Finally, the prospects of future research have been offered to the fellow researchers and practitioners engaged in project management education. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Approaches; Blended Learning; Curriculum; Gamification; Project Management Education; Systematic Review; Decision Making; Education Computing; Learning Systems; Project Management; Software Engineering; Teaching; Approach; Blended Learning; Gamification; Guideline; Hybrid Learning; Learning Models; Management Course; Project Management Education; Software; Systematic Review; Curricula},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Odong2022409,
	author = {Odong, Lawrence Araa and Perini, Anna and Susi, Angelo},
	title = {Requirements Engineering for Collaborative Artificial Intelligence Systems: A Literature Survey},
	year = {2022},
	journal = {Lecture Notes in Business Information Processing},
	volume = {446 LNBIP},
	pages = {409 - 425},
	doi = {10.1007/978-3-031-05760-1_24},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85130883788&doi=10.1007%2F978-3-031-05760-1_24&partnerID=40&md5=9f8cfc3a90650ee99cc126c0ea8f8f64},
	abstract = {Artificial Intelligence (AI) systems are pervasively exploited to manipulate large sets of data, support data-driven decisions, as well as to replace or collaborate with humans in performing boring tasks that require high level precision. Awareness of the need of engineering approaches that align with ethical principles is increasing and motivates attention by diverse research communities, such as AI research and Software Engineering research communities. In our research, we focus on Requirements Engineering (RE) for Collaborative Artificial Intelligence Systems (CAIS), such as robot arms that collaborate with human operators to perform repetitive and tiring tasks. A systematic literature review was conducted to assess the state of research, which resulted in the analysis of 41 research publications. Among the main findings, a set of challenges pointed out by researchers, such as the lack of a well-structured definition for CAIS requirements and the inadequacy of current standards. A discussion of these challenges and of recommendations for addressing them is proposed, taking into account similar results from recent related work. Similarly, the requirements types mentioned in the analysed literature are analysed according to categories proposed in related work. © 2025 Elsevier B.V., All rights reserved.},
	author_keywords = {Collaborative Artificial Intelligence Systems; Collaborative Robots; Machine Learning; Requirements Engineering; Collaborative Robots; Engineering Education; Intelligent Robots; Machine Learning; Software Engineering; Artificial Intelligence Systems; Collaborative Artificial Intelligence System; Data Driven Decision; Data Support; Ethical Principles; Literature Survey; Related Works; Requirement Engineering; Research Communities; Requirements Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Murillo2022357,
	author = {Murillo, Victor Giovanni Morales and Avendaño, David Eduardo Pinto and López, Franco Rojas and González-Calleros, Juan Manuel},
	title = {A Systematic Literature Review on the Hybrid Approaches for Recommender Systems},
	year = {2022},
	journal = {Computacion y Sistemas},
	volume = {26},
	number = {1},
	pages = {357 - 372},
	doi = {10.13053/CyS-26-1-4180},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85130777091&doi=10.13053%2FCyS-26-1-4180&partnerID=40&md5=77af75b941cf88bf271f562949f1804c},
	abstract = {Recommender systems represent a high economic, social, and technological impact at international level due to the most relevant technological companies have been used them as their main services considering that user experience and companies sales have been improved. For this reason, these systems are a principal research area, and the companies optimize their algorithms with hybrid approaches that combine two or more recommendation strategies. A systematic literature review on the hybrid approaches for recommender systems is generated by this work, the objectives are to analyze research line progress and to identify opportunity areas for future investigations. Further, the recent trends about challenges, methodologies, datasets, application domains and evaluation metrics on hybrid approach are identified. An art state from 2016 to 2020 is developed with information systems guide than unlike others works that use less recent guide and software engineering guide. This research will benefit recommender systems community. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Hybrid Approaches; Hybrid Recommender Systems Art State; Information Systems; Recommender Systems; Systematic Literature Review},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ali2022,
	author = {Ali, Nauman Bin and Tanveer, Binish},
	title = {A Comparison of Citation Sources for Reference and Citation-Based Search in Systematic Literature Reviews},
	year = {2022},
	journal = {E-Informatica Software Engineering Journal},
	volume = {16},
	number = {1},
	pages = {},
	doi = {10.37190/e-Inf220106},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85130247854&doi=10.37190%2Fe-Inf220106&partnerID=40&md5=87b463addc762d5f35ffad9715b50190},
	abstract = {Context: In software engineering, snowball sampling has been used as a supplementary and primary search strategy. The current guidelines recommend using Google Scholar (GS) for snowball sampling. However, the use of GS presents several challenges when using it as a source for citations and references. Objective: To compare the effectiveness and usefulness of two leading citation databases (GS and Scopus) for use in snowball sampling search. Method: We relied on a published study that has used snowball sampling as a search strategy and GS as the citation source. We used its primary studies to compute precision and recall for Scopus. Results: In this particular case, Scopus was highly effective with 95% recall and had better precision of 5.1% compared to GS’s 2.8%. Moreover, Scopus found nine additional relevant papers. On average, one would read approximately 15 extra papers in GS than Scopus to identify one additional relevant paper. Furthermore, Scopus supports batch downloading of both citations and papers’ references, has better quality metadata, and does better source filtering. Conclusion: This study suggests that Scopus seems to be more effective and useful for snowball sampling than GS for systematic secondary studies attempting to identify peer-reviewed literature. EVIE © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Citation-based; Reference-based; Search Strategy; Snowball Sampling; Snowballing; Systematic Mapping; Systematic Review; Software Engineering; Citation-based; Google Scholar; Primary Search; Reference-based; Search Strategies; Snowball Sampling; Snowballing; Systematic Literature Review; Systematic Mapping; Systematic Review; Paper},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Final Open Access; Green Open Access}
}

@ARTICLE{Botto-Tobar2022589,
	author = {Botto-Tobar, Miguel and Serebrenik, Alexander and van den Brand, Mark G.J.},
	title = {Cross-Language Plagiarism Detection: Methods, Tools, and Challenges: A Systematic Review},
	year = {2022},
	journal = {International Journal on Advanced Science, Engineering and Information Technology},
	volume = {12},
	number = {2},
	pages = {589 - 599},
	doi = {10.18517/ijaseit.12.2.14711},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85129668739&doi=10.18517%2Fijaseit.12.2.14711&partnerID=40&md5=131e7f4e0639e579f794d87accc97342},
	abstract = {Plagiarism is one of the most serious academic offenses. However, people have adopted different approaches to avoid plagiarism, such as transcribing excerpts from one language. Thus, it is challenging to realize this plagiarism form unless someone fully understands another language. Researchers have developed approaches for detecting plagiarism in a variety of different languages. However, most methods created in the past have proved effective for detecting plagiarism in papers published in a single language, most notably English. Therefore, this paper aims to provide a systematic literature review of cross-language plagiarism detection methods (CLPD) in a natural language context. The approach used to perform this study consisted of an extensive search for relevant literature through an SLR and Snowballing. Therefore, we present an overview of (i) cross-language plagiarism detection techniques; (ii) the artifacts and the aspects that were considered in the evaluation phase; and (iii) the lack of guidelines and tools for its implementation. Its contribution lies in its ability to highlight emerging cross-language plagiarism detection techniques trends. Further, we identify any of these techniques in other domains, for instance, software engineering © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Cross-language; Plagiarism Detection; Slr; Snowballing},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Final Open Access; Green Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Tran2022220103,
	author = {Tran, Huynh Khanh Vi and Börstler, Jürgen and Ali, Nauman Bin and Unterkalmsteiner, Michael},
	title = {How good are my search strings? Reflections on using an existing review as a quasi-gold standard},
	year = {2022},
	journal = {E-Informatica Software Engineering Journal},
	volume = {16},
	number = {1},
	pages = {220103},
	doi = {10.37190/e-Inf220103},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85123458181&doi=10.37190%2Fe-Inf220103&partnerID=40&md5=8bd5a599cddbd8a9ebe210d1dd40d23d},
	abstract = {Background: Systematic literature studies (SLS) have become a core research methodology in Evidence-based Software Engineering (EBSE). Search completeness, i.e., finding all relevant papers on the topic of interest, has been recognized as one of the most commonly discussed validity issues of SLSs. Aim: This study aims at raising awareness on the issues related to search string construction and on search validation using a quasi-gold standard (QGS). Furthermore, we aim at providing guidelines for search string validation. Method: We use a recently completed tertiary study as a case and complement our findings with the observations from other researchers studying and advancing EBSE. Results: We found that the issue of assessing QGS quality has not seen much attention in the literature, and the validation of automated searches in SLSs could be improved. Hence, we propose to extend the current search validation approach by the additional analysis step of the automated search validation results and provide recommendations for the QGS construction. Conclusion: In this paper, we report on new issues which could affect search completeness in SLSs. Furthermore, the proposed guideline and recommendations could help researchers implement a more reliable search strategy in their SLSs. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Automated Search Validation; Quasi-gold Standard; Search String Construction; Systematic Literature Review; Systematic Mapping Study; Software Engineering; Automated Search Validation; Automated Searches; Evidence Based Software Engineering; Gold Standards; Literature Studies; Quasi-gold Standard; Research Methodologies; Search String Construction; Systematic Literature Review; Systematic Mapping Studies; Automation},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Khan20225456,
	author = {Khan, Rafiq Ahmad and Khan, Siffat Ullah and Khan, Habib Ullah and Ilyas, Muhammad},
	title = {Systematic Literature Review on Security Risks and its Practices in Secure Software Development},
	year = {2022},
	journal = {IEEE Access},
	volume = {10},
	pages = {5456 - 5481},
	doi = {10.1109/ACCESS.2022.3140181},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85122573397&doi=10.1109%2FACCESS.2022.3140181&partnerID=40&md5=466a18a27ac4b5b220b4b6e06a57bc5a},
	abstract = {Security is one of the most critical aspects of software quality. Software security refers to the process of creating and developing software that assures the integrity, confidentiality, and availability of its code, data, and services. Software development organizations treat security as an afterthought issue, and as a result, they continue to face security threats. Incorporating security at any level of the Software Development Life Cycle (SDLC) has become an urgent requirement. Several methodologies, strategies, and models have been proposed and developed to address software security, but only a few of them give reliable evidence for creating secure software applications. Software security issues, on the other hand, have not been adequately addressed, and integrating security procedures into the SDLC remains a challenge. The major purpose of this paper is to learn about software security risks and practices so that secure software development methods can be better designed. A systematic literature review (SLR) was performed to classify important studies to achieve this goal. Based on the inclusion, exclusion, and quality assessment criteria, a total of 121 studies were chosen. This study identified 145 security risks and 424 best practices that help software development organizations to manage the security in each phase of the SDLC. To pursue secure SDLC, this study prescribed different security activities, which should be followed in each phase of the SDLC. Successful integration of these activities minimizing effort, time, and budget while delivering secure software applications. The findings of this study assist software development organizations in improving the security level of their software products and also enhancing their security efficiency. This will raise the developer's awareness of secure development practices as well. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Sdlc; Secure Software Development; Secure Software Engineering; Security Risks And Practices; Software Security; Systematic Literature Review; Application Programs; Budget Control; Computer Software Selection And Evaluation; Life Cycle; Risks; Software Design; Code; Secure Software Development; Secure Software Engineering; Security; Security Practice; Security Risks; Software; Software Development Life-cycle; Software Security; Systematic; Systematic Literature Review; Software Testing},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Fawzy20224969,
	author = {Fawzy, Dina and Moussa, Sherin M. and Badr, Nagwa L.},
	title = {The Internet of Things and Architectures of Big Data Analytics: Challenges of Intersection at Different Domains},
	year = {2022},
	journal = {IEEE Access},
	volume = {10},
	pages = {4969 - 4992},
	doi = {10.1109/ACCESS.2022.3140409},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85122563126&doi=10.1109%2FACCESS.2022.3140409&partnerID=40&md5=eb44e0b13726f2878a9b02c85b377cb2},
	abstract = {The current exponential advancements in the Internet of Things (IoT) technologies pave a vast intelligent computing platform by integrating smart objects with sensing, processing and communication capabilities. The core element of IoT is the complex big data generated from different interconnected sources at real-time, presenting divergent processing and analysis challenges. Best practices in software engineering have been continuously addressed in IoT technologies to handle such big data efficiently at different domains. Despite of the massive studies dedicated for IoT, no explicit processing architecture is proposed based on real investigation of software engineering concepts and big data analytics characteristics in IoT. This paper provides a systematic literature review for the current state-of-the-art of IoT systems in different domains. The study investigates the current techniques and technologies that serve IoT systems from the big data analytics and software engineering perspectives, revealing a matrix for the specific IoT data features and their encountered challenges and gaps for each domain. The review deduces a proposed domain-independent software architecture for big IoT data analytics, maintaining various IoT data processing challenges, including data scalability, timeliness, heterogeneity, inconsistency, confidentiality and correlations. Finally, the main research gaps are emphasized for future considerations. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Big Data; Data Mining; Internet Of Things; Iot; Software Engineering; Big Data; Data Handling; Internet Of Things; Software Architecture; 'current; Communication Capabilities; Computing Platform; Different Domains; Exponentials; Internet Of Things Technologies; Iot; Processing Capability; Smart Objects; Systematic; Data Mining},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Bharti2022230,
	author = {Bharti, Sarveshwar and Singh, Hardeep},
	title = {Proactively managing clones inside an IDE: a systematic literature review},
	year = {2022},
	journal = {International Journal of Computers and Applications},
	volume = {44},
	number = {3},
	pages = {230 - 249},
	doi = {10.1080/1206212X.2020.1720952},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85078960308&doi=10.1080%2F1206212X.2020.1720952&partnerID=40&md5=02f74ffef48941e1b485953a11dfec91},
	abstract = {Managing clones proactively is one of the hot research areas under Software Cloning domain. Researchers of the Clone Research Community argue that it is better to avoid clones rather than to refactor them. Integrated Clone Management Systems are the ways of implementing preventive (proactive) clone management approaches and are basically implemented as an add-on to the Integrated Development Environments. There are different techniques that are implemented as an add-on to IDEs, thus, literature has a corpus of plug-in tools that need to be organized and analyzed to have an efficient plug-in in the future. To identify the related literature, the well-known methodology proposed by Kitchenham [Guidelines for Performing Systematic Literature Reviews in Software Engineering. Keele University and University of Durham, EBSE Technical Report; 2007.; Procedures for performing systematic reviews. School of Computer Science and Mathematics, Keele University, Keele, Technical Report; 2004] for conducting systematic literature review is adopted in this paper along with the snowballing technique. Utilizing these techniques, near about 33 IDE based real-time code clone detection tools are identified. This paper presents a comprehensive and systematic literature review of all the clone management techniques found in the literature that are integrated with the software development environments as a plug-in tool. An in-depth investigation and comparative analysis of all the plug-ins is carried out in this survey paper so that the future work can be identified for the further research under this domain. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Plug-in Tools; Proactive Clone Management; Real-time Code Clone Detection; Systematic Literature Review; Clone Cells; Engineering Research; Environmental Management; Integrodifferential Equations; Software Design; Clone Management; Comparative Analysis; Integrated Development Environment; Plug-ins; Real-time Codes; Research Communities; Software Development Environment; Systematic Literature Review; Cloning},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Demi2021391,
	author = {Demi, Selina and Sánchez-Gordón, Mary and Colomo-Palacios, Ricardo},
	title = {What have we learnt from the challenges of (semi-) automated requirements traceability? A discussion on blockchain applicability},
	year = {2021},
	journal = {IET Software},
	volume = {15},
	number = {6},
	pages = {391 - 411},
	doi = {10.1049/sfw2.12035},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85128376973&doi=10.1049%2Fsfw2.12035&partnerID=40&md5=bbdb288ff8e863615d81b2f7264e0e95},
	abstract = {Over the last 3 decades, researchers have attempted to shed light into the requirements traceability problem by introducing tracing tools, techniques, and methods with the vision of achieving ubiquitous traceability. Despite the technological advances, requirements traceability remains problematic for researchers and practitioners. This study aims to identify and investigate the main challenges in implementing (semi-)automated requirements traceability, as reported in the recent literature. A systematic literature review was carried out based on the guidelines for systematic literature reviews in software engineering, proposed by Kitchenham. We retrieved 4530 studies by searching five major bibliographic databases and selected 70 primary studies. These studies were analysed and classified according to the challenges they present and/or address. Twenty-one challenges were identified and were classified into five categories. Findings reveal that the most frequent challenges are technological challenges, in particular, low accuracy of traceability recovery methods. Findings also suggest that future research efforts should be devoted to the human facet of tracing, to explore traceability practices in organisational settings, and to develop traceability approaches that support agile and DevOps practices. Finally, it is recommended that researchers leverage blockchain technology as a suitable technical solution to ensure the trustworthiness of traceability information in interorganisational software projects. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Blockchain; Software Engineering; Block-chain; Classifieds; Learn+; Organizational Setting; Recovery Methods; Requirements Traceability; Research Efforts; Systematic Literature Review; Technological Advances; Technological Challenges; Information Services},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Shamsujjoha2021,
	author = {Shamsujjoha, Md and Grundy, John C. and Li, Li and Khalajzadeh, Hourieh and Lu, Qinghua},
	title = {Developing Mobile Applications Via Model Driven Development: A Systematic Literature Review},
	year = {2021},
	journal = {Information and Software Technology},
	volume = {140},
	pages = {},
	doi = {10.1016/j.infsof.2021.106693},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85112044746&doi=10.1016%2Fj.infsof.2021.106693&partnerID=40&md5=d2141848defeb6f1e01d343dec56af69},
	abstract = {Context: Mobile applications (known as “apps”) usage continues to rapidly increase, with many new apps being developed and deployed. However, developing a mobile app is challenging due to its dependencies on devices, technologies, platforms, and deadlines to reach the market. One potential approach is to use Model Driven Development (MDD) techniques that simplify the app development process, reduce complexity, increase abstraction level, help achieve scalable solutions and maximize cost-effectiveness and productivity. Objective: This paper systematically investigates what MDD techniques and methodologies have been used to date to support mobile app development and how these techniques have been employed, to identify key benefits, limitations, gaps and future research potential. Method: A Systematic Literature Review approach was used for this study based on a formal protocol. The rigorous search protocol identified a total of 1,042 peer-reviewed academic research papers from four major software engineering databases. These papers were subsequently filtered, and 55 high quality relevant studies were selected for analysis, synthesis, and reporting. Results: We identified the popularity of different applied MDD approaches, supporting tools, artifacts, and evaluation techniques. Our analysis found that architecture, domain model, and code generation are the most crucial purposes in MDD-based app development. Three qualities – productivity, scalability and reliability – can benefit from these modeling strategies. We then summarize the key collective strengths, limitations, gaps from the studies and made several future recommendations. Conclusion: There has been a steady interest in MDD approaches applied to mobile app development over the years. This paper guides future researchers, developers, and stakeholders to improve app development techniques, ultimately that will help end-users in having more effective apps, especially when some recommendations are addressed, e.g., taking into account more human-centric aspects in app development. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Mobile App; Model Driven Development; Systematic Literature Review; Tools And Techniques; Cost Effectiveness; Mobile Computing; Productivity; Software Engineering; Academic Research; Collective Strength; Development Process; Development Technique; Mobile Applications; Research Potential; Software Engineering Database; Systematic Literature Review; Quality Control},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Myllyaho2021,
	author = {Myllyaho, Lalli and Raatikainen, Mikko and Männistö, Tomi and Mikkonen, Tommi and Nurminen, Jukka K.},
	title = {Systematic literature review of validation methods for AI systems},
	year = {2021},
	journal = {Journal of Systems and Software},
	volume = {181},
	pages = {},
	doi = {10.1016/j.jss.2021.111050},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85112415717&doi=10.1016%2Fj.jss.2021.111050&partnerID=40&md5=87ecc7d1473afa29a59cb4369a736e9c},
	abstract = {Context: Artificial intelligence (AI) has made its way into everyday activities, particularly through new techniques such as machine learning (ML). These techniques are implementable with little domain knowledge. This, combined with the difficulty of testing AI systems with traditional methods, has made system trustworthiness a pressing issue. Objective: This paper studies the methods used to validate practical AI systems reported in the literature. Our goal is to classify and describe the methods that are used in realistic settings to ensure the dependability of AI systems. Method: A systematic literature review resulted in 90 papers. Systems presented in the papers were analysed based on their domain, task, complexity, and applied validation methods. Results: The validation methods were synthesized into a taxonomy consisting of trial, simulation, model-centred validation, and expert opinion. Failure monitors, safety channels, redundancy, voting, and input and output restrictions are methods used to continuously validate the systems after deployment. Conclusions: Our results clarify existing strategies applied to validation. They form a basis for the synthesization, assessment, and refinement of AI system validation in research and guidelines for validating individual systems in practice. While various validation strategies have all been relatively widely applied, only few studies report on continuous validation. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Artificial Intelligence; Machine Learning; Systematic Literature Review; Testing; V&v; Validation; Software Engineering; Ai Systems; Domain Knowledge; Expert Opinion; Individual Systems; Input And Outputs; Synthesization; Systematic Literature Review; Validation Strategies; Artificial Intelligence},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Final Open Access; Green Open Access; Hybrid Gold Open Access}
}

@CONFERENCE{Sultana2021,
	author = {Sultana, Sayma and Sarker, Jaydeb and Bosu, Amiangshu},
	title = {A Rubric to identify misogynistic and sexist texts from software developer communications},
	year = {2021},
	journal = {International Symposium on Empirical Software Engineering and Measurement},
	pages = {},
	doi = {10.1145/3475716.3484189},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85117936170&doi=10.1145%2F3475716.3484189&partnerID=40&md5=669f2a62f51e70b26b4b014963500c4d},
	abstract = {Background: As contemporary software development organizations are dominated by males, occurrences of misogynistic and sexist remarks are abundant in many communities. Such remarks are barriers to promoting diversity and inclusion in the software engineering (SE) domain. Aims: This study aims to develop a rubric to identify misogynistic remarks and sexist jokes specifically from software developer communications. Method: We have followed the systematic literature review protocol to identify 10 primary studies that have characterized misogynistic and sexist texts in various domains. Results: Based on our syntheses of the primary studies, we have developed a rubric to manually identity various categories of misogynistic or sexist remarks.We have also provided SE domain specific examples of those categories. Conclusions: Our annotation guideline will pave the path towards building automated misogynistic text classifier for the SE domain. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Misogynistic Text; Sexist Joke; Software Developer; Classification (of Information); Developers' Communications; Domain Specific; Misogynistic Text; Sexist Joke; Software Developer; Software Development Organizations; Software Engineering Domain; Systematic Literature Review; Text Classifiers; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{John2021334,
	author = {John, Meenu Mary and Olsson, Helena Holmström and Bosch, Jan},
	title = {Towards MLOps: A Framework and Maturity Model},
	year = {2021},
	pages = {334 - 341},
	doi = {10.1109/SEAA53835.2021.00050},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85119201202&doi=10.1109%2FSEAA53835.2021.00050&partnerID=40&md5=bf1caca73958a7678ed11a8b5854bb29},
	abstract = {The adoption of continuous software engineering practices such as DevOps (Development and Operations) in business operations has contributed to significantly shorter software development and deployment cycles. Recently, the term MLOps (Machine Learning Operations) has gained increasing interest as a practice that brings together data scientists and operations teams. However, the adoption of MLOps in practice is still in its infancy and there are few common guidelines on how to effectively integrate it into existing software development practices. In this paper, we conduct a systematic literature review and a grey literature review to derive a framework that identifies the activities involved in the adoption of MLOps and the stages in which companies evolve as they become more mature and advanced. We validate this framework in three case companies and show how they have managed to adopt and integrate MLOps in their large-scale software development companies. The contribution of this paper is threefold. First, we review contemporary literature to provide an overview of the state-of-the-art in MLOps. Based on this review, we derive an MLOps framework that details the activities involved in the continuous development of machine learning models. Second, we present a maturity model in which we outline the different stages that companies go through in evolving their MLOps practices. Third, we validate our framework in three embedded systems case companies and map the companies to the stages in the maturity model. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Framework; Glr; Maturity Model; Mlops; Slr; Validation Study; Embedded Systems; Machine Learning; Continuous Software Engineerings; Framework; Framework Models; Glr; Machine Learning Operation; Machine-learning; Maturity Model; Slr; Software Engineering Practices; Validation Study; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Zhang2021,
	author = {Zhang, He and Mao, Runfeng and Huang, Huang and Dai, Qiming and Zhou, Xin and Shen, Haifeng and Rong, Guoping},
	title = {Processes, challenges and recommendations of Gray Literature Review: An experience report},
	year = {2021},
	journal = {Information and Software Technology},
	volume = {137},
	pages = {},
	doi = {10.1016/j.infsof.2021.106607},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85105337930&doi=10.1016%2Fj.infsof.2021.106607&partnerID=40&md5=c5c494b1d51c50f1081f19fb40cfe9c2},
	abstract = {Context: Systematic Literature Review (SLR), as a tool of Evidence-Based Software Engineering (EBSE), has been widely used in Software Engineering (SE). However, for certain topics in SE, especially those that are trendy or industry driven, academic literature is generally scarce and consequently Gray Literature (GL) becomes a major source of evidence. In recent years, the adoption of Gray Literature Review (GLR) or Multivocal Literature Review (MLR) is rising steadily to provide the state-of-the-practice of a specific topic where SLR is not a viable option. Objective: Although some SLR guidelines recommend the use of GL and several MLR guidelines have already been proposed in SE, researchers still have conflicting views on the value of GL and commonly accepted GLR or MLR studies are generally lacking in terms of publication. This experience report aims to shed some light on GLR through a case study that uses SLR and MLR guidelines to conduct a GLR on an emerging topic in SE to specifically answer the questions related to the reasons of using GL, the processes of conducting GL, and the impacts of GL on review results. Method: We retrospect the review process of conducting a GLR on the topic of DevSecOps with reference to Kitchenham's SLR and Garousi's MLR guidelines. We specifically reflect on the processes we had to adapt in order to tackle the challenges we faced. We also compare and contrast our GLR with existing MLRs or GLRs in SE to contextualize our reflections. Results: We distill ten challenges in nine activities of a GLR process. We provide reasons for these challenges and further suggest ways to tackle them during a GLR process. We also discuss the decision process of selecting a suitable review methodology among SLR, MLR and GLR and elaborate the impacts of GL on our review results. Conclusion: Although our experience on GLR is mainly derived from a specific case study on DevSecOps, we conjecture that it is relevant and would be beneficial to other GLR or MLR studies. We also expect our experience would contribute to future GLR or MLR guidelines, in a way similar to how SLR guidelines learned from the SLR experience report a dozen years ago. In addition, other researchers may find our decision making process useful before they conduct their own reviews. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Devsecops; Evidence-based Software Engineering; Gray Literature Review; Decision Making; Academic Literature; Decision Making Process; Decision Process; Evidence Based Software Engineerings (ebse); Experience Report; Literature Reviews; State Of The Practice; Systematic Literature Review (slr); Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Papadopoulos20211528,
	author = {Papadopoulos, Alessandro V. and Versluis, Laurens and Bauer, Andre and Herbst, Nikolas Roman and von Kistowski, Jóakim V. and Ali-Eldin, Ahmed and Abad, Cristina L. and Amaral, José Nelson and Tůma, Petr and Iosup, Alexandru},
	title = {Methodological Principles for Reproducible Performance Evaluation in Cloud Computing},
	year = {2021},
	journal = {IEEE Transactions on Software Engineering},
	volume = {47},
	number = {8},
	pages = {1528 - 1543},
	doi = {10.1109/TSE.2019.2927908},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85069901345&doi=10.1109%2FTSE.2019.2927908&partnerID=40&md5=087782b1ccf64e2ef1b0313de225eae3},
	abstract = {The rapid adoption and the diversification of cloud computing technology exacerbate the importance of a sound experimental methodology for this domain. This work investigates how to measure and report performance in the cloud, and how well the cloud research community is already doing it. We propose a set of eight important methodological principles that combine best-practices from nearby fields with concepts applicable only to clouds, and with new ideas about the time-accuracy trade-off. We show how these principles are applicable using a practical use-case experiment. To this end, we analyze the ability of the newly released SPEC Cloud IaaS benchmark to follow the principles, and showcase real-world experimental studies in common cloud environments that meet the principles. Last, we report on a systematic literature review including top conferences and journals in the field, from 2012 to 2017, analyzing if the practice of reporting cloud performance measurements follows the proposed eight principles. Worryingly, this systematic survey and the subsequent two-round human reviews, reveal that few of the published studies follow the eight experimental principles. We conclude that, although these important principles are simple and basic, the cloud community is yet to adopt them broadly to deliver sound measurement of cloud environments. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Experimental Evaluation; Experimentation; Observation Study; Architectural Acoustics; Cloud Computing; Economic And Social Effects; Engineering Research; Software Engineering; Software Testing; Benchmark Testing; Computer Performance; Experimental Evaluation; Experimentation; Observation Study; Performance Evaluation; Systematics; Benchmarking},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Chen20211483,
	author = {Chen, Fangwei and Zhang, Li and Lian, Xiaoli},
	title = {A systematic gray literature review: The technologies and concerns of microservice application programming interfaces},
	year = {2021},
	journal = {Software - Practice and Experience},
	volume = {51},
	number = {7},
	pages = {1483 - 1508},
	doi = {10.1002/spe.2967},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85102647140&doi=10.1002%2Fspe.2967&partnerID=40&md5=b040547384c43dac6a2c5639b1d4bd9e},
	abstract = {The microservice application programming interface (API) becomes a growing concern in the IT industry, as a result of the increasing usage of microservice architecture style. There exist many successful practices among companies, communities, and so on. In contrast, the related academic research is still at an early stage, where lacks an overview of technologies for the design, implementation and operation of microservice APIs, as well as a general picture of concerns. In this article, we try to fill this gap by eliciting the technologies and concerns on microservice APIs and establishing a microservice API description model, with the intention of aiding researchers to gain an overview of this field and find possible research directions, and helping practitioners to better understand microservice APIs and be aware of the existing approaches for daily work. Twelve academic papers and 38 gray literatures are selected and analyzed following the systematic literature review approach. Besides, we give our observations from this study. For researchers, our findings show the most cared concerns of practitioners, and our description model can be used as a reference for new theories, experiments, and future research dimensions. For practitioners, our study can be used as a guideline for microservices experimentation and a starting point for practice. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Microservice; Systematic Gray Literature Review; The Microservice Apis; Computer Software; Software Engineering; Academic Paper; Academic Research; Architecture Styles; Description Model; It Industry; Literature Reviews; New Theory; Systematic Literature Review; Application Programming Interfaces (api)},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Almeida2021,
	author = {Almeida, Cleuton},
	title = {Guideline Proposal for Quality Evaluation of for Research in Education Research in Software Engineering},
	year = {2021},
	journal = {Iberian Conference on Information Systems and Technologies, CISTI},
	pages = {},
	doi = {10.23919/CISTI52073.2021.9476586},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85115784686&doi=10.23919%2FCISTI52073.2021.9476586&partnerID=40&md5=8cd0220d869e69ee68169b3ffe5a880f},
	abstract = {Context: The lack of rigor in research in Computer Science Education, including Software Engineering, has already been discussed and examined in previous researches of the literature in both the theoretical and methodological aspects, which may result in questionable evidence. Aim: Improvement of planning conditions for research in Education in Software Engineering through a Guideline. Methodology: To achieve this objective, a Systematic Literature Review will be carried out to ascertain the gaps found in the literature in Education in Software Engineering, in addition to Interviews with researchers in Education in Software Engineering to report the problems found in research. From this, a Guideline will be modeled using the method Grounded Theory. For model validation, a Survey and Focus groups with researchers in education in Software Engineering. And finally, apply it in a Case Study with researchers in Education in Software Engineering to present the practical contributions of the proposed Guideline. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Guideline; Quality Criteria; Software Engineering Education Research; Education Computing; Engineering Education; Engineering Research; Information Systems; Information Use; Education Research; Engineering Education Research; Guideline; Methodological Aspects; Quality Criteria; Quality Evaluation; Research In Computer Science Education; Software Engineering Education; Software Engineering Education Research; Theoretical Aspects; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Auer2021,
	author = {Auer, Florian and Ros, Rasmus and Kaltenbrunner, Lukas and Runeson, Per and Felderer, Michael},
	title = {Controlled experimentation in continuous experimentation: Knowledge and challenges},
	year = {2021},
	journal = {Information and Software Technology},
	volume = {134},
	pages = {},
	doi = {10.1016/j.infsof.2021.106551},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85101342705&doi=10.1016%2Fj.infsof.2021.106551&partnerID=40&md5=0e391e2a58af568c7df0e6606082cd91},
	abstract = {Context: Continuous experimentation and A/B testing is an established industry practice that has been researched for more than 10 years. Our aim is to synthesize the conducted research. Objective: We wanted to find the core constituents of a framework for continuous experimentation and the solutions that are applied within the field. Finally, we were interested in the challenges and benefits reported of continuous experimentation. Methods: We applied forward snowballing on a known set of papers and identified a total of 128 relevant papers. Based on this set of papers we performed two qualitative narrative syntheses and a thematic synthesis to answer the research questions. Results: The framework constituents for continuous experimentation include experimentation processes as well as supportive technical and organizational infrastructure. The solutions found in the literature were synthesized to nine themes, e.g. experiment design, automated experiments, or metric specification. Concerning the challenges of continuous experimentation, the analysis identified cultural, organizational, business, technical, statistical, ethical, and domain-specific challenges. Further, the study concludes that the benefits of experimentation are mostly implicit in the studies. Conclusion: The research on continuous experimentation has yielded a large body of knowledge on experimentation. The synthesis of published research presented within include recommended infrastructure and experimentation process models, guidelines to mitigate the identified challenges, and what problems the various published solutions solve. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {A/b Testing; Continuous Experimentation; Online Controlled Experiments; Systematic Literature Review; Information Systems; Body Of Knowledge; Controlled Experimentation; Domain Specific; Experiment Design; Industry Practices; Organizational Infrastructure; Process Model; Research Questions; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Final Open Access; Green Open Access; Hybrid Gold Open Access}
}

@CONFERENCE{Pater2021,
	author = {Pater, Jessica A. and Pfafman, Rachel and Coupe, Amanda},
	title = {Standardizing reporting of participant compensation in hci: A systematic literature review and recommendations for the field},
	year = {2021},
	journal = {Conference on Human Factors in Computing Systems - Proceedings},
	pages = {},
	doi = {10.1145/3411764.3445734},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85106681689&doi=10.1145%2F3411764.3445734&partnerID=40&md5=a8e5fd21e484fcd9bd6884889b167674},
	abstract = {The user study is a fundamental method used in HCI. In designing user studies, we often use compensation strategies to incentivize recruitment. However, compensation can also lead to ethical issues, such as coercion. The CHI community has yet to establish best prac-tices for participant compensation. Through a systematic review of manuscripts at CHI and other associated publication venues, we found high levels of variation in the compensation strategies used within the community and how we report on this aspect of the study methods. A qualitative analysis of justifcations ofered for compensation sheds light into how some researchers are currently contextualizing this practice. This paper provides a description of current compensation strategies and information that can inform the design of compensation strategies in future studies. The fndings may be helpful to generate productive discourse in the HCI com-munity towards the development of best practices for participant compensation in user studies. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Cscw; Hci; Meta-review; Participant Payment; Ubicomp/imwut; Uist; Software Engineering; Best Practices; Compensation Strategy; Current Compensation; Ethical Issues; Qualitative Analysis; Study Methods; Systematic Literature Review; Systematic Review; Human Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Cui20211256,
	author = {Cui, Haitao and Zhang, Cheng and Ding, Xiang and Cao, Lingli and Yang, Yun},
	title = {Evaluation Framework for Development Organizations' Adaptability to Micro-services Architecture; 面向微服务架构的开发组织适应性评估框架},
	year = {2021},
	journal = {Ruan Jian Xue Bao/Journal of Software},
	volume = {32},
	number = {5},
	pages = {1256 - 1283},
	doi = {10.13328/j.cnki.jos.006232},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85105578462&doi=10.13328%2Fj.cnki.jos.006232&partnerID=40&md5=d747baf83cc60f6db7fb655156a7c7ab},
	abstract = {At present, an architectural style called microservices is receiving more and more attention. While it brings benefits to software projects, it also affects development organizations that use microservices architectures. This study's goal is to clarify the impact of microservices on the organization, whether these effects are beneficial or challenging for the organization. A systematic literature review is conducted and qualitative data are synthesized through meta-ethnography. Finally, seven aspects of using microservices architecture to affect an organization are identified, namely, organizational structure, autonomous team, technology/tool, organizational culture, developer, DevOps, and communication. At the same time, it is also found that although a lot of researches on microservices emphasizes that in order to fully obtain the expected benefits of microservices, it is necessary to solve organizational problems, currently there are few scholarly literatures published on organizational problems. Hence high quality grey literatures, which may be close to the viewpoint of industry, are also included in this study. Based on the result of systematic literature review and synthesis of qualitative data, four higher-order explanations have come up and an evaluation framework is proposed that helps companies evaluate and improve the adaptability of their development organizations to microservices architectures. The proposed evaluation framework provides the guidelines for development organizations adapt to microservices. Finally, based on the framework, this paper designed and conducted an industrial survey and interviews. The results of both confirmed the effectiveness of the adaptability evaluation framework proposed in this paper. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Evaluation Framework; Meta-ethnography; Microservice; Organization; Systematic Literature Review; Computer Software; Software Engineering; Adaptability Evaluation; Architectural Style; Evaluation Framework; Industrial Surveys; Organizational Cultures; Organizational Problems; Organizational Structures; Systematic Literature Review; Surveys},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ziarani2021375,
	author = {Ziarani, Reza Jafari and Ravanmehr, Reza},
	title = {Serendipity in Recommender Systems: A Systematic Literature Review},
	year = {2021},
	journal = {Journal of Computer Science and Technology},
	volume = {36},
	number = {2},
	pages = {375 - 396},
	doi = {10.1007/s11390-020-0135-9},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85104398918&doi=10.1007%2Fs11390-020-0135-9&partnerID=40&md5=d5df3167403956eeb9b020d55b930e81},
	abstract = {A recommender system is employed to accurately recommend items, which are expected to attract the user’s attention. The over-emphasis on the accuracy of the recommendations can cause information over-specialization and make recommendations boring and even predictable. Novelty and diversity are two partly useful solutions to these problems. However, novel and diverse recommendations cannot merely ensure that users are attracted since such recommendations may not be relevant to the user’s interests. Hence, it is necessary to consider other criteria, such as unexpectedness and relevance. Serendipity is a criterion for making appealing and useful recommendations. The usefulness of serendipitous recommendations is the main superiority of this criterion over novelty and diversity. The bulk of studies of recommender systems have focused on serendipity in recent years. Thus, a systematic literature review is conducted in this paper on previous studies of serendipity-oriented recommender systems. Accordingly, this paper focuses on the contextual convergence of serendipity definitions, datasets, serendipitous recommendation methods, and their evaluation techniques. Finally, the trends and existing potentials of the serendipity-oriented recommender systems are discussed for future studies. The results of the systematic literature review present that the quality and the quantity of articles in the serendipity-oriented recommender systems are progressing. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Evaluation Method; Evaluation Metric; Recommender System; Serendipity; Systematic Literature Review; Software Engineering; Recommendation Methods; Systematic Literature Review; Recommender Systems},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Rafi2021,
	author = {Rafi, Saima and Wu, Yu and Akbar, Muhammad Azeem and Mahmood, Sajjad L. and AlSanad, Ahmed and Gumaei, Abdu H.},
	title = {Readiness model for DevOps implementation in software organizations},
	year = {2021},
	journal = {Journal of Software: Evolution and Process},
	volume = {33},
	number = {4},
	pages = {},
	doi = {10.1002/smr.2323},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092901453&doi=10.1002%2Fsmr.2323&partnerID=40&md5=bda3a246675abaa1f7fcc1916e5c6de6},
	abstract = {DevOps is a new software engineering paradigm adopted by various software organizations to develop the quality software within time and budget. The implementation of DevOps practices is critical, and there are no guidelines to assess and improve the DevOps activities in software organizations. Hence, there is a need to develop a readiness model for DevOps (RMDevOps) with an aim to assist the practitioners for implementation of DevOps practices in software firms. To achieve the study objective, we conducted a systematic literature review (SLR) study to identify the critical challenges and associated best practices of DevOps. A total of 18 challenges and 73 best practices were identified from the 69 primary studies. The identified challenges and best practices were further evaluated by conducting a survey with industry practitioners. The RMDevOps was developed based on other well-established models in software engineering domain, for example, software process improvement readiness model (SPIRM) and software outsourcing vendor readiness model (SOVRM). Finally, case studies were conducted with three different organizations with an aim to validate the developed model. The results show that the RMDevOps is effective to assess and improve the DevOps practices in software organizations. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Best Practices; Case Study; Guidelines; Readiness Model; Budget Control; Software Quality; Critical Challenges; Quality Software; Software Engineering Domain; Software Engineering Paradigm; Software Organization; Software Outsourcing; Software Process Improvement; Systematic Literature Review (slr); Devops},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Cisneros2021210,
	author = {Cisneros, Daniela and Monzón, Fernando Huamán and Paz, Freddy A.},
	title = {Accessibility Evaluation of E-Government Web Applications: A Systematic Review},
	year = {2021},
	journal = {Lecture Notes in Computer Science},
	volume = {12780 LNCS},
	pages = {210 - 223},
	doi = {10.1007/978-3-030-78224-5_15},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85126229130&doi=10.1007%2F978-3-030-78224-5_15&partnerID=40&md5=c097970ac883f753382ebc2bf43891f4},
	abstract = {For this study a systematic literature review was conducted in order to establish how accessibility evaluations of E-Government Web applications are performed. The search was carried out in two of the most relevant databases in the Software Engineering field, obtaining 421 results. Once the previously defined inclusion and exclusion criteria were applied, 36 articles were selected as relevant. Likewise, the Pontifical Catholic University of Peru (PUCP) thesis digital repository was reviewed in order to find evaluations within the Peruvian context. In this way, it was possible to determine that: (1) most of the studies which include an accessibility evaluation are carried out in countries within the Americas region, (2) the most widely used Web accessibility guidelines are the Web 2.0 Content Accessibility Guidelines, (3) the most frequently used evaluation method is automated evaluation, (4) the most used tool is AChecker, and (5) accessibility studies generically address disabilities. Concerning the research found in the PUCP digital thesis repository, even if it did not specifically deal with a government entity, it provided an idea on the execution of Web accessibility evaluations in Peru. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Accessibility; E-government; Human-computer Interaction; Systematic Review; Web Applications; E-government; Software Engineering; Websites; Accessibility; Accessibility Evaluation; Accessibility Guidelines; E-government; Engineering Fields; Systematic Literature Review; Systematic Review; Web Accessibility; Web Application; Web Applications; Human Computer Interaction},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Tanveer2021267,
	author = {Tanveer, Binish},
	title = {Sustainable software engineering-have we neglected the software engineer's perspective?},
	year = {2021},
	pages = {267 - 270},
	doi = {10.1109/ASEW52652.2021.00059},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85125650193&doi=10.1109%2FASEW52652.2021.00059&partnerID=40&md5=4ae0c683e18882cf42298c11ed8ae077},
	abstract = {Background: Software development is a knowledge-intensive and creative activity requiring human ingenuity, thus, sustainability from an engineer's perspective (i.e., meeting an engineer's personal and professional needs while maintaining their mental and physical well-being) must be achieved and maintained. Aims: With this paper, we aim to bring attention to the currently overlooked aspect of sustainability from an individual engineer's perspective. Method: Through an analysis of systematic literature reviews and mapping studies, this research demonstrates a lack of research investigating the individual (human) dimension of sustainability in the current software engineering literature. Results: The analysis of the literature reviews reveals that the current research has mainly focused on reducing the energy footprint of software systems. Thus, revealing the renewed need for paying attention to the individual engineer's perspective. Conclusion: Future research should leverage contributions from related research areas like human aspects in software engineering (e.g., topics like cognition and motivation). There is a need for identifying factors that impact sustainability at an individual level and their interplay with the team and organization level practices, policies, and decisions. The overall ambition is to develop empirically validated guidelines and best practices to measure, improve and maintain sustainability from an engineer's perspective. Such measures are expected to ensure engineers' sustainability and enable highquality software development. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Individual Sustainability; Software De-velopment; Sustainable Software Engineering; Engineers; Software Design; 'current; Creative Activity; Energy; Human Dimensions; Individual Sustainability; Mapping Studies; Software De-velopment; Systematic Literature Review; Well Being; Sustainable Development},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Final Open Access; Green Open Access}
}

@ARTICLE{Solis-Lastra2021,
	author = {Solis-Lastra, Javier Ulises and Albertini, Bruno Carvalho},
	title = {A Light Systematic Literature Review on Remote Laboratories for Engineering},
	year = {2021},
	pages = {},
	doi = {10.1109/SHIRCON53068.2021.9652258},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85124403373&doi=10.1109%2FSHIRCON53068.2021.9652258&partnerID=40&md5=6e1f45b58b549c5f6e4f1a251a961a07},
	abstract = {This article presents a light systematic literature review focused on how remote laboratories (RLs) are being used in engineering education (EE). To achieve this objective, we analyzed the technologies used and the impact on students. The research methodology followed systematic literature review guidelines adapted from software engineering. We used three indexing databases and support software to execute the methodology. From 672 initial search results, 31 have been considered relevant studies and depicts the current state of the RLs. Most of the studies show the implementation of remote access to the equipment, and do not show the development or adaptation of teaching-learning methodologies for RLs. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Engineering Education; Impact; Remote Laboratories; Review; Technology; Laboratories; Software Engineering; 'current; Impact; Remote Access; Remote Laboratories; Research Methodologies; Systematic Literature Review; Teaching-learning; Technology; Engineering Education},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{2021,
	title = {Proceedings of 2021 International Conference on Data and Software Engineering: Data and Software Engineering for Supporting Sustainable Development Goals, ICoDSE 2021},
	year = {2021},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85124103841&partnerID=40&md5=89ad11d83ad1864e4ea572b09a7ca058},
	abstract = {The proceedings contain 34 papers. The topics discussed include: a systematic literature review on virtual laboratory for learning; a systematic review for organizing hackathons and code camps in covid-19 like times: literature in demand to understand online hackathons and event result continuation; activity-centered design of web user experience: a one-stop application for design sprints; community detection on social network using community diffusion with social influence similarity; correlation analysis on big data for legislative election; designing project management application to support developer productivity using goal directed design approach; development of blockchain-based traceability system for fishery products; evaluating control-flow graph similarity for grading programming exercises; and experiences and lessons learned from onsite and remote teamwork based courses in software engineering. © 2022 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Kruglov2021,
	author = {Kruglov, Artem V. and Strugar, Dragos and Succi, Giancarlo},
	title = {Tailored performance dashboards—an evaluation of the state of the art},
	year = {2021},
	journal = {PeerJ Computer Science},
	volume = {7},
	pages = {},
	doi = {10.7717/peerj-cs.625},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85123281438&doi=10.7717%2Fpeerj-cs.625&partnerID=40&md5=133bd933bdd177ea642619e3dd5e00f8},
	abstract = {Context. Tailoring mechanisms allow performance dashboards to vary their appearance as a response to changing requirements (e.g., adapting to multiple users or multiple domains). Objective. We analyze existing research on tailored dashboards and investigate different proposed approaches. Methodology. We performed a systematic literature review. Our search processes yielded a total of 1,764 papers, out of which we screened 1,243 and ultimately used six for data collection. Results. Tailored dashboards, while being introduced almost thirty years ago, did not receive much research attention. However, the area is expanding in recent years and we observed common patterns in novel tailoring mechanisms. Since none of the existing solutions have been running for extended periods of time in real-world scenarios, this lack of empirical data is a likely cause of vaguely described research designs and important practical issues being overlooked. Implications. Based on our findings we propose types of tailoring mechanisms taking into account the timing and nature of recommendations. This classification is grounded in empirical data and serves as a step ahead to a more unifying way of looking at tailoring capabilities in the context of dashboards. Finally, we outline a set of recommendations for future research, as well as a series of steps to follow to make studies more attractive to practitioners. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Adaptable Dashboards; Literature Review; Software Engineering; Software Process Management; Adaptable Dashboard; Empirical Data; Literature Reviews; Multiple Domains; Multiple User; Performance; Software Process Management; State Of The Art; Systematic Literature Review; User Domains; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Final Open Access; Green Open Access}
}

@ARTICLE{Lo202183,
	author = {Lo, Sin Kit and Lu, Qinghua and Paik, Hye-young Young and Zhu, Liming},
	title = {FLRA: A Reference Architecture for Federated Learning Systems},
	year = {2021},
	journal = {Lecture Notes in Computer Science},
	volume = {12857 LNCS},
	pages = {83 - 98},
	doi = {10.1007/978-3-030-86044-8_6},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85115123031&doi=10.1007%2F978-3-030-86044-8_6&partnerID=40&md5=f24136581e2eb10aee50f32a3229b232},
	abstract = {Federated learning is an emerging machine learning paradigm that enables multiple devices to train models locally and formulate a global model, without sharing the clients’ local data. A federated learning system can be viewed as a large-scale distributed system, involving different components and stakeholders with diverse requirements and constraints. Hence, developing a federated learning system requires both software system design thinking and machine learning knowledge. Although much effort has been put into federated learning from the machine learning perspectives, our previous systematic literature review on the area shows that there is a distinct lack of considerations for software architecture design for federated learning. In this paper, we propose FLRA, a reference architecture for federated learning systems, which provides a template design for federated learning-based solutions. The proposed FLRA reference architecture is based on an extensive review of existing patterns of federated learning systems found in the literature and existing industrial implementation. The FLRA reference architecture consists of a pool of architectural patterns that could address the frequently recurring design problems in federated learning architectures. The FLRA reference architecture can serve as a design guideline to assist architects and developers with practical solutions for their problems, which can be further customised. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Artificial Intelligence; Federated Learning; Machine Learning; Pattern; Reference Architecture; Software Architecture; Software Engineering; Distributed Database Systems; Machine Learning; Software Architecture; Software Design; Federated Learning System; Industrial Implementation; Large-scale Distributed System; Learning Architectures; Reference Architecture; Software Architecture Design; Software System Designs; Systematic Literature Review; Large Scale Systems},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Verbruggen2021335,
	author = {Verbruggen, Charlotte and Snoeck, Monique},
	title = {Model-Driven Engineering: A State of Affairs and Research Agenda},
	year = {2021},
	journal = {Lecture Notes in Business Information Processing},
	volume = {421},
	pages = {335 - 349},
	doi = {10.1007/978-3-030-79186-5_22},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85111840105&doi=10.1007%2F978-3-030-79186-5_22&partnerID=40&md5=befa3ea6421c38b1b941371997ae5d74},
	abstract = {The Model-Driven Architecture has been launched in 2001 by the OMG. Since then, model-driven engineering has been embraced by the research community but less than hoped for by practitioners. To ensure the relevance of a research agenda, we need a good understanding of practitioners’ problems, in particular with modelling. We therefore performed a literature review on the state of practice in the use of modelling languages for software engineering in the last 5 years according to Kitchenham’s guidelines. This paper serves as orientation within the research field and as a basis for further research. It contributes to literature by focusing on papers discussing practical use of modelling languages and the benefits and problems perceived by practitioners. The main finding presented in this paper is that while practitioners experience benefits of modelling for analysis and design, requirements engineering, quality management, implementation and deployment, they still struggle with external tool integration/model transformation and export, cognitive fit, visual expressiveness, high effort required in acquiring skills, automated analysis and high effort required in using tools. Other findings are that modelling is mostly used for documentation and requirements elicitation, the most used modelling language is UML. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Bpmn; Model-driven Engineering; Modelling In Practice; Systematic Literature Review; Uml; Quality Control; Quality Management; Requirements Engineering; Software Architecture; Software Design; Systems Analysis; Automated Analysis; Literature Reviews; Model Driven Architectures; Model-driven Engineering; Requirements Elicitation; Research Communities; Research Fields; State Of Practice; Modeling Languages},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Vitorino2021860,
	author = {Vitorino, Danilo Fernandes and Correia, Walter Franklin M. and Marçal, Marcio Alves},
	title = {Musculoskeletal Ergonomic Implications in Smartphone Users: A Systematic Review},
	year = {2021},
	journal = {Lecture Notes in Networks and Systems},
	volume = {222 LNNS},
	pages = {860 - 867},
	doi = {10.1007/978-3-030-74611-7_117},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85111158637&doi=10.1007%2F978-3-030-74611-7_117&partnerID=40&md5=85499f244d7ca745b55503f7a51651a9},
	abstract = {This article aims to investigate ergonomic implications with musculoskeletal consequences caused in smartphone users, as well as the identification of methods, techniques and tools that are being used in current studies for the physical evaluation of users of these interfaces. Thus, a systematic review of the literature was performed through the Scopus database, using the Snowballing approach (C. Wohlin, “Guidelines for snowballing in systematic literature studies and a replication in software engineering,” in Proceedings of the 18th international conference on evaluation and assessment in software engineering, 2014, pp. 1–10, https://doi.org/10.1145/2601248.2601268.) to form the most robust set of documents on the subject addressed. During the document collection processes, 341 articles were found, followed by readings of titles, abstracts and verification of previously established inclusion and exclusion criteria, leaving 27 articles, which were completely analyzed in search of relevant information to fulfill the research objective. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Ergonomics; Musculoskeletal; Smartphone; Systematic Review},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Fonseca C2021354,
	author = {Fonseca C, Efraín R. and Marcillo, Diego and Jácome-Guerrero, Santiago P. and Gualotuña, Tatiana and Cruz, Henry O.},
	title = {Identifying Technological Alternatives Focused on Early Alert or Detection of Forest Fires: Results Derived from an Empirical Study},
	year = {2021},
	journal = {Advances in Intelligent Systems and Computing},
	volume = {1326 AISC},
	pages = {354 - 368},
	doi = {10.1007/978-3-030-68080-0_27},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85104867134&doi=10.1007%2F978-3-030-68080-0_27&partnerID=40&md5=6f9168e24cadc4dc68bdd8263ad3180c},
	abstract = {Context: Forests are home to 80% of terrestrial life; however, they have been seriously threatened as millions of its hectares are lost each year due to forest fires. Aim: To elicit the requirements, methods, techniques, technological elements, situations, and specifications to structure a current, compact, generic, and low-cost technological model that allows early alert or detection of forest fires and provide timely support in decision-making. Method: We carried out a Preliminary Literature Review (PLR) on Scopus digital database strictly following the guidelines for systematic literature reviews proposed by B. Kitchenham with some improvements. Results: The PLR process obtained 15 primary studies as of July 2020, which highlight emerging technologies to address the forest fires’ issues. Conclusions: Forest fires represent an unprecedented danger to life, so there is a broad range of possibilities for their early detection since time ago. Emerging technologies give the science new alternatives to develop compact, economic, accessible, and functional proposals for early warning about this phenomenon. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Early Alert; Emerging Technologies; Forest Fires; Preliminary Literature Review; Artificial Intelligence; Decision Making; Deforestation; Fire Hazards; Software Engineering; Digital Database; Early Alerts; Early Warning; Emerging Technologies; Empirical Studies; Literature Reviews; Systematic Literature Review; Technological Alternatives; Fires},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Rožanc2021115,
	author = {Rožanc, Igor and Mernik, Marjan},
	title = {The screening phase in systematic reviews: Can we speed up the process?},
	year = {2021},
	journal = {Advances in Computers},
	volume = {123},
	pages = {115 - 191},
	doi = {10.1016/bs.adcom.2021.01.006},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85102415222&doi=10.1016%2Fbs.adcom.2021.01.006&partnerID=40&md5=f8306dd8e5fe5da2766b675bd147aa8b},
	abstract = {The aim of a systematic reviews (SRs) is to gain a better understanding of a certain aspect of selected research field using the principle of classification of a large number of carefully selected articles. Selection of a proper set of articles is a crucial yet delicate task, which demands a large portion of tedious manual work. This article proposes to automate the screening of a large set of articles while conducting an SR. A rigorous approach is described, which conforms with the SR guidelines, and a tool to efficiently support such an approach is presented as well. The effect of approach is presented by a demonstration experiment which compares its results with the results of a classic manual screening. Finally, the recommendations for the proper use of the approach (i.e., the size of the pilot set and decision rule structure) are presented. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Article Screening; Automatic Screening Process; Software Engineering; Systematic Literature Review; Systematic Mapping Study; Systematic Review; Tool},
	type = {Book chapter},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{2021,
	title = {11th International Conference on Software Business, ICSOB 2020},
	year = {2021},
	journal = {Lecture Notes in Business Information Processing},
	volume = {407},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85101352948&partnerID=40&md5=d7ea6d19528489efd0437d327bfa0d93},
	abstract = {The proceedings contain 18 papers. The special focus in this conference is on Software Business. The topics include: Startups Transitioning from Early to Growth Phase - A Pilot Study of Technical Debt Perception; how to Conduct Customer Interviews? A Workshop Format for Teaching Customer Interview Skills; preface; how SaaS Companies Price Their Products: Insights from an Industry Study; towards Ethical Guidelines of Location-Based Games: Challenges in the Urban Gaming World; continuous Experimentation with Product-Led Business Models: A Comparative Case Study; A Software Engineering Course that Promotes Entrepreneurship: Insights from a VUCA Perspective; a Trend Analysis of Software Business Research; a Framework for Designing Self-sustaining Ecosystems with Blockchain; the Startup Scratch Book – Opening the Black Box of Startup Education; SECOGov: A Software Ecosystem Governance Approach to Support IT Architecture Activities; engineering Federated Learning Systems: A Literature Review; evaluating the Software Problem Representation on the Basis of Rationale Trees and User Story Maps: Premises of an Experiment; Architecting AI Deployment: A Systematic Review of State-of-the-Art and State-of-Practice Literature; autonomously Improving Systems in Industry: A Systematic Literature Review; industrial Agile Transformations Lacking Business Emphasis: Results from a Nordic Survey Study. © 2021 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Nicolas20213838,
	author = {Nicolas, Kervins and Wang, Yi and Giakos, George C. and Wei, Bingyang and Shen, Hongda},
	title = {Blockchain System Defensive Overview for Double-Spend and Selfish Mining Attacks: A Systematic Approach},
	year = {2021},
	journal = {IEEE Access},
	volume = {9},
	pages = {3838 - 3857},
	doi = {10.1109/ACCESS.2020.3047365},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85098762189&doi=10.1109%2FACCESS.2020.3047365&partnerID=40&md5=fc80b3d5acb0ba60c054a9be9f0fa632},
	abstract = {Blockchain is a technology that ensures data security by verifying database of records established in a decentralized and distributed network. Blockchain-based approaches have been applied to secure data in the fields of the Internet of Things, software engineering, healthcare systems, financial services, and smart power grids. However, the security of the blockchain system is still a major concern. We took the initiative to present a systematic study which sheds light on what defensive strategies are used to secure the blockchain system effectively. Specifically, we focus on blockchain data security that aims to mitigate the two data consistency attacks: double-spend attack and selfish mining attack. We employed the systematic approach to analyze a total of 40 selected studies using the proposed taxonomy of defensive strategies: monitoring, alert forwarding, alert broadcasting, inform, detection, and conceptual research design. It presents a comparison framework for existing and future research on blockchain security. Finally, some recommendations are proposed for blockchain researchers and developers. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Blockchain; Double-spend Attack; Selfish Mining Attack; Systematic Review; Electric Power Transmission Networks; Security Of Data; Software Engineering; Conceptual Research; Data Consistency; Database Of Records; Defensive Strategies; Distributed Networks; Financial Service; Health-care System; Systematic Study; Blockchain},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Paiva2021,
	author = {Paiva, Débora Maria Barroso Maria Barroso and Freire, André Pimenta and Fortes, Renata Pontin de Mattos},
	title = {Accessibility and Software Engineering Processes: A Systematic Literature Review},
	year = {2021},
	journal = {Journal of Systems and Software},
	volume = {171},
	pages = {},
	doi = {10.1016/j.jss.2020.110819},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85090877307&doi=10.1016%2Fj.jss.2020.110819&partnerID=40&md5=c087e3b9f2f0ff1121ebe6a92a11d49f},
	abstract = {Guidelines, techniques, and methods have been presented in the literature in recent years to contribute to the development of accessible software and to promote digital inclusion. Considering that software product quality depends on the quality of the development process, researchers have investigated how to include accessibility during the software development process in order to obtain accessible software. Two Systematic Literature Reviews (SLR) have been conducted in the past to identify such research initiatives. This paper presents a new SLR, considering the period from 2011 to 2019. The review of 94 primary studies showed the distribution of publications on different phases of the software life cycle, mainly the design and testing phases. The study also identified, for the first time, papers about accessibility and software process establishment. This result reinforces that, in fact, accessibility is not characterized as a property of the final software only. Instead, it evolves over the software life cycle. Besides, this study aims to provide designers and developers with an updated view of methods, tools, and other assets that contribute to process enrichment, valuing accessibility, as well as shows the gaps and challenges which deserve to be investigated. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Accessibility; Design For Disabilities; Methods For Accessibility; Software Engineering; Systematic Literature Review; Computer Software Selection And Evaluation; Life Cycle; Software Testing; Development Process; Research Initiatives; Software Development Process; Software Engineering Process; Software Life Cycles; Software Product Quality; Systematic Literature Review; Systematic Literature Review (slr); Software Design},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Lara20201003,
	author = {Lara, Juan A. and Aljawarneh, Shadi A.},
	title = {Special Issue on the Foundations of Software Science and Computation Structures},
	year = {2020},
	journal = {Foundations of Science},
	volume = {25},
	number = {4},
	pages = {1003 - 1008},
	doi = {10.1007/s10699-019-09587-7},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85062710753&doi=10.1007%2Fs10699-019-09587-7&partnerID=40&md5=ab08857eccbfe37c7a4216697885d3b7},
	abstract = {In this full review paper, the recent emerging trends in Computing Structures, Software Science, and System Applications have been reviewed and explored to address the recent topics and contributions in the era of the Software and Computing fields. This includes a set of rigorously reviewed world-class manuscripts addressing and detailing state-of-the-art, framework, implemented approaches and techniques research projects in the areas of Software Technology & Automation, Networking, Systems, Computing Sciences and Software Engineering, Big Data and E-learning. Based on this systematic review, we have put some recommendations and suggestions for researchers, practitioners and scholars to improve their research quality in this area. © 2020 Elsevier B.V., All rights reserved.},
	type = {Editorial},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Bronze Open Access}
}

@CONFERENCE{Daoudagh202051,
	author = {Daoudagh, Said and Lonetti, Francesca and Marchetti, Eda},
	title = {Continuous Development and Testing of Access and Usage Control: A Systematic Literature Review},
	year = {2020},
	journal = {ACM International Conference Proceeding Series},
	pages = {51 - 59},
	doi = {10.1145/3393822.3432330},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85099364053&doi=10.1145%2F3393822.3432330&partnerID=40&md5=66d753a4a1404d0524c7703c6c63ec8e},
	abstract = {Context: Development and testing of access/usage control systems is a growing research area. With new trends in software development such as DevOps, the development of access/usage control also has to evolve. Objective: The main aim of this paper is to provide an overview of research proposals in the area of continuous development and testing of access and usage control systems. Method: The paper uses a Systematic Literature Review as a research method to define the research questions and answer them following a systematic approach. With the specified search string, 210 studies were retrieved. After applying the inclusion and exclusion criteria in two phases, a final set of 20 primary studies was selected for this review. Results: Results show that primary studies are mostly published in security venues followed by software engineering venues. Furthermore, most of the studies are based on the standard XACML access control language. In addition, a significant portion of the proposals for development and testing is automated with test assessment and generation the most targeted areas. Some general guidelines for leveraging continuous developing and testing of the usage and access control systems inside the DevOps process are also provided. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Access Control; Devops; Systematic Literature Review; Testing; Xacml; Control Systems; Devops; Software Design; Access Control Language; Continuous Development; Development And Testing; Inclusion And Exclusions; Research Methods; Research Proposals; Research Questions; Systematic Literature Review; Access Control},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{2020,
	title = {Proceedings of 16th Brazilian Symposium on Information Systems: “Information Systems on Digital Transformation and Innovation”, SBSI 2020},
	year = {2020},
	journal = {ACM International Conference Proceeding Series},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85123043165&partnerID=40&md5=5b953bbab7fd2bf9de982a3039747084},
	abstract = {The proceedings contain 47 papers. The topics discussed include: how do business factors affect developers in mobile software ecosystems?; a recommendation system based on knowledge gap identification in MOOCs ecosystems; the use of blockchain in financial area: a systematic mapping study; usage of psychophysiological data as an improvement in the context of software engineering: a systematic mapping study; identifying topics and difficulties on collaboration in social innovation environments; VitForecast: an IoT approach to predict diseases in vineyard; analysis and modeling of emergent systems in the health information system domain; automatic detection of depression from text data - a systematic literature review; information systems scalability of the 'Bolsa Família' program: an interpretative case study; promoting public management accountability in the cultural sector in Brazil; and towards a maturity model for data on the web initiatives. © 2022 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Razzaq2020,
	author = {Razzaq, Abdul},
	title = {A Systematic Review on Software Architectures for IoT Systems and Future Direction to the Adoption of Microservices Architecture},
	year = {2020},
	journal = {SN Computer Science},
	volume = {1},
	number = {6},
	pages = {},
	doi = {10.1007/s42979-020-00359-w},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85098760353&doi=10.1007%2Fs42979-020-00359-w&partnerID=40&md5=e3075b9bd0a9fb08d71564dbc52bc28c},
	abstract = {The Internet of Things-based systems and software allow computations anywhere at any time by interconnecting individuals, networks, services, computers and artefacts that allow autonomous systems to form digitized communities. As the blueprint for software-intensive applications, and software architecture that precise the complexity of a network’s planning, development, and changing phases to effectively and efficiently build complex IoT-driven applications. In any case, there exists no comprehensive analysis in the state of the research on the adoption of MSA for IoT systems. This study effort is needed to explore architectural concepts and practices for designing and developing IoT software to excel state-of-the-art for IoTs along with suggestions and recommendations for IoT software to the adoption of MSA to fulfil the identified gaps. A systematic analysis was coordinated, covering up the literature on existing IoT solutions by studying 140 qualitatively selected articles performed between 2005 and Jan 2020. One hundred forty articles were comprised in this SLR. The findings of this study demonstrated different research topics including software architectural styles, patterns, and models to build IoT software. This research presents cloud-based computing environments, autonomous, software-defined networking, and responsive applications, and IoT-driven agent-based systems, (1) thirteen MSA architectural and design patterns for IoTs and classification of patterns, (2) classification of software architectures for IoTs into nine main categories and their sub-categories, (3) twenty-three most investigated IoT challenges, and (4) mapping of IoT challenges with software architectural solutions. The study revealed the innovative work on IoT software architecture and trends that help in the creation and dynamic adaptation of IoT software for reusability, automation and human decision-making. The outputs of this SLR are useful in revealing many recommendations to the software industry, software engineering community, and computer sciences community with over the past 15 years of research into the adoption of MSA. This study reflects a distilled awareness of architectural practices and principles to assist researchers and practitioners in promoting information sharing software architectural roles and responsibilities for the Internet of Things software. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Cloud Computing; Internet Of Things; Iot; Microservices Architecture; Software Architecture; Systematic Study},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Lwakatare2020,
	author = {Lwakatare, Lucy Ellen and Raj, Aiswarya and Crnković, Ivica and Bosch, Jan and Olsson, Helena Holmström},
	title = {Large-scale machine learning systems in real-world industrial settings: A review of challenges and solutions},
	year = {2020},
	journal = {Information and Software Technology},
	volume = {127},
	pages = {},
	doi = {10.1016/j.infsof.2020.106368},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85087690796&doi=10.1016%2Fj.infsof.2020.106368&partnerID=40&md5=bebe69270ce58309d0c1255080aee753},
	abstract = {Background: Developing and maintaining large scale machine learning (ML) based software systems in an industrial setting is challenging. There are no well-established development guidelines, but the literature contains reports on how companies develop and maintain deployed ML-based software systems. Objective: This study aims to survey the literature related to development and maintenance of large scale ML-based systems in industrial settings in order to provide a synthesis of the challenges that practitioners face. In addition, we identify solutions used to address some of these challenges. Method: A systematic literature review was conducted and we identified 72 papers related to development and maintenance of large scale ML-based software systems in industrial settings. The selected articles were qualitatively analyzed by extracting challenges and solutions. The challenges and solutions were thematically synthesized into four quality attributes: adaptability, scalability, safety and privacy. The analysis was done in relation to ML workflow, i.e. data acquisition, training, evaluation, and deployment. Results: We identified a total of 23 challenges and 8 solutions related to development and maintenance of large scale ML-based software systems in industrial settings including six different domains. Challenges were most often reported in relation to adaptability and scalability. Safety and privacy challenges had the least reported solutions. Conclusion: The development and maintenance on large-scale ML-based systems in industrial settings introduce new challenges specific for ML, and for the known challenges characteristic for these types of systems, require new methods in overcoming the challenges. The identified challenges highlight important concerns in ML system development practice and the lack of solutions point to directions for future research. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Challenges; Industrial Settings; Machine Learning Systems; Slr; Software Engineering; Solutions; Computer Software; Data Acquisition; Machine Learning; Scalability; Different Domains; Industrial Settings; Large-scale Machine Learning; Ml Systems; Quality Attributes; Real-world; Software Systems; Systematic Literature Review; Computer Software Maintenance},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Wohlin2020,
	author = {Wohlin, Claes and Mendes, Emilia and Romero Felizardo, Katia Romero and Kalinowski, M.},
	title = {Guidelines for the search strategy to update systematic literature reviews in software engineering},
	year = {2020},
	journal = {Information and Software Technology},
	volume = {127},
	pages = {},
	doi = {10.1016/j.infsof.2020.106366},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85086562618&doi=10.1016%2Fj.infsof.2020.106366&partnerID=40&md5=4ec3ff9f9b69d11de165ceb0af288e0d},
	abstract = {Context: Systematic Literature Reviews (SLRs) have been adopted within Software Engineering (SE) for more than a decade to provide meaningful summaries of evidence on several topics. Many of these SLRs are now potentially not fully up-to-date, and there are no standard proposals on how to update SLRs in SE. Objective: The objective of this paper is to propose guidelines on how to best search for evidence when updating SLRs in SE, and to evaluate these guidelines using an SLR that was not employed during the formulation of the guidelines. Method: To propose our guidelines, we compare and discuss outcomes from applying different search strategies to identify primary studies in a published SLR, an SLR update, and two replications in the area of effort estimation. These guidelines are then evaluated using an SLR in the area of software ecosystems, its update and a replication. Results: The use of a single iteration forward snowballing with Google Scholar, and employing as a seed set the original SLR and its primary studies is the most cost-effective way to search for new evidence when updating SLRs. Furthermore, the importance of having more than one researcher involved in the selection of papers when applying the inclusion and exclusion criteria is highlighted through the results. Conclusions: Our proposed guidelines formulated based upon an effort estimation SLR, its update and two replications, were supported when using an SLR in the area of software ecosystems, its update and a replication. Therefore, we put forward that our guidelines ought to be adopted for updating SLRs in SE. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Searching For Evidence; Snowballing; Software Engineering; Systematic Literature Review Update; Systematic Literature Reviews; Cost Effectiveness; Ecosystems; Iterative Methods; Cost Effective; Effort Estimation; Google Scholar; Inclusion And Exclusions; Search Strategies; Seed Set; Software Ecosystems; Systematic Literature Review; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Final Open Access; Green Open Access; Hybrid Gold Open Access}
}

@CONFERENCE{Murtazin2020,
	author = {Murtazin, Kristina and Shvets, Oleg and Piho, Gunnar},
	title = {Literature Review on Work-Based Learning},
	year = {2020},
	journal = {Proceedings - Frontiers in Education Conference, FIE},
	volume = {2020-October},
	pages = {},
	doi = {10.1109/FIE44824.2020.9274264},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85098598434&doi=10.1109%2FFIE44824.2020.9274264&partnerID=40&md5=374ded428824eb705ad2b86f3f8f1c4a},
	abstract = {Work-based learning is a teaching and learning method which requires students to go through practical training. In work-based learning, also employers are responsible for teaching as well as evaluation of the students. Students learn theory at the university and apply these academic and technical skills at their working place.This full paper aims to provide a literature review on how work-based learning is organised and implemented in engineering curricula. It also aims to find out the possible factors which are influential in work-based learning and to get information on how to provide work-based learning more effectively. We followed the guidelines for systematic literature reviews by Kitchenham and Charters [1] and asked the following research questions: RQ1: What are the problems faced by faculty and universities in conducting work-based learning? RQ2: What is the student motivation to join work-based learning programmes? RQ3: How the companies are involved and how the universities are organising the training of the company's work-based mentors? RQ4: What is the main model of work-based learning in universities? RQ5: What are the benefits (real or perceived) of work-based learning?According to the selection criteria, 42 papers on work-based learning in engineering curricula published from 2008 to 2018, were selected for the final review and conclusions. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Business Information Technology; Curriculum Development; Education; Methods; Motivation; Software Engineering; Work-based Learning; Curricula; Education Computing; Engineering Education; Engineering Research; Petroleum Reservoir Evaluation; Students; Engineering Curriculum; Practical Training; Research Questions; Selection Criteria; Student Motivation; Systematic Literature Review; Teaching And Learning Methods; Work-based Learning; Learning Systems},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Huang2020,
	author = {Huang, Yuekai and Wang, Junjie and Wang, Song and Liu, Zhe and Hu, Yuanzhe and Wang, Qing},
	title = {Quest for the golden approach: An experimental evaluation of duplicate crowdtesting reports detection},
	year = {2020},
	journal = {International Symposium on Empirical Software Engineering and Measurement},
	pages = {},
	doi = {10.1145/3382494.3410694},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85095844153&doi=10.1145%2F3382494.3410694&partnerID=40&md5=d124be93d5c49820fedb0fde13a00443},
	abstract = {Background: Given the invisibility and unpredictability of distributed crowdtesting processes, there is a large number of duplicate reports, and detecting these duplicate reports is an important task to help save testing effort. Although, many approaches have been proposed to automatically detect the duplicates, the comparison among them and the practical guidelines to adopt these approaches in crowdtesting remain vague. Aims: We aim at conducting the first experimental evaluation of the commonly-used and state-of-the-art approaches for duplicate detection in crowdtesting reports, and exploring which is the golden approach. Method: We begin with a systematic review of approaches for duplicate detection, and select ten state-of-the-art approaches for our experimental evaluation. We conduct duplicate detection with each approach on 414 crowdtesting projects with 59,289 reports collected from one of the largest crowdtesting platforms. Results: Machine learning based approach, i.e., ML-REP, and deep learning based approach, i.e., DL-BiMPM, are the best two approaches for duplicate reports detection in crowdtesting, while the later one is more sensitive to the size of training data and more time-consuming for model training and prediction. Conclusions: This paper provides new insights and guidelines to select appropriate duplicate detection techniques for duplicate crowdtesting reports detection. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Crowdtesting; Deep Learning; Duplicate Detection; Information Retrieval; Machine Learning; Software Engineering; Duplicate Detection; Experimental Evaluation; Learning-based Approach; Model Training; Practical Guidelines; State-of-the-art Approach; Systematic Review; Testing Effort; Deep Learning},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ikram20203815,
	author = {Ikram, Atif and Jalil, Masita Abdul and Ngah, Amir Bin and Khan, Ahmad Salman},
	title = {Critical factors in selection of offshore software maintenance outsourcing vendor: A systematic literature review},
	year = {2020},
	journal = {Journal of Theoretical and Applied Information Technology},
	volume = {8},
	number = {10},
	pages = {3815 - 3824},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092633174&partnerID=40&md5=cc443d76099f1950e546742248fc9080},
	abstract = {Offshore software maintenance outsourcing (OSMO) is a Global Software Engineering (GSE) paradigm for maintaining high-quality software at very low cost in low-paid countries. From high-paid countries, the client organization contracts out whole software or part of the software maintenance to low-paid countries intending to save money. The main objective of this study is to identify important factors for a client when deciding about the selection of suitable vendors for OSMO. The identification of these factors will make the decision-making process easier for a client to select an appropriate vendor. This paper not only identifies critical factors which are important for OSMO clients but also identifies elements of a process like roles, work product, method and tools in the OSMO context. These elements will help and guide us towards the decision-making process. The research method used to conduct this study is systematic literature review (SLR). The studies included in the SLR were published in the year 2006 to the year 2019. Out of 47 studies, 18 were concerned with the designed research questions. The SLR found 13 critical factors, 13 assessment activities, roles, guidelines, work products, and tools related to the questions. Client organizations can use this information in the decision-making process to select a suitable vendor for successful OSMO. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Critical Factors; Decision-making; Maintenance Outsourcing; Offshore Software; Systematic Literature Review; Vendor Selection},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Diab2020594,
	author = {Diab, Ziad and Awny, Mohamed Mamdouh},
	title = {Data analytics maturity models: A systematic literature review},
	year = {2020},
	pages = {594 - 603},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092605936&partnerID=40&md5=e4fd53c7ee0807b5daefc70557be4949},
	abstract = {Data analytics have become a trending research topic since the last decade given its importance in the organizational decision-making process. Several organizations are trying to employ data in improving their decision making and strategies. Although data scientists and business intelligence consultants are hired to make beneficial use of these data, their activities are not enough for making the organization a data-driven one. The data-driven organizations are not defined by their technical tools, but by their culture, core processes, and capabilities. Organizations and consultants use maturity models as a tool to assess the current situation and optimization of the processes. The first maturity model developed in 1988 was named Capability Maturity Model (CMM) and was used for assessing the ability of government contractors' processes to implement a contracted software project in the USA. Afterward, numerous maturity models were developed in many different domains. Data Maturity models provide a set of methodologies to assess the current state of the organization in analytics, to guide development milestones, to draw organizational dimensions, and to avoid common mistakes in building process. The objective of this paper is to review and study in a systematic way these maturity models and discover the gaps and weaknesses of maturity models in the data domain. This review would pave the road towards finding a new approach for enhancing these reviewed models. The study Will be covering the existing data analytics maturity models in Business intelligence and Big Data. Systematic review practices guidelines in the field of software engineering are being used which was developed by famous researchers. This paper reviews six maturity models and discuss models details with highlighting on trends and gaps. The research paper shows a clear need for formally validated model with fully documented process focus on both organizational and technological aspects with assessment tool measure. This is in addition to the assess of the current situation of analytics effectiveness in the organization. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Data Analytics; Digitization; Maturity Models; Systematic Literature Review; Contractors; Decision Making; Industrial Management; Information Analysis; Software Engineering; Capability Maturity Models; Current Situation; Different Domains; Organizational Decision Making; Organizational Dimensions; Systematic Literature Review; Systematic Review; Technological Aspects; Data Analytics},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Quezada–Sarmiento2020,
	author = {Quezada–Sarmiento, Pablo Alejandro and Elorriaga, Jon A. and Arruarte, Ana and Washizaki, Hironori},
	title = {Open BOK on software engineering educational context: A systematic literature review},
	year = {2020},
	journal = {Sustainability (Switzerland)},
	volume = {12},
	number = {17},
	pages = {},
	doi = {10.3390/SU12176858},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85091345198&doi=10.3390%2FSU12176858&partnerID=40&md5=338b6e86c2855f552d4d474c219fd1b3},
	abstract = {In this review, a Systematic Literature Review (SLR) on Open Body of Knowledge (BOK) is presented. Moreover, the theoretical base to build a model for knowledge description was created, and it was found that there is a lack of guidelines to describe knowledge description because of the dramatically increasing number of requirements to produce an Open BOK, the difficulty of comparing related BOK contents, and the fact that reusing knowledge description is a very laborious task. In this sense, this review can be considered as a first step in building a model that can be used for describing knowledge description in Open BOK. Finally, in order to improve the educational context, a comparison among BOK, structure, and evolution is conducted. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Bok Description; Bok Model; Curriculum; Education; Open Body Of Knowledge; Stakeholders; Systematic Literature Review; Education; Engineering; Guideline; Knowledge; Literature Review; Software; Theoretical Study},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Final Open Access; Green Open Access}
}

@ARTICLE{Mendes2020,
	author = {Mendes, Emilia and Wohlin, Claes and Romero Felizardo, Katia Romero and Kalinowski, M.},
	title = {When to update systematic literature reviews in software engineering},
	year = {2020},
	journal = {Journal of Systems and Software},
	volume = {167},
	pages = {},
	doi = {10.1016/j.jss.2020.110607},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85084732557&doi=10.1016%2Fj.jss.2020.110607&partnerID=40&md5=72f785891ee19060ccd305604990dcfd},
	abstract = {[Context] Systematic Literature Reviews (SLRs) have been adopted by the Software Engineering (SE) community for approximately 15 years to provide meaningful summaries of evidence on several topics. Many of these SLRs are now potentially outdated, and there are no systematic proposals on when to update SLRs in SE. [Objective] The goal of this paper is to provide recommendations on when to update SLRs in SE. [Method] We evaluated, using a three-step approach, a third-party decision framework (3PDF) employed in other fields, to decide whether SLRs need updating. First, we conducted a literature review of SLR updates in SE and contacted the authors to obtain their feedback relating to the usefulness of the 3PDF within the context of SLR updates in SE. Second, we used these authors’ feedback to see whether the framework needed any adaptation; none was suggested. Third, we applied the 3PDF to the SLR updates identified in our literature review. [Results] The 3PDF showed that 14 of the 20 SLRs did not need updating. This supports the use of a decision support mechanism (such as the 3PDF) to help the SE community decide when to update SLRs. [Conclusions] We put forward that the 3PDF should be adopted by the SE community to keep relevant evidence up to date and to avoid wasting effort with unnecessary updates. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Software Engineering; Systematic Literature Review Update; Systematic Literature Reviews; Decision Support Systems; Decision Framework; Decision Supports; Literature Reviews; Systematic Literature Review; Third Parties; Three-step Approach; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Sajedi-Badashian2020,
	author = {Sajedi-Badashian, Ali and Stroulia, Eleni},
	title = {Guidelines for evaluating bug-assignment research},
	year = {2020},
	journal = {Journal of Software: Evolution and Process},
	volume = {32},
	number = {9},
	pages = {},
	doi = {10.1002/smr.2250},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85082956611&doi=10.1002%2Fsmr.2250&partnerID=40&md5=afd7e03f0b27eb3ba3279a67fa84964e},
	abstract = {Bug assignment is the task of ranking candidate developers in terms of their potential competence to fix a bug report. Numerous methods have been developed to address this task, relying on different methodological assumptions and demonstrating their effectiveness with a variety of empirical studies with numerous data sets and evaluation criteria. Despite the importance of the subject and the attention it has received from researchers, there is still no unanimity on how to validate and comparatively evaluate bug-assignment methods and, often times, methods reported in the literature are not reproducible. In this paper, we first report on our systematic review of the broad bug-assignment research field. Next, we focus on a few key empirical studies and review their choices with respect to three important experimental-design parameters, namely, the evaluation metric(s) they report, their definition of who the real assignee is, and the community of developers they consider as candidate assignees. The substantial variability on these criteria led us to formulate a systematic experiment to explore the impact of these choices. We conducted our experiment on a comprehensive data set of bugs we collected from 13 long-term open-source projects, using a simple Tf-IDf similarity metric. On the basis of our arguments and/or experiments, we provide useful guidelines for performing further bug-assignment research. We conclude that mean average precision (MAP) is the most informative evaluation metric, the developer community should be defined as “all the project members,” and the real assignee should be defined as “any developer who worked toward fixing a bug.”. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Bug Report Assignment; Bug-assignment; Change Request Assignment; Research Evaluation; Research Reproducibility; Software Engineering; Open Source Software; Software Engineering; Bug Reports; Bug-assignment; Change Request Assignment; Reproducibilities; Research Evaluation; Program Debugging},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Fernández del Carpio2020445,
	author = {Fernández del Carpio, Álvaro and Bermón-Angarita, Leonardo},
	title = {Trends in Software Engineering Processes using Deep Learning: A Systematic Literature Review},
	year = {2020},
	pages = {445 - 454},
	doi = {10.1109/SEAA51224.2020.00077},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85096529855&doi=10.1109%2FSEAA51224.2020.00077&partnerID=40&md5=ded56cfa14f6b2e977bb5a1a9296b504},
	abstract = {In recent years, several researchers have applied machine learning techniques to several knowledge areas achieving acceptable results. Thus, a considerable number of deep learning models are focused on a wide range of software processes. This systematic review investigates the software processes supported by deep learning models, determining relevant results for the software community. This research identified that the most extensively investigated sub-processes are software testing and maintenance. In such sub-processes, deep learning models such as CNN, RNN, and LSTM are widely used to process bug reports, malware classification, libraries and commits recommendations generation. Some solutions are oriented to effort estimation, classify software requirements, identify GUI visual elements, identification of code authors, the similarity of source codes, predict and classify defects, and analyze bug reports in testing and maintenance processes. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Deep Learning; Machine Learning; Software Processes; Systematic Review; Application Programs; Computer Software Maintenance; Learning Systems; Long Short-term Memory; Object Oriented Programming; Software Testing; Applied Machine Learning; Malware Classifications; Software Community; Software Engineering Process; Software Requirements; Systematic Literature Review; Systematic Review; Testing And Maintenance; Deep Learning},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Mahmood2020,
	author = {Mahmood, Yasir and Kama, Nazri and Azmi, Azri Bin},
	title = {A systematic review of studies on use case points and expert-based estimation of software development effort},
	year = {2020},
	journal = {Journal of Software: Evolution and Process},
	volume = {32},
	number = {7},
	pages = {},
	doi = {10.1002/smr.2245},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85087281575&doi=10.1002%2Fsmr.2245&partnerID=40&md5=0f723fa4a4d41a7b77df7e69f42bbd78},
	abstract = {In recent years, due to significant evolution in adopting new technologies and development methodologies in the field of software engineering, the developers and researchers are striving to optimize the accuracy of software effort estimation (SEE). The overestimation and underestimation both are the key challenges for software progress; hence, there is a continuous need for an accurate SEE. This paper highlights a systematic review of studies associated with the best practices of use case point (UCP) and expert judgment–based software development effort estimation techniques. The primary aim and contribution of this paper are to support the researchers through an extensive review to ease to other researcher's search for effort estimation studies. We have performed state-of-the-art review from five viewpoints of reference: (a) review of studies concerning UCPs and expert judgment–based effort estimation, (b) research contribution and future recommendation in different novelties, (c) usage of the dataset, (d) availability of accuracy metrics, and (e) findings of the studies. We have performed a systematic review of studies which are published in the period of 2000 to 2019. We have selected a total of 34 primary studies of UCP and expert judgment–based estimation techniques to report the research questions stated in this review. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Effort Estimation; Expert Judgment; Software Development; Systematic Literature Review; Use Case Points; Computer Aided Software Engineering; Software Engineering; Development Methodology; Effort Estimation; Expert Judgment; Software Development Effort; Software Effort Estimation; State-of-the Art Reviews; Systematic Literature Review; Use Case Points; Software Design},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Garousi2020,
	author = {Garousi, Vahid and Rainer, Austen W. and Lauvås, Per and Arcuri, Andrea},
	title = {Software-testing education: A systematic literature mapping},
	year = {2020},
	journal = {Journal of Systems and Software},
	volume = {165},
	pages = {},
	doi = {10.1016/j.jss.2020.110570},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85082879194&doi=10.1016%2Fj.jss.2020.110570&partnerID=40&md5=3e5da6b57d807ac98c670f6224284e7d},
	abstract = {Context: With the rising complexity and scale of software systems, there is an ever-increasing demand for sophisticated and cost-effective software testing. To meet such a demand, there is a need for a highly-skilled software testing work-force (test engineers) in the industry. To address that need, many university educators worldwide have included software-testing education in their software engineering (SE) or computer science (CS) programs. Many papers have been published in the last three decades (as early as 1992) to share experience from such undertakings. Objective: Our objective in this paper is to summarize the body of experience and knowledge in the area of software-testing education to benefit the readers (both educators and researchers) in designing and delivering software testing courses in university settings, and to also conduct further education research in this area. Method: To address the above need, we conducted a systematic literature mapping (SLM) to synthesize what the community of educators have published on this topic. After compiling a candidate pool of 307 papers, and applying a set of inclusion/exclusion criteria, our final pool included 204 papers published between 1992 and 2019. Results: The topic of software-testing education is becoming more active, as we can see by the increasing number of papers. Many pedagogical approaches (how to best teach testing), course-ware, and specific tools for testing education have been proposed. Many challenges in testing education and insights on how to overcome those challenges have been proposed. Conclusion: This paper provides educators and researchers with a classification of existing studies within software-testing education. We further synthesize challenges and insights reported when teaching software testing. The paper also provides a reference (“index”) to the vast body of knowledge and experience on teaching software testing. Our mapping study aims to help educators and researchers to identify the best practices in this area to effectively plan and deliver their software testing courses, or to conduct further education-research in this important area. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Education Research; Software Testing; Software-engineering Education; Software-testing Education; Systematic Literature Mapping; Systematic Literature Review; Cost Effectiveness; Education Computing; Engineering Education; Mapping; Software Engineering; Teaching; Body Of Knowledge; Education Research; Further Education; Pedagogical Approach; Software Systems; Systematic Literature Review; Teaching Software Testing; University Settings; Software Testing},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@CONFERENCE{Zhang20201422,
	author = {Zhang, He and Zhou, Xin and Huang, Xin and Huang, Huang and Ali Babar, Muhammad Ali},
	title = {An evidence-based inquiry into the use of grey literature in software engineering},
	year = {2020},
	journal = {Proceedings - International Conference on Software Engineering},
	pages = {1422 - 1434},
	doi = {10.1145/3377811.3380336},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85094325598&doi=10.1145%2F3377811.3380336&partnerID=40&md5=e2321af4f2456ae906f747118f0dc3ac},
	abstract = {Context: Following on other scientific disciplines, such as health sciences, the use of Grey Literature (GL) has become widespread in Software Engineering (SE) research. Whilst the number of papers incorporating GL in SE is increasing, there is little empirically known about different aspects of the use of GL in SE research. Method: We used a mixed-methods approach for this research. We carried out a Systematic Literature Review (SLR) of the use of GL in SE, and surveyed the authors of the selected papers included in the SLR (as GL users) and the invited experts in SE community on the use of GL in SE research. Results: We systematically selected and reviewed 102 SE secondary studies that incorporate GL in SE research, from which we identified two groups based on their reporting: 1) 76 reviews only claim their use of GL; 2) 26 reviews report the results by including GL.We also obtained 20 replies from the GL users and 24 replies from the invited SE experts. Conclusion: There is no common understanding of the meaning of GL in SE. Researchers define the scopes and the definitions of GL in a variety of ways.We found five main reasons of using GL in SE research. The findings have enabled us to propose a conceptual model for how GL works in SE research lifecycle. There is an apparent need for research to develop guidelines for using GL in SE and for assessing quality of GL. The current work can provide a panorama of the state-of-the-art of using GL in SE for the follow-up research, as to determine the important position of GL in SE research. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Software Engineering.; Evidencebased Software Engineering; Grey Literature; Survey; Systematic (literature) Review; Life Cycle; Software Engineering; Conceptual Model; Evidence-based; Grey Literature; Health Science; Mixed Method; Scientific Discipline; State Of The Art; Systematic Literature Review (slr); Engineering Research},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Zhou2020189,
	author = {Zhou, Xin},
	title = {How to treat the use of grey literature in software engineering},
	year = {2020},
	pages = {189 - 192},
	doi = {10.1145/3379177.3390305},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092502363&doi=10.1145%2F3379177.3390305&partnerID=40&md5=0fcf65576d990befb0057f4410e4dd88},
	abstract = {Context: Following on other scientific disciplines, such as health sciences, the use of grey literature (GL) is becoming widespread in Software Engineering (SE) research. Whilst the number of papers incorporating GL on SE is increasing, there is little empirically known about different aspects of the use of GL in SE research. In particular, there is a lack of excellent evaluation standard for the quality of GL. Aim: Our research is aimed at systematically reviewing the use of GL in SE, empirically exploring SE researchers' views on GL and providing a guide for using GL in SE and for quality assessment of the GL to be included. Method: We used a mixed-methods approach for this research. We carried out a Systematic Literature Review (SLR) of the use of GL in SE. Then we surveyed the authors of the papers included in the SLR (as GL users) and the invited experts in the SE community on the use of GL in SE research. Results: We systematically selected and reviewed 102 SE secondary studies that incorporate GL in SE research, from which we identified two groups based on their reporting: 1) 76 reviews only claim their use of GL; 2) 26 reviews report the results by including GL. We also obtained 20 replies from the GL users and 24 replies from the invited SE experts. Conclusion: There is no common understanding of the meaning of GL in SE. Researchers define the scopes and the definitions of GL in a variety of ways. We found five main reasons of using GL in SE research. The findings have enabled us to propose a conceptual model for how GL works in SE research lifecycle. In the next workThere is a need for research to develop guidelines for using GL in SE and for assessing quality of GL. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Software Engineering; Evidence-based Software Engineering; Grey Literature; Survey; Systematic (literature) Review; Life Cycle; Conceptual Model; Evaluation Standard; Grey Literature; Health Science; Mixed Method; Quality Assessment; Scientific Discipline; Systematic Literature Review (slr); Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Dehdarirad2020169,
	author = {Dehdarirad, Hossein and Ghazimirsaeid, Javad and Jalalimanesh, A.},
	title = {Scholarly publication venue recommender systems: A systematic literature review},
	year = {2020},
	journal = {Data Technologies and Applications},
	volume = {54},
	number = {2},
	pages = {169 - 191},
	doi = {10.1108/DTA-08-2019-0135},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85082182427&doi=10.1108%2FDTA-08-2019-0135&partnerID=40&md5=a35b103155b4ca18050226981a13820b},
	abstract = {Purpose: The purpose of this investigation is to identify, evaluate, integrate and summarize relevant and qualified papers through conducting a systematic literature review (SLR) on the application of recommender systems (RSs) to suggest a scholarly publication venue for researcher's paper. Design/methodology/approach: To identify the relevant papers published up to August 11, 2018, an SLR study on four databases (Scopus, Web of Science, IEEE Xplore and ScienceDirect) was conducted. We pursued the guidelines presented by Kitchenham and Charters (2007) for performing SLRs in software engineering. The papers were analyzed based on data sources, RSs classes, techniques/methods/algorithms, datasets, evaluation methodologies and metrics, as well as future directions. Findings: A total of 32 papers were identified. The most data sources exploited in these papers were textual (title/abstract/keywords) and co-authorship data. The RS classes in the selected papers were almost equally used. DBLP was the main dataset utilized. Cosine similarity, social network analysis (SNA) and term frequency–inverse document frequency (TF–IDF) algorithm were frequently used. In terms of evaluation methodologies, 24 papers applied only offline evaluations. Furthermore, precision, accuracy and recall metrics were the popular performance metrics. In the reviewed papers, “use more datasets” and “new algorithms” were frequently mentioned in the future work part as well as conclusions. Originality/value: Given that a review study has not been conducted in this area, this paper can provide an insight into the current status in this area and may also contribute to future research in this field. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Conference; Journal; Recommendation Systems; Recommender Systems; Venue; Inverse Problems; Publishing; Software Engineering; Text Processing; Conference; Data-source; Design/methodology/approach; Evaluation Methodologies; Journal; Scholarly Publication; Systematic Literature Review; Systems' Class; Venue; Web Of Science; Recommender Systems},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Mustapha2020561,
	author = {Mustapha, Abiodun Muyideen and Arogundade, O. T. and Sanjay, Misra and Damasevicius, Robertas and Maskeliūnas, Rytis},
	title = {A systematic literature review on compliance requirements management of business processes},
	year = {2020},
	journal = {International Journal of System Assurance Engineering and Management},
	volume = {11},
	number = {3},
	pages = {561 - 576},
	doi = {10.1007/s13198-020-00985-w},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85084154071&doi=10.1007%2Fs13198-020-00985-w&partnerID=40&md5=ade32d06bf7c11985bf8985030b1afe7},
	abstract = {One crucial aspect that had cost business organizations so much is management of compliance requirements from various regulatory sources. In a bid to avoid being penalized, some organizations have adopted various techniques to accomplish this task. However, literature revealed that few thorough reviews have been centered on this subject in a systematic way. This implies that a review that systematically captured the entire crucial elements such as implementation environment, constraints types addressed, main contributions and strengths of the existing techniques is missing. This has led to the lack of sufficiently good context of operation. A systematic review on existing literatures is presented in this paper, which focuses on the management of business process compliance requirements in order to present summarized evidences and provide a lead-up for appropriately positioning new research activities. The guideline for conducting systematic literature review in software engineering by Kitchenham was employed in carrying out the systematic review as well as a review planning template to execute the review. Results showed that control flow and data flow requirements have been addressed most in recent time. The temporal and resource allocation requirements have been under researched. The approaches that have been employed in business process compliance requirements management are model checking, patterns, semantic, formal, ontology, goal-based requirements analysis and network analysis. The traditional business environment has been put into consideration more than the cloud environment. The summary of research contributions revealed that the approaches have been more of formal techniques compared to model checking and semantics. This shows that there is a need for more research on business process compliance that will be centered on the cloud environment. Researchers will be able to suggest the technique to be adopted based on the combined importance of each criterion that was defined in this work. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Business Process; Requirement Engineering; Requirements; Requirements Management; Software Engineering; Systematic Litrature Review; Model Checking; Regulatory Compliance; Requirements Engineering; Semantics; Business Environments; Business Organizations; Business Process Compliances; Data Flow Requirements; Goal-based Requirements; Requirements Management; Research Activities; Systematic Literature Review; Compliance Control},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Sayagh2020646,
	author = {Sayagh, Mohammed and Kerzazi, Noureddine and Adams, Bram and Petrillo, Fábio},
	title = {Software Configuration Engineering in Practice Interviews, Survey, and Systematic Literature Review},
	year = {2020},
	journal = {IEEE Transactions on Software Engineering},
	volume = {46},
	number = {6},
	pages = {646 - 673},
	doi = {10.1109/TSE.2018.2867847},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85052624554&doi=10.1109%2FTSE.2018.2867847&partnerID=40&md5=2595b3ef471295fbd9276b6c9c301616},
	abstract = {Modern software applications are adapted to different situations (e.g., memory limits, enabling/disabling features, database credentials) by changing the values of configuration options, without any source code modifications. According to several studies, this flexibility is expensive as configuration failures represent one of the most common types of software failures. They are also hard to debug and resolve as they require a lot of effort to detect which options are misconfigured among a large number of configuration options and values, while comprehension of the code also is hampered by sprinkling conditional checks of the values of configuration options. Although researchers have proposed various approaches to help debug or prevent configuration failures, especially from the end users' perspective, this paper takes a step back to understand the process required by practitioners to engineer the run-time configuration options in their source code, the challenges they experience as well as best practices that they have or could adopt. By interviewing 14 software engineering experts, followed by a large survey on 229 Java software engineers, we identified 9 major activities related to configuration engineering, 22 challenges faced by developers, and 24 expert recommendations to improve software configuration quality. We complemented this study by a systematic literature review to enrich the experts' recommendations, and to identify possible solutions discussed and evaluated by the research community for the developers' problems and challenges. We find that developers face a variety of challenges for all nine configuration engineering activities, starting from the creation of options, which generally is not planned beforehand and increases the complexity of a software system, to the non-trivial comprehension and debugging of configurations, and ending with the risky maintenance of configuration options, since developers avoid touching and changing configuration options in a mature system. We also find that researchers thus far focus primarily on testing and debugging configuration failures, leaving a large range of opportunities for future work. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Configuration; Configuration Engineering; Empirical Study; Interviews; Survey; Systematic Literature Review; Application Programs; Bibliographies; Codes (symbols); Errors; Surveys; Facebook; Interviews; Software Algorithms; Software Systems; Systematics; Program Debugging},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Badshah2020427,
	author = {Badshah, Sher and Khan, Arif Ali and Khan, Bilal},
	title = {Towards Process Improvement in DevOps: A Systematic Literature Review},
	year = {2020},
	journal = {ACM International Conference Proceeding Series},
	pages = {427 - 433},
	doi = {10.1145/3383219.3383280},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85090846664&doi=10.1145%2F3383219.3383280&partnerID=40&md5=949481f1a7ae8bd1871e1501c1e6c84b},
	abstract = {In recent years, the software release cost has been reduced dramatically due to the alteration from traditional shrink-wrapped software to software as a service. Organizations that can deliver their services continuously and with a high frequency have a higher ability to compete in the market. As a response to this, a substantial number of software companies acquired DevOps to establish a culture of effective communication and collaboration between development and operation teams and in order to enhance the production release frequency as well as to maintain the product quality. However, the DevOps environment requires a platform that aid in evaluating the performance of existing processes and provide improvement recommendations. On top of that, organizations can only achieve the perceived benefits of DevOps if their processes are mature and continuously measured. The objective of this research is to investigate the process improvement contributions made by researchers in the DevOps field. For this purpose, we performed a systematic literature review that resulted in several maturity models and best practices. Our ultimate aim is to develop a DevOps maturity model that can appraise and improve the processes in the DevOps environment. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Continuous Software Engineering; Devops; Maturity Models; Process Improvement; Systematic Review; Process Engineering; Software As A Service (saas); Development And Operations; Effective Communication; High Frequency Hf; Improvement Recommendations; Perceived Benefits; Process Improvement; Software Company; Systematic Literature Review; Devops},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Rafi2020413,
	author = {Rafi, Saima and Wu, Yu and Akbar, Muhammad Azeem},
	title = {RMDevOps: A Road Map for Improvement in DevOps Activities in Context of Software Organizations},
	year = {2020},
	journal = {ACM International Conference Proceeding Series},
	pages = {413 - 418},
	doi = {10.1145/3383219.3383278},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85090841477&doi=10.1145%2F3383219.3383278&partnerID=40&md5=3ee9edb9cf7b98076565d9e3e63d75f9},
	abstract = {DevOps is a new software engineering paradigm adopted by various software organizations to develop an environment of continuous deployment and delivery within time. Numerous experts are offering their services to help organizations, how to implement DevOps activities in software organization. Though, still there are various issues for software organizations to adopt DevOps activities. To overcome such issues, there must be an approach that could assist software organizations towards better adoption of DevOps activities. The core objective of this research is to design a Readiness Model for DevOps (RMDevOps) to improve the adoption of DevOps activities in a software organization. Based on existing models in other fields of software engineering, we will develop this model. We have conducted a systematic literature review and empirical study on DevOps, for understanding the impact of the success factors of DevOps in the real world and literature. This study covers the first step of development of RMDevOps model, by identifying the success factors of DevOps and presenting the outcomes in the form of robust framework. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Guidelines; Readiness Model; Software Organizations; Systematic Literature Review; Computer Applications; Computer Programming; Empirical Studies; In Contexts; Readiness Models; Real-world; Software Engineering Paradigm; Software Organization; Success Factors; Systematic Literature Review; Devops},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Costa20201997,
	author = {Costa, Victor and Girardon, Gustavo and Bernardino, Maicon and MacHado, Rodrigo and Legramante, Guilherme and Neto, Anibal and Basso, Fábio Paulo and Rodrigues, Elder Macedo},
	title = {Taxonomy of performance testing tools: A systematic literature review},
	year = {2020},
	journal = {Proceedings of the ACM Symposium on Applied Computing},
	pages = {1997 - 2004},
	doi = {10.1145/3341105.3374006},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85083036674&doi=10.1145%2F3341105.3374006&partnerID=40&md5=9100be30a65d0d17b0cc59bdbf457290},
	abstract = {Background: The knowledge and application of tools to automate performance testing is essential to ensure software reliability and therefore its quality. Aims: To identify and characterize existing performance testing tools reported in the literature. Method: A protocol was formulated and executed according to the guidelines for performing systematic literature reviews in Software Engineering. Results: The performance testing tools were classified according to their relevance in the literature, highlighting the most commonly used tools, their supported input approaches, workload approaches, monitored metrics and logging strategies. From the analysis of these results a taxonomy on performance testing tools was proposed using a Feature Model. Conclusion: With the results of this study, it was possible to quantify and qualify research related to existing performance testing technologies in the literature, and also to characterize them for decision-making purposes. Thus, contributing for professionals, researchers and academic students looking for these assets through certain features from performance testing strategies. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Performance Testing Tools; Systematic Review; Taxonomy; Application Programs; Decision Making; Software Quality; Software Reliability; Taxonomies; Testing; Feature Modeling; Performance Testing; Systematic Literature Review; Software Testing},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Aguado-Delgado2020169,
	author = {Aguado-Delgado, Juan and Gutiérrez Martínez, José María and Hilera, José R. and de-Marcos, Luis Ortega and Otón Tortosa, Salvador},
	title = {Accessibility in video games: a systematic review},
	year = {2020},
	journal = {Universal Access in the Information Society},
	volume = {19},
	number = {1},
	pages = {169 - 193},
	doi = {10.1007/s10209-018-0628-2},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051625290&doi=10.1007%2Fs10209-018-0628-2&partnerID=40&md5=a80a79b80fa550c4d74aff45142612b1},
	abstract = {Video games are software products with several purposes that are growing in strength and weight in society. However, there is one noticeable problem about them; in most cases, their developers most often do not take into consideration people with disabilities when they are creating video game applications. People with disabilities are thus partially or completely excluded from their use. Prior to any additional work, it is required to have an updated state of the art about this topic. This paper shows the results of a systematic literature review conducted to define the current status of video games accessibility. The type of review is broader than usual, so it is a systematic mapping study (a specific class of systematic review). Besides elaborating the state of the art (qualitative information), we identified and analyzed related works (45 relevant studies) to provide quantitative information of the performed search (including graphs and tables), such as the number of articles found by phases, their sources, their research type, the research questions answered, the kind of disability addressed, and the type and year of publications. None of the studied initiatives can guarantee universally accessible video game applications. Our proposal is to create an integral software engineering methodology that considers accessibility guidelines, techniques, strategies, human factors, etc. in the video game software development process. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Accessibility; Human–computer Interface; Interdisciplinary Projects; Systematic Literature Review; Systematic Mapping Study; Video Games; Computer Games; Interactive Computer Graphics; Mapping; Software Design; Accessibility; Interdisciplinary Project; Systematic Literature Review; Systematic Mapping Studies; Video Game; Human Computer Interaction},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Raharjo2020123,
	author = {Raharjo, Teguh and Purwandari, Betty},
	title = {Agile project management challenges and mapping solutions: A systematic literature review},
	year = {2020},
	journal = {ACM International Conference Proceeding Series},
	pages = {123 - 129},
	doi = {10.1145/3378936.3378949},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85081992987&doi=10.1145%2F3378936.3378949&partnerID=40&md5=fa040cee0a6b7b5467917379d5de3fa3},
	abstract = {The Project Management Institute reported that the Agile approach is widely being used for project management practices. This approach has a significant impact on business growth and project performance. However, its implementation is challenging. Therefore, a systematic literature review (SLR) is used to reveal the challenges faced in Agile project execution. The Project Management Body of Knowledge (PMBOK) knowledge areas were adopted to classify the challenges. A total of 23 papers from 400 were identified as the result of SLR extraction. The challenges from related studies were categorized into the PMBOK knowledge areas. A mapping from the challenges to the solutions was performed using the PMBOK Guide, Prince2 Agile, Agile Practice Guide, and other related references. This study provides a list of Agile challenges and their mapped solutions. The biggest challenge arises from stakeholder management, which includes challenges related to Agile adaption, Agile transition, and Agile transformation. Other challenges include project resource management, project integration management, project scope management, and project schedule management. For academicians, this study provides a new understanding of Agile challenges and their suitable solutions from the perspective of project management. For practitioners, the findings provide potential lessons learned and recommendations to deal with the challenges. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile; Agile Approach; Agile Project Management; Systematic Literature Review; Big Data; Information Management; Mapping; Software Engineering; Agile; Agile Approaches; Agile Project Management; Project Management Body Of Knowledge; Project Management Practices; Stakeholder Management; Systematic Literature Review; Systematic Literature Review (slr); Project Management},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ardito2020,
	author = {Ardito, Luca and Coppola, Riccardo and Barbato, Luca and Verga, Diego},
	title = {A Tool-Based Perspective on Software Code Maintainability Metrics: A Systematic Literature Review},
	year = {2020},
	journal = {Scientific Programming},
	volume = {2020},
	pages = {},
	doi = {10.1155/2020/8840389},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85096107153&doi=10.1155%2F2020%2F8840389&partnerID=40&md5=9887f4d4d54b70d2911e03e5bb61e9aa},
	abstract = {Software maintainability is a crucial property of software projects. It can be defined as the ease with which a software system or component can be modified to be corrected, improved, or adapted to its environment. The software engineering literature proposes many models and metrics to predict the maintainability of a software project statically. However, there is no common accordance with the most dependable metrics or metric suites to evaluate such nonfunctional property. The goals of the present manuscript are as follows: (i) providing an overview of the most popular maintainability metrics according to the related literature; (ii) finding what tools are available to evaluate software maintainability; and (iii) linking the most popular metrics with the available tools and the most common programming languages. To this end, we performed a systematic literature review, following Kitchenham's SLR guidelines, on the most relevant scientific digital libraries. The SLR outcome provided us with 174 software metrics, among which we identified a set of 15 most commonly mentioned ones, and 19 metric computation tools available to practitioners. We found optimal sets of at most five tools to cover all the most commonly mentioned metrics. The results also highlight missing tool coverage for some metrics on commonly used programming languages and minimal coverage of metrics for newer or less popular programming languages. We consider these results valuable for researchers and practitioners who want to find the best selection of tools to evaluate the maintainability of their projects or to bridge the discussed coverage gaps for newer programming languages. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Computer Software; Digital Libraries; Object Oriented Programming; Minimal Coverage; Non Functional Properties; Scientific Digital Libraries; Software Maintainability; Software Metrics; Software Project; Software Systems; Systematic Literature Review; Maintainability},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access; Hybrid Gold Open Access}
}

@CONFERENCE{Zorzetti2020145,
	author = {Zorzetti, Maximilian and Vaccaro, Matheus and Moralles, Cassiano and Prauchner, Bruna and Signoretti, Ingrid and Pereira, Eliana B. and Salerno, Larissa and Bastos, Ricardo Melo and Marczak, Sabrina},
	title = {Maturity models for agile, lean startup, and user-centered design in software engineering: A combined systematic literature mapping},
	year = {2020},
	volume = {2},
	pages = {145 - 156},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85089723634&partnerID=40&md5=268615ca0163520a82981851ce3f9d34},
	abstract = {In a bid to reduce the risk accompanied by innovation, IT companies have been trying to boost their Agile development practices by combining Lean Startup and User-Centered Design (UCD) with their existing work processes. Undergoing this transformation in large enterprises can be a difficult challenge without an instrument to help in conducting the adoption and assessment of this novel development approach. In this paper we seek to identify maturity models that assess the use of Agile, Lean Startup, and UCD; characterize these maturity models; and see how they are applied and evaluated. We conducted a systematic literature mapping of maturity models published between 2001 and 2020 taking existing systematic review guidelines into account; and we analyzed the models using an adapted maturity model classification criteria. There are 35 maturity models, of which 23 are maturity models for Agile, 5 for Lean thinking, 5 for User-Centered Design, and 2 for Agile and UCD combined. We found that agile models have been published fairly consistently throughout the years (2001–2020), while Lean thinking and UCD models have mostly been published in the last decade, which might be related to the somewhat recent use of Design Thinking and Lean Startup in software engineering. However, there are no maturity models for a combined use of Agile, Lean Startup, and UCD. We believe that this is the case due to the approach’s infancy, as it is seeing success among industry practitioners. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile; Lean; Lean Startup; Maturity Model; Software Engineering; User-centered Design; Agile Manufacturing Systems; Information Systems; Information Use; Mapping; Software Engineering; Agile Development; Design Thinking; Development Approach; Large Enterprise; Lean Thinking; Maturity Model; Systematic Review; User Centered Design(ucd); User Centered Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Valencia-Galeano2020,
	author = {Valencia-Galeano, Yasmin Stella and Serrano Sánchez, José Luis},
	title = {Learning a second language supported by digital technologies: A systematic review; Aprendizaje de un segundo idioma apoyado en tecnologías digitales: Una revisión sistemática},
	year = {2020},
	journal = {Education in the Knowledge Society},
	volume = {21},
	pages = {},
	doi = {10.14201/eks.18734},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85089304067&doi=10.14201%2Feks.18734&partnerID=40&md5=50fa03a0de4fd7128d773bcdcd4bea32},
	abstract = {In this article, a systematic review is carried out with the objective of identifying the existing evidences about the implementation and the advantages of the use of different digital technologies in educational programs that promote the acquisition of a second language. This systematic review follows the methodology according to the recommendations provided by the Evidence-based Software Engineering method, the checklist of The Critical Appraisal Skill Program) to evaluate the quality of the selected articles and Preferred Reporting Items for Systematic Reviews and MetaAnalysis for the preparation of the report. The databases used were Web of Science and Scopus. 8 articles are selected that meet the inclusion and exclusion criteria. Among the main results obtained, we emphasize that in the studies that use the tools of the Web 2.0, the social competences of language are integrated, specifically, the communication and interaction with purposes of production and social integration of the student in a new language. Therefore, Web 2.0 tools contribute to a more dynamic teaching of a language, generating a greater interaction that helps the acquisition of this. On the other hand, in research using Computer Based Learning tools, the individual is evaluated on specific topics of the language competencies such as phonetic and grammatical production. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Cbl; Dual Language; Learning A Second Language; Systematic Review; Web 2.0},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Daneva202026,
	author = {Daneva, Maya and Bolscher, Robin},
	title = {What we know about software architecture styles in continuous delivery and devops?},
	year = {2020},
	journal = {Communications in Computer and Information Science},
	volume = {1250 CCIS},
	pages = {26 - 39},
	doi = {10.1007/978-3-030-52991-8_2},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85089215143&doi=10.1007%2F978-3-030-52991-8_2&partnerID=40&md5=d2ef8ff0b121c2487771c9121f4d0973},
	abstract = {This paper takes a software architect’s perspective to DevOps/CD and attempts to provide a consolidated view on the architecture styles for which empirical publications indicate to be suitable in the context of DevOps and CD. Following techniques from the evidence-based software engineering paradigm, we set out to answer a number of research questions pertaining to (1) the architecture characteristics important in DevOps/CD projects according to published literature, (2) the architectural styles found to work well in this context, (3) the application domains in which architecture characteristics and styles were evaluated, and (4) the empirical method being used by researchers on this topic. We applied a research protocol grounded on well-established systematic literature review guidelines, and evaluated sources published between 2009 and 2019. Our results indicate that (a) 17 software architecture characteristics are beneficial for CD and DevOps adoption, (b) micro-services are a dominant architectural style in this context, and (c) large-scale organizational contexts are the most studied, and (d) qualitative approaches (case study based) are the most applied research method. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Continuous Delivery; Continuous Integration; Deployability; Devops; Micro-services; Software Architecture; Systematic Literature Review; Application Programs; Architecture; Devops; Engineering Research; Software Architecture; Architectural Style; Architecture Styles; Evidence Based Software Engineering; Organizational Context; Qualitative Approach; Software Architects; Software Architecture Style; Systematic Literature Review; C (programming Language)},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Final Open Access; Green Open Access}
}

@ARTICLE{2020,
	title = {14th International Conference on Research Challenges in Information Sciences, RCIS 2020},
	year = {2020},
	journal = {Lecture Notes in Business Information Processing},
	volume = {385 LNBIP},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85087791409&partnerID=40&md5=45a43f6d3e3499a5b97a309af1488a71},
	abstract = {The proceedings contain 45 papers. The special focus in this conference is on Research Challenges in Information Sciences. The topics include: User-Experience in Business Intelligence - A Quality Construct and Model to Design Supportive BI Dashboards; FINESSE: Fair Incentives for Enterprise Employees; explainable Recommendations in Intelligent Systems: Delivery Methods, Modalities and Risks; participation in Hackathons: A Multi-methods View on Motivators, Demotivators and Citizen Participation; a Systematic Literature Review of Blockchain-Enabled Smart Contracts: Platforms, Languages, Consensus, Applications and Choice Criteria; Scriptless Testing at the GUI Level in an Industrial Setting; improving Performance and Scalability of Model-Driven Generated Web Applications: An Experience Report; tesCaV: An Approach for Learning Model-Based Testing and Coverage in Practice; automatic Classification Rules for Anomaly Detection in Time-Series; a Big Data Conceptual Model to Improve Quality of Business Analytics; text Embeddings for Retrieval from a Large Knowledge Base; predicting Unemployment with Machine Learning Based on Registry Data; Anomaly Detection on Data Streams – A LSTM’s Diary; discovering Business Process Simulation Models in the Presence of Multitasking; TLKC-Privacy Model for Process Mining; incremental Discovery of Hierarchical Process Models; ontology Evolution in the Context of Model-Based Secure Software Engineering; blockchain-Based Personal Health Records for Patients’ Empowerment; COPri - A Core Ontology for Privacy Requirements Engineering; privacy Preserving Real-Time Video Stream Change Detection Based on the Orthogonal Tensor Decomposition Models; how to Measure Influence in Social Networks?; how the Anti-TrustRank Algorithm Can Help to Protect the Reputation of Financial Institutions; punctuation Restoration System for Slovene Language. © 2020 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Obidallah2020,
	author = {Obidallah, Waeal J. and Raahemi, Bijan and Ruhi, Umar},
	title = {Clustering and Association Rules for Web Service Discovery and Recommendation: A Systematic Literature Review},
	year = {2020},
	journal = {SN Computer Science},
	volume = {1},
	number = {1},
	pages = {},
	doi = {10.1007/s42979-019-0026-8},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85086839914&doi=10.1007%2Fs42979-019-0026-8&partnerID=40&md5=770c3009b8201ad59adeca150686d9a5},
	abstract = {The purpose of this study is to identify, summarize, and systematically compare various clustering and association rule techniques for web service discovery and recommendation, identify the most common data sets used in the extant literature, and highlight current trends and future research directions. Following the methodology of Kitchenham and Charters (Guidelines for performing Systematic Literature reviews in Software Engineering, 2007) for a systematic literature review (SLR), a set of research questions are designed. Six digital databases are searched. A total of 4581 papers were initially retrieved, and a rigorous two-stage scanning process resulted in 66 relevant papers. Based on the selection criteria and data extraction, 57 final studies were selected. These papers are summarized and compared, and the relevant information is extracted to answer the research questions. The synthesis resulted in knowledge of currently proposed methods for web service discovery and recommendation based on clustering and association rule techniques. Furthermore, it identifies algorithms, similarity measures, evaluation metrics, and data sets. Also identifies challenges, research gaps, trends, and future directions. We propose a classification of web service discovery and recommendation methods and map the 57 final selected papers into these classes. This review will help researchers to understand the current state-of-the-art in clustering and association rules techniques for web service discovery and recommendation, and also recognize trends and future directions for improvement. Future studies should broaden the basis of discovery and recommendation by including various types of web service descriptions including plain text that are currently used in web APIs. An opportunity for improvement by utilizing modern techniques based on big data analytics and social network analysis. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Association Rules; Clustering; Systematic Literature Review; Web Service Discovery; Web Service Recommendation},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Budgen20207,
	author = {Budgen, David and Brereton, Pearl and Williams, Nikki and Drummond, Sarah},
	title = {What support do systematic reviews provide for evidence-informed teaching about software engineering practice?},
	year = {2020},
	journal = {E-Informatica Software Engineering Journal},
	volume = {14},
	number = {1},
	pages = {7 - 60},
	doi = {10.37190/e-Inf200101},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85083274320&doi=10.37190%2Fe-Inf200101&partnerID=40&md5=2e2126a883eaea1f7b448d16292ccdba},
	abstract = {Background: The adoption of the evidence-based research paradigm by software engineering researchers has created a growing knowledge base provided by the outcomes from systematic reviews. Aim: We set out to identify and catalogue a sample of the knowledge provided by systematic reviews, to determine what support they can provide for an evidence-informed approach to teaching about software engineering practice. Method: We undertook a tertiary study (a mapping study of systematic reviews) covering the period to the end of 2015. We identified and catalogued those reviews that had findings or made recommendations that were considered relevant to teaching about industry practice. Results: We examined a sample of 276 systematic reviews, selecting 49 for which we could clearly identify practice-oriented findings and recommendations that were supported by the data analysis provided in the review. We have classified these against established software engineering education knowledge categories and discuss the extent and forms of knowledge provided for each category. Conclusion: While systematic reviews can provide knowledge that can inform teaching about practice, relatively few systematic reviews present the outcomes in a form suitable for this purpose. Using a suitable format for presenting a summary of outcomes could improve this. Additionally, the increasing number of published systematic reviews suggests that there is a need for greater coordination regarding the cataloguing of their findings and recommendations. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Education; Provenance; Systematic Review; Engineering Education; Software Engineering; Classifieds; Evidence Based Researches; Industry Practices; Mapping Studies; Provenance; Software Engineering Education Knowledge; Software Engineering Practices; Systematic Review; Tertiary Study; Knowledge Based Systems},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Accepted Open Access; Green Final Open Access; Green Open Access}
}

@ARTICLE{Yasin202036226,
	author = {Yasin, Affan and Fatima, Rubia and Wen, Lijie and Afzal, Wasif and Azhar, Muhammad and Torkar, Richard},
	title = {On using grey literature and google scholar in systematic literature reviews in software engineering},
	year = {2020},
	journal = {IEEE Access},
	volume = {8},
	pages = {36226 - 36243},
	doi = {10.1109/ACCESS.2020.2971712},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85081118214&doi=10.1109%2FACCESS.2020.2971712&partnerID=40&md5=531ffddba6a04f80039c6242bc112e85},
	abstract = {Context: The inclusion of grey literature (GL) is important to remove publication bias while gathering available evidence regarding a certain topic. The number of systematic literature reviews (SLRs) in Software Engineering (SE) is increasing but we do not know about the extent of GL usage in these SLRs. Moreover, Google Scholar is rapidly becoming a search engine of choice for many researchers but the extent to which it can find the primary studies is not known. Objective: This tertiary study is an attempt to i) measure the usage of GL in SLRs in SE. Furthermore this study proposes strategies for categorizing GL and a quality checklist to use for GL in future SLRs; ii) explore if it is feasible to use only Google Scholar for finding scholarly articles for academic research. Method: We have conducted a systematic mapping study to measure the extent of GL usage in SE SLRs as well as to measure the feasibility of finding primary studies using Google Scholar. Results and conclusions: a) Grey Literature: 76.09% SLRs (105 out of 138) in SE have included one or more GL studies as primary studies. Among total primary studies across all SLRs (6307), 582 are classified as GL, making the frequency of GL citing as 9.23%. The intensity of GL use indicate that each SLR contains 5 primary studies on average (total intensity of GL use being 5.54). The ranking of GL tells us that conference papers are the most used form 43.3% followed by technical reports 28.52%. Universities, research institutes, labs and scientific societies together make up 67.7% of GL used, indicating that these are useful sources for searching GL. We additionally propose strategies for categorizing GL and criteria for evaluating GL quality, which can become a basis for more detailed guidelines for including GL in future SLRs. b) Google Scholar Results: The results show that Google Scholar was able to retrieve 96% of primary studies of these SLRs. Most of the primary studies that were not found using Google Scholar were from grey sources. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Evaluation; Google Scholar; Gray; Grey Literature; Quality Checklist; Software Engineering; Systematic Mapping; Tertiary Study; Search Engines; Software Engineering; Empirical Evaluations; Google Scholar; Gray; Grey Literature; Systematic Mapping; Tertiary Study; Mapping},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Krüger2020627,
	author = {Krüger, Jacob and Lausberger, Christian and von Nostitz-Wallwitz, Ivonne and Saake, Gunter and Leich, Thomas},
	title = {Search. Review. Repeat? An empirical study of threats to replicating SLR searches},
	year = {2020},
	journal = {Empirical Software Engineering},
	volume = {25},
	number = {1},
	pages = {627 - 677},
	doi = {10.1007/s10664-019-09763-0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072114420&doi=10.1007%2Fs10664-019-09763-0&partnerID=40&md5=50d662565186f75a600b5fe4d3c81e58},
	abstract = {A systematic literature review (SLR) is an empirical method used to provide an overview of existing knowledge and to aggregate evidence within a domain. For computer science, several threats to the completeness of such reviews have been identified, leading to recommendations and guidelines on how to improve their quality. However, few studies address to what extent researchers can replicate an SLR. To conduct a replication, researchers have to first understand how the set of primary studies has been identified in the original study, and can ideally retrieve the same set when following the reported protocol. In this article, we focus on this initial step of a replication and report a two-fold empirical study: Initially, we performed a tertiary study using a sample of SLRs in computer science and identified what information that is needed to replicate the searches is reported. Based on the results, we conducted a descriptive, multi-case study on digital libraries to investigate to what extent these allow replications. The results reveal two threats to replications of SLRs: First, while researchers have improved the quality of their reports, relevant details are still missing—we refer to a reporting threat. Second, we found that some digital libraries are inconsistent in their query results—we refer to a searching threat. While researchers conducting a review can only overcome the first threat and the second may not be an issue for all kinds of replications, researchers should be aware of both threats when conducting, reviewing, and building on SLRs. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Digital Library; Replication; Software Engineering; Systematic Literature Review; Tertiary Study; Threats To Validity; Software Engineering; Empirical Method; Empirical Studies; Replication; Still Missing; Systematic Literature Review; Systematic Literature Review (slr); Tertiary Study; Threats To Validity; Digital Libraries},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Kitchenham2020353,
	author = {Kitchenham, Barbara Ann and Madeyski, Lech and Brereton, Pearl},
	title = {Meta-analysis for families of experiments in software engineering: a systematic review and reproducibility and validity assessment},
	year = {2020},
	journal = {Empirical Software Engineering},
	volume = {25},
	number = {1},
	pages = {353 - 401},
	doi = {10.1007/s10664-019-09747-0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85069906101&doi=10.1007%2Fs10664-019-09747-0&partnerID=40&md5=9f2f5ed7bcdf877347fcd078fbd984f7},
	abstract = {Context: Previous studies have raised concerns about the analysis and meta-analysis of crossover experiments and we were aware of several families of experiments that used crossover designs and meta-analysis. Objective: To identify families of experiments that used meta-analysis, to investigate their methods for effect size construction and aggregation, and to assess the reproducibility and validity of their results. Method: We performed a systematic review (SR) of papers reporting families of experiments in high quality software engineering journals, that attempted to apply meta-analysis. We attempted to reproduce the reported meta-analysis results using the descriptive statistics and also investigated the validity of the meta-analysis process. Results: Out of 13 identified primary studies, we reproduced only five. Seven studies could not be reproduced. One study which was correctly analyzed could not be reproduced due to rounding errors. When we were unable to reproduce results, we provide revised meta-analysis results. To support reproducibility of analyses presented in our paper, it is complemented by the reproducer R package. Conclusions: Meta-analysis is not well understood by software engineering researchers. To support novice researchers, we present recommendations for reporting and meta-analyzing families of experiments and a detailed example of how to analyze a family of 4-group crossover experiments. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Effect Size; Evidence-based Software Engineering; Families Of Experiments; Meta-analysis; Reproducible Research; Systematic Review; Software Engineering; Effect Size; Evidence Based Software Engineering; Meta Analysis; Reproducible Research; Systematic Review; Quality Control},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Washizaki201949,
	author = {Washizaki, Hironori and Uchida, Hiromu and Khomh, Foutse and GuÃ©hÃ©neuc, Yann GaÃ«l Pierre},
	title = {Studying Software Engineering Patterns for Designing Machine Learning Systems},
	year = {2019},
	pages = {49 - 54},
	doi = {10.1109/IWESEP49350.2019.00017},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85078118145&doi=10.1109%2FIWESEP49350.2019.00017&partnerID=40&md5=a1a98be6d51ca2c76e3e7ae65de78e74},
	abstract = {Machine-learning (ML) techniques are becoming more prevalent. ML techniques rely on mathematics and software engineering. Researchers and practitioners studying best practices strive to design ML systems and software that address software complexity and quality issues. Such design practices are often formalized as architecture and design patterns by encapsulating reusable solutions to common problems within given contexts. However, a systematic study to collect, classify, and discuss these software-engineering (SE) design patterns for ML techniques have yet to be reported. Our research collects good/bad SE design patterns for ML techniques to provide developers with a comprehensive classification of such patterns. Herein we report the preliminary results of a systematic-literature review (SLR) of good/bad design patterns for ML. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Anti-patterns; Architecture Patterns; Design Patterns; Machine Learning; Ml Patterns; Learning Systems; Machine Learning; Anti-patterns; Architecture Patterns; Design Patterns; Ml Patterns; Software Complexity; Software Engineering Pattern; Systematic Literature Review (slr); Systematic Study; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Çaldağ2019,
	author = {Çaldağ, Murat Tahir and Gökalp, Mert Onuralp and Gökalp, Ebru},
	title = {Open Government Data: Analysing Benefits and Challenges},
	year = {2019},
	pages = {},
	doi = {10.1109/UBMYK48245.2019.8965581},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85079235191&doi=10.1109%2FUBMYK48245.2019.8965581&partnerID=40&md5=e9d4138d3d7fe69dff84af594296da5b},
	abstract = {Open Government Data enables stakeholders to monitor and participate in governance processes by accessing governance information and decision-making areas while providing transparency, accountability, cooperation, participation, new job opportunities that provide public benefits. However, many open government data initiatives either fail or never start because of the challenges it has. After conducting the systematic literature review, it was determined that there is a lack of study covering analyzing the benefits and challenges of open government data in a holistic perspective and providing a road map to overcome these difficulties for our country. In order to satisfy this gap, this study aims to define the benefits and challenges of open government data from a holistic socio-technical perspective and derive a roadmap including guidelines to overcome these difficulties for the benefit of organizations aiming to transition to open government data. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Benefit And Challenge Analysis; Open Data; Open Government Data; Road Map; Socio-technic Approach; Decision Making; Government Data Processing; Maps; Software Engineering; Benefit And Challenges; Holistic Perspectives; Job Opportunities; Open Government Data; Road-maps; Socio-technic Approach; Socio-technical Perspective; Systematic Literature Review; Open Data},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Aldave2019,
	author = {Aldave, Ainhoa and Vara, Juan M. and Granada, David and Marcos, Esperanza Marco},
	title = {Leveraging creativity in requirements elicitation within agile software development: A systematic literature review},
	year = {2019},
	journal = {Journal of Systems and Software},
	volume = {157},
	pages = {},
	doi = {10.1016/j.jss.2019.110396},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071319044&doi=10.1016%2Fj.jss.2019.110396&partnerID=40&md5=262d1f2f04dbfcdb810ccde2f5d539ed},
	abstract = {Agile approaches tend to focus solely on scoping and simplicity rather than on problem solving and discovery. This hampers the development of innovative solutions. Additionally, little has been said about how to capture and represent the real user needs. To fill this gap, some authors argue in favor of the application of “Creative thinking” for requirements elicitation within agile software development. This synergy between creativeness and agility has arisen as a new means of bringing innovation and flexibility to increasingly demanding software. The aim of the present study is therefore to employ a systematic review to investigate the state-of-the-art of those approaches that leverage creativity in requirements elicitation within Agile Software Development, as well as the benefits, limitations and strength of evidence of these approaches. The review was carried out by following the guidelines proposed by Dr. Kitchenham. The search strategy identified 1451 studies, 17 of which were eventually classified as primary studies. The selected studies contained 13 different and unique proposals. These approaches provide evidence that enhanced creativity in requirements elicitation can be successfully implemented in real software projects. We specifically observed that projects related to user interface development, such as those for mobile or web applications, are good candidates for the use of these approaches. We have also found that agile methodologies such as Scrum, Extreme Programming or methodologies based on rapid modelling are preferred when introducing creativity into requirements elicitation. Despite this being a new research field, there is a mixture of techniques, tools and processes that have already been and are currently being successfully tested in industry. Finally, we have found that, although creativity is an important ingredient with which to bring about innovation, it is not always sufficient to generate new requirements because this needs to be followed by user engagement and a specific context in which proper conditions, such as flexibility, time or resources, have to be met. © 2019 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile Methodologies; Creative Thinking; Requirements Elicitation; Software Development; Software Project Management; Systematic Review; Application Programs; Project Management; Requirements Engineering; Software Engineering; User Interfaces; Agile Methodologies; Creative Thinking; Requirements Elicitation; Software Project Management; Systematic Review; Software Design},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@CONFERENCE{Ramirez2019,
	author = {Ramirez, M. Olivia Garcia and De-La-Torre, Miguel and Monsalve, Carlos},
	title = {Methodologies for the design of application frameworks: Systematic review; Metodologías para el diseño de frameworks de aplicaciones: Revisión sistemática},
	year = {2019},
	pages = {},
	doi = {10.1109/CIMPS49236.2019.9082427},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85085031556&doi=10.1109%2FCIMPS49236.2019.9082427&partnerID=40&md5=1f607b8f13f0013720d4f90e335acd2b},
	abstract = {Framework design for application development allows to reuse design patterns and code, speeding up the production of software in a same domain. However, in order to design a framework, it is required a considerable time before a functional product is ready to use, and it is essential to design following the best practices. The lack of a guide with current methodologies for framework development was the main motivation to pursue this systematic review. In this paper, the results of the systematic review to find the methodologies for framework development in the context of software engineering are reported and analyzed. The initial search threw 13, 624 documents, from which only 30 references were relevant after refinement. The analysis of these documents provided evidence of diverse methodologies for framework development, which adopt UML for their definition. On the other hand, whereas some works emphasize the structure to support the functionality, others prioritize the behavior of the classes. The analysis of the results suggests the use of UML in the design process, the implementation of design patterns, the identification of hot-spots, and the recognition of black-box and white-box frameworks. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Framework Design; Systematic Review; Methodologies, Framework Design; Software Development; Software Development; Methodologies; Systematic Review; Application Programs; Computer Software Reusability; Process Engineering; Application Development; Application Frameworks; Design Patterns; Design Process; Framework Designs; Framework Development; Functional Products; Systematic Review; Product Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ali2019,
	author = {Ali, Asad and Gravino, Carmine},
	title = {A systematic literature review of software effort prediction using machine learning methods},
	year = {2019},
	journal = {Journal of Software: Evolution and Process},
	volume = {31},
	number = {10},
	pages = {},
	doi = {10.1002/smr.2211},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074100616&doi=10.1002%2Fsmr.2211&partnerID=40&md5=68452254e68c5b17699bbfc3b97177fe},
	abstract = {Machine learning (ML) techniques have been widely investigated for building prediction models, able to estimate software development effort as well as to improve the accuracy of other estimation techniques. The objective of this paper is to systematically review the recent studies which used and discussed the software effort estimation models built using ML techniques. The performed literature review is based on the empirical studies published in the time period of January 1991 to December 2017, by employing widely used guidelines. The review has selected a total of 75 primary studies after the careful filtering of inclusion/exclusion and quality assessment criteria. The performed analysis reveals that artificial neural network (ANN) as ML model, NASA as dataset, and mean magnitude of relative error (MMRE) as accuracy measure are widely used in the selected studies. ANN and support vector machine (SVM) are the two techniques which have outperformed other ML techniques in more studies. Regression techniques are the mostly used among the non-ML techniques, which outperformed other ML techniques in about 19 studies. Moreover, SVM and regression techniques in combination are characterized by better predictions when compared with other ML and non-ML techniques. © 2019 Elsevier B.V., All rights reserved.},
	author_keywords = {Accuracy Measure; Effort Estimation; Machine Learning; Slr; Software Engineering; Forecasting; Learning Systems; Machine Learning; Nasa; Neural Networks; Object Oriented Programming; Software Engineering; Support Vector Machines; Accuracy Measures; Effort Estimation; Machine Learning Methods; Mean Magnitude Of Relative Errors; Software Development Effort; Software Effort Estimation; Software Effort Prediction; Systematic Literature Review; Software Design},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Bedu201933,
	author = {Bedu, Laure and Tinh, Olivier and Petrillo, Fábio},
	title = {A tertiary systematic literature review on software visualization},
	year = {2019},
	pages = {33 - 44},
	doi = {10.1109/VISSOFT.2019.00013},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85075855720&doi=10.1109%2FVISSOFT.2019.00013&partnerID=40&md5=f99f8991fa9547d200e293186b1a4f0d},
	abstract = {Software visualization (SV) allows us to visualize different aspects and artifacts related to software, thus helping engineers understanding its underlying design and functionalities in a more efficient and faster way. In this paper, we conducted a tertiary systematic literature review to identify, classify, and evaluate the current state of the art on software visualization from 48 software visualization secondary studies, following three perspectives: publication trends, software visualization topics and techniques, and issues related to research field. Hence, we summarized the main findings among popular sub-fields of SV, identifying potential research directions and fifteen shared recommendations for developers, instructors and researchers. Our main findings are the lack of rigorous evaluation or theories support to assess SV tools effectiveness, the disconnection between tool design and their scope, and the dispersal of the research community. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Information Visualization; Literature Review; Recommendations; Slr; Software Engineering; Software Visualization; Tertiary; Visualization Techniques; Information Systems; Software Engineering; Information Visualization; Literature Reviews; Recommendations; Software Visualization; Tertiary; Visualization Technique; Visualization},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Naranjo-Zeledón2019,
	author = {Naranjo-Zeledón, Luis and Peral, Jesús and Ferrández, Antonio and Chacón-Rivas, Mario},
	title = {A systematic mapping of translation-enabling technologies for sign languages},
	year = {2019},
	journal = {Electronics (Switzerland)},
	volume = {8},
	number = {9},
	pages = {},
	doi = {10.3390/electronics8091047},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85075142159&doi=10.3390%2Felectronics8091047&partnerID=40&md5=8af2f9f42d81591da0b03790968fb727},
	abstract = {Sign languages (SL) are the first language for most deaf people. Consequently, bidirectional communication among deaf and non-deaf people has always been a challenging issue. Sign language usage has increased due to inclusion policies and general public agreement, which must then become evident in information technologies, in the many facets that comprise sign language understanding and its computational treatment. In this study, we conduct a thorough systematic mapping of translation-enabling technologies for sign languages. This mapping has considered the most recommended guidelines for systematic reviews, i.e., those pertaining software engineering, since there is a need to account for interdisciplinary areas of accessibility, human computer interaction, natural language processing, and education, all of them part of ACM (Association for Computing Machinery) computing classification system directly related to software engineering. An ongoing development of a software tool called SYMPLE (SYstematic Mapping and Parallel Loading Engine) facilitated the querying and construction of a base set of candidate studies. A great diversity of topics has been studied over the last 25 years or so, but this systematic mapping allows for comfortable visualization of predominant areas, venues, top authors, and different measures of concentration and dispersion. The systematic review clearly shows a large number of classifications and subclassifications interspersed over time. This is an area of study in which there is much interest, with a basically steady level of scientific publications over the last decade, concentrated mainly in the European continent. The publications by country, nevertheless, usually favor their local sign language. © 2019 Elsevier B.V., All rights reserved.},
	author_keywords = {Animation; Avatar; Gesture Recognition; Machine Translation; Sign Language; Systematic Mapping},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Accepted Open Access; Green Open Access}
}

@CONFERENCE{Cummaudo2019,
	author = {Cummaudo, Alex and Vasa, Rajesh and Grundy, John C.},
	title = {What should i document? A preliminary systematic mapping study into API documentation knowledge},
	year = {2019},
	journal = {International Symposium on Empirical Software Engineering and Measurement},
	volume = {2019-Septemer},
	pages = {},
	doi = {10.1109/ESEM.2019.8870148},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074298992&doi=10.1109%2FESEM.2019.8870148&partnerID=40&md5=3efbf9dfed4c8c1027e50493bb296791},
	abstract = {Background: Good API documentation facilitates the development process, improving productivity and quality. While the topic of API documentation quality has been of interest for the last two decades, there have been few studies to map the specific constructs needed to create a good document. In effect, we still need a structured taxonomy that captures such knowledge systematically.Aims: This study reports emerging results of a systematic mapping study. We capture key conclusions from previous studies that assess API documentation quality, and synthesise the results into a single framework.Method: By conducting a systematic review of 21 key works, we have developed a five dimensional taxonomy based on 34 categorised weighted recommendations.Results: All studies utilise field study techniques to arrive at their recommendations, with seven studies employing some form of interview and questionnaire, and four conducting documentation analysis. The taxonomy we synthesise reinforces that usage description details (code snippets, tutorials, and reference documents) are generally highly weighted as helpful in API documentation, in addition to design rationale and presentation.Conclusions: We propose extensions to this study aligned to developer utility for each of the taxonomy's categories. © 2019 Elsevier B.V., All rights reserved.},
	author_keywords = {Api; Devx; Documentation; Systematic Mapping Study; Taxonomy; Mapping; Software Engineering; Surveys; System Program Documentation; Taxonomies; Design Rationale; Development Process; Devx; Documentation Analysis; Field Studies; Systematic Mapping Studies; Systematic Review; Application Programming Interfaces (api)},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@CONFERENCE{Neto2019,
	author = {Neto, Geraldo Torres G. and Santos, Wylliams Barbosa and Endo, Patricia Takako and Roberta Fagundes, A. A.},
	title = {Multivocal literature reviews in software engineering: Preliminary findings from a tertiary study},
	year = {2019},
	journal = {International Symposium on Empirical Software Engineering and Measurement},
	volume = {2019-Septemer},
	pages = {},
	doi = {10.1109/ESEM.2019.8870142},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074253912&doi=10.1109%2FESEM.2019.8870142&partnerID=40&md5=c65318c52778136c8876cf9a6186a0af},
	abstract = {Background: In recent years, studies involving Grey Literature (GL) have been growing and attracting the attention of researchers in software engineering (SE). One of the sources of GL refers to content produced by professionals based on their practical experiences? Recent researches in the SE states that GL can complement areas of research that are not yet clearly defined in the scientific literature. In this context, the Multivocal Literature Review (MLR), a form of Systematic Literature Review (SLR) with the inclusion of GL, emerges. Goal: Provide preliminary work about the current research involving MLR studies? First, we investigate the motivation of the researchers to include GL in review studies; and second, we examine how GL was included in the studies. Method: A tertiary study was conducted to search MLR studies published between 2009 to April of 2019. Results: The main motivations for including GL in review studies are: lack of academic research on the topic, emerging research on this topic, and complementary evidence in the GL? Internet articles and white papers were the main sources of GL data used. Conclusions: The conducting of MLR studies is still in its early stages; we have identified only 12 secondary studies. The MLR studies were conducted using guidelines for performing SLRs. What we consider to be a threat to the validity of these studies, since guidelines to conduct SLR studies do not provide recommendations for quality analysis and synthesis of primary studies, including GL. © 2019 Elsevier B.V., All rights reserved.},
	author_keywords = {Motivation; Software Engineering; Academic Research; Analysis And Synthesis; Grey Literature; Literature Reviews; Practical Experience; Recent Researches; Scientific Literature; Systematic Literature Review (slr); Engineering Research},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Garousi20192540,
	author = {Garousi, Vahid and Pfahl, Dietmar and Fernandes, João M. and Felderer, Michael and Mäntylä, Mika V. and Shepherd, David C. and Arcuri, Andrea and Coşkunçay, Ahmet and Tekinerdogan, Bedir},
	title = {Characterizing industry-academia collaborations in software engineering: evidence from 101 projects},
	year = {2019},
	journal = {Empirical Software Engineering},
	volume = {24},
	number = {4},
	pages = {2540 - 2602},
	doi = {10.1007/s10664-019-09711-y},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064827278&doi=10.1007%2Fs10664-019-09711-y&partnerID=40&md5=e8597e7f3001597156c6d45fad8cfb0b},
	abstract = {Research collaboration between industry and academia supports improvement and innovation in industry and helps ensure the industrial relevance of academic research. However, many researchers and practitioners in the community believe that the level of joint industry-academia collaboration (IAC) projects in Software Engineering (SE) research is relatively low, creating a barrier between research and practice. The goal of the empirical study reported in this paper is to explore and characterize the state of IAC with respect to industrial needs, developed solutions, impacts of the projects and also a set of challenges, patterns and anti-patterns identified by a recent Systematic Literature Review (SLR) study. To address the above goal, we conducted an opinion survey among researchers and practitioners with respect to their experience in IAC. Our dataset includes 101 data points from IAC projects conducted in 21 different countries. Our findings include: (1) the most popular topics of the IAC projects, in the dataset, are: software testing, quality, process, and project managements; (2) over 90% of IAC projects result in at least one publication; (3) almost 50% of IACs are initiated by industry, busting the myth that industry tends to avoid IACs; and (4) 61% of the IAC projects report having a positive impact on their industrial context, while 31% report no noticeable impacts or were “not sure”. To improve this situation, we present evidence-based recommendations to increase the success of IAC projects, such as the importance of testing pilot solutions before using them in industry. This study aims to contribute to the body of evidence in the area of IAC, and benefit researchers and practitioners. Using the data and evidence presented in this paper, they can conduct more successful IAC projects in SE by being aware of the challenges and how to overcome them, by applying best practices (patterns), and by preventing anti-patterns. © 2019 Elsevier B.V., All rights reserved.},
	author_keywords = {Anti-patterns; Best Practices; Challenges; Empirical Study; Evidence; Industry-academia Collaborations; Patterns; Software Engineering; Industrial Research; Software Engineering; Software Testing; Statistical Tests; Anti-patterns; Best Practices; Challenges; Empirical Studies; Evidence; Patterns; Project Management},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Final Open Access; Green Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Mendes2019355,
	author = {Mendes, Emilia and Romero Felizardo, Katia Romero and Wohlin, Claes and Kalinowski, M.},
	title = {Search Strategy to Update Systematic Literature Reviews in Software Engineering},
	year = {2019},
	pages = {355 - 362},
	doi = {10.1109/SEAA.2019.00061},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85076019859&doi=10.1109%2FSEAA.2019.00061&partnerID=40&md5=4bb4803e8602374f63aeabb276fc0173},
	abstract = {[Context] Systematic Literature Reviews (SLRs) have been adopted within the Software Engineering (SE) domain for more than a decade to provide meaningful summaries of evidence on several topics. Many of these SLRs are now outdated, and there are no standard proposals on how to update SLRs in SE. [Objective] The goal of this paper is to provide recommendations on how to best to search for evidence when updating SLRs in SE. [Method] To achieve our goal, we compare and discuss outcomes from applying different search strategies to identifying primary studies in a previously published SLR update on effort estimation. [Results] The use of a single iteration forward snowballing with Google Scholar, and employing the original SLR and its primary studies as a seed set seems to be the most cost-effective way to search for new evidence when updating SLRs. [Conclusions] The recommendations can be used to support decisions on how to update SLRs in SE. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Searching For Evidence!; Snowballing; Software Engineering; Systematic Literature Review Update; Systematic Literature Reviews; Cost Effectiveness; Iterative Methods; Software Engineering; Cost Effective; Effort Estimation; Google Scholar; Search Strategies; Searching For Evidence; Seed Set; Snowballing; Systematic Literature Review; Application Programs},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ali201948,
	author = {Ali, Nauman Bin and Usman, Muhammad},
	title = {A critical appraisal tool for systematic literature reviews in software engineering},
	year = {2019},
	journal = {Information and Software Technology},
	volume = {112},
	pages = {48 - 50},
	doi = {10.1016/j.infsof.2019.04.006},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064816057&doi=10.1016%2Fj.infsof.2019.04.006&partnerID=40&md5=2c3b2ab2dfc92fdf7aba842fe4656855},
	abstract = {Context: Methodological research on systematic literature reviews (SLRs) in Software Engineering (SE) has so far focused on developing and evaluating guidelines for conducting systematic reviews. However, the support for quality assessment of completed SLRs has not received the same level of attention. Objective: To raise awareness of the need for a critical appraisal tool (CAT) for assessing the quality of SLRs in SE. To initiate a community-based effort towards the development of such a tool. Method: We reviewed the literature on the quality assessment of SLRs to identify the frequently used CATs in SE and other fields. Results: We identified that the CATs currently used is SE were borrowed from medicine, but have not kept pace with substantial advancements in the field of medicine. Conclusion: In this paper, we have argued the need for a CAT for quality appraisal of SLRs in SE. We have also identified a tool that has the potential for application in SE. Furthermore, we have presented our approach for adapting this state-of-the-art CAT for assessing SLRs in SE. © 2019 Elsevier B.V., All rights reserved.},
	author_keywords = {Amstar; Critical Appraisal Tools; Quality Assessment; Software Engineering; Systematic Literature Reviews; Software Engineering; Amstar; Community-based; Methodological Research; Quality Appraisals; Quality Assessment; State Of The Art; Systematic Literature Review; Systematic Review; Quality Management},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Final Open Access; Green Open Access; Hybrid Gold Open Access}
}

@CONFERENCE{Tahaei2019129,
	author = {Tahaei, Mohammad and Vaniea, Kami E.},
	title = {A Survey on Developer-Centred Security},
	year = {2019},
	pages = {129 - 138},
	doi = {10.1109/EuroSPW.2019.00021},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071936271&doi=10.1109%2FEuroSPW.2019.00021&partnerID=40&md5=b7d680bdfe17a6f9c5e628d521031844},
	abstract = {Software developers are key players in the security ecosystem as they produce code that runs on millions of devices. Yet we continue to see insecure code being developed and deployed on a regular basis despite the existence of support infrastructures, tools, and research into common errors. This work provides a systematised overview of the relatively new field of Developer-Centred Security which aims to understand the context in which developers produce security-relevant code as well as provide tools and processes that that better support both developers and secure code production. We report here on a systematic literature review of 49 publications on security studies with software developer participants. We provide an overview of both the types of methodologies currently being used as well as the current research in the area. Finally, we also provide recommendations for future work in Developer-Centred Security. © 2019 Elsevier B.V., All rights reserved.},
	author_keywords = {Computer Security; Developers; Human Computer Interaction; Human Factors; Software Development; Survey; Systematic Literature Review; Usable Security And Privacy; Codes (symbols); Computer Privacy; Human Computer Interaction; Human Engineering; Security Of Data; Software Design; Software Engineering; Surveying; Surveys; Developers; Secure Codes; Security Studies; Software Developer; Systematic Literature Review; Usable Security; Computer Software},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Mohammed2019357,
	author = {Mohammed, Anmar Abdullah and Haji Ahmad, Azizah and Omar, Mazni Binti},
	title = {Improvement of agile software development size & effort estimation methods},
	year = {2019},
	journal = {International Journal of Innovative Technology and Exploring Engineering},
	volume = {8},
	number = {8},
	pages = {357 - 362},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071339484&partnerID=40&md5=d0d9b05953ec86489083769461bf47eb},
	abstract = {This paper aims to lay down the existing evidence concerning agile software estimation, it summarizes the empirical evidence of the existing agile estimation methods, identify gaps in the current research in order to suggest areas of further investigation and improvement, and to provide a basis for the improvement of agile software estimation research through a systematic review of previous work. The contribution of this paper is twofold, first is providing a basis for the improvement of agile software estimation through a systematic literature review of previous work. Secondly, it presents a recommendation for further research based on the results presented in this paper and the recommendations by well-known researchers in the field of software engineering in general and in software estimation in particular. © 2019 Elsevier B.V., All rights reserved.},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Josifovska201925,
	author = {Josifovska, Klementina and Yigitbas, Enes and Engels, Gregor},
	title = {Reference Framework for Digital Twins within Cyber-Physical Systems},
	year = {2019},
	pages = {25 - 31},
	doi = {10.1109/SEsCPS.2019.00012},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072842816&doi=10.1109%2FSEsCPS.2019.00012&partnerID=40&md5=49795fca155d4187599aa756c6e68654},
	abstract = {Cyber-Physical Systems (CPSs) represent systems which integrate physical units and processes with computational entities over Internet and allow ubiquitous access of information and services. Although the application of CPSs promise to positively transform many application fields, there are still many open questions and challenges on how to design and realize a CPS. As indicated in the third level of the 5-level CPS architecture, the so-called cyber level, one of the challenges addresses the need for digital twins as high-fidelity mirroring images of CPSs entities. This is a prerequisite to realize the upper levels of the 5-level CPS architecture-the cognition and configuration level. In the scientific literature, the concept of a Digital Twin is introduced as a concrete realization for mirroring physical entities in the virtual world. However, a reference framework for the main building blocks of a Digital Twin framework is missing. This hinders a reuse of best practices and proven solutions for concrete realizations of a Digital Twin. In order to tackle this problem, we have established a reference framework for Digital Twins within a CPS. Our framework specifies the main building blocks of a Digital Twin in terms of structure and interrelations. To achieve this goal, we performed a systematic literature review, where we evaluated existing Digital Twin realizations used in different application domains of CPSs and we applied Grounded Theory and Framework Analysis as underlying methodologies. This reference framework serves a blueprint for developing Digital Twins of physical entities which are part of a CPS. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Cyber-physical System; Digital Twin; Reference Framework; Computation Theory; Concretes; Cyber Physical System; Software Engineering; Virtual Reality; Application Fields; Computational Entities; Cyber Physical Systems (cpss); Digital Twin; Reference Frameworks; Scientific Literature; Systematic Literature Review; Ubiquitous Access; Embedded Systems},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Cruz-Benito2019118,
	author = {Cruz-Benito, Juan and García-Peñalvo, Francisco José and Therón, Roberto},
	title = {Analyzing the software architectures supporting HCI/HMI processes through a systematic review of the literature},
	year = {2019},
	journal = {Telematics and Informatics},
	volume = {38},
	pages = {118 - 132},
	doi = {10.1016/j.tele.2018.09.006},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054439145&doi=10.1016%2Fj.tele.2018.09.006&partnerID=40&md5=9da06d8a53e41305e3ffa6dcc01cdc9d},
	abstract = {Many researchers have dealt with Human-Computer Interaction or Human-Machine Interaction by building or designing software architectures that facilitate the users’ interaction or recognize users’ inputs to the generate proper responses. Many studies include these approaches in different research areas: from research in healthcare to mobile environments, robotics, etc. Interaction is seen as a critical concept, and the work for its improvement is a crucial factor for many platforms, systems, and business domains. The goal of this manuscript is to present a systematic review of the literature to identify, analyze and classify the published approaches to support or enhance Human-Computer Interaction or Human-Machine Interaction from the perspective of software architectures. The method followed is the systematic review following the guidelines related to Systematic Literature Reviews methods such as the one proposed by Kitchenham and other authors in the field of software engineering. As results, this study identified 39 papers that included software architectures to improve or analyze Human-Computer Interaction or Human-Machine Interaction. Three main approaches were found on software architectures: layered architectures, modular architectures, and architectures based on software agents, but they lacked standardization and were mainly ad-hoc solutions. The primary interfaces covered were those related to Graphical User Interfaces (GUIs) and multimodal/natural ones. The primary application domain detected were in multimodal systems. The main purpose of most of the papers was to support multimodal interaction. Some conclusions achieved are that the generic solutions to support or analyze HCI/HMI processes are still rare in the literature. Despite many works dealing with this topic and its issues and challenges, it is necessary to keep on improving the research in this area through the application of standard techniques and solutions, exploring new ways of analyzing and interpreting interaction, escaping from ad-hoc solutions or evaluating the solutions proposed. © 2019 Elsevier B.V., All rights reserved.},
	author_keywords = {Human-computer Interaction; Human-machine Interaction; Software Architectures; Systematic Literature Review; Computer Architecture; Engineering Research; Graphical User Interfaces; Man Machine Systems; Modal Analysis; Software Agents; Software Architecture; Application Of Standards; Graphical User Interface (guis); Human Machine Interaction; Issues And Challenges; Layered Architecture; Modular Architectures; Multi-modal Interactions; Systematic Literature Review; Human Computer Interaction},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Fu201968,
	author = {Fu, Changlan and Zhang, He and Huang, Xin and Zhou, Xin and Li, Zhi},
	title = {A review of meta-ethnographies in software engineering},
	year = {2019},
	journal = {ACM International Conference Proceeding Series},
	pages = {68 - 77},
	doi = {10.1145/3319008.3319015},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064762574&doi=10.1145%2F3319008.3319015&partnerID=40&md5=df051ea79bde18d3221c6872a753b9f3},
	abstract = {Context: Data synthesis is one of the most significant tasks in Systematic Literature Review (SLR). Software Engineering (SE) researchers have adopted a variety of methods of synthesizing data that originated in other disciplines. One of the qualitative data synthesis methods is meta-ethnography, which is being used in SE SLRs. Objective: We aim at studying the adoption of meta-ethnography in SE SLRs in order to understand how this method has been used in SE. Method: We conducted a tertiary study of the use of meta-ethnography by reviewing sixteen SLRs. We carried out an empirical inquiry by integrating SLR and confirmatory email survey. Results: There is a general lack of knowledge, or even awareness, of different aspects of meta-ethnography and/or how to apply it. Conclusion: There is a need of investment in gaining in-depth knowledge and skills of correctly applying meta-ethnography in order to increase the quality and reliability of the findings generated from SE SLRs. Our study reveals that meta-ethnography is a suitable method to SE research. We discuss challenges and propose recommendations of adopting meta-ethnography in SE. Our effort also offers a preliminary checklist of the systematic considerations for doing meta-ethnography in SE and improving the quality of meta-ethnographic research in SE. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Meta-ethnography; Qualitative Research Synthesis; Systematic (literature) Review; Data Synthesis; In-depth Knowledge; Meta-ethnography; Qualitative Data; Qualitative Research; Systematic (literature) Review; Systematic Literature Review (slr); Tertiary Study; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Okesola2019671,
	author = {Okesola, Julius Olatunji and Adebiyi, Marion Olubunmi and Kennedy, Okokpujie O. and Odepitan, David and Goddy-Worlu, Rowland N. and Iheanetu, Olamma U. and Omogbadegun, Zacchaeus O. and Adebiyi, Ayodele Ariyo},
	title = {A systematic review of requirement engineering practices in agile model},
	year = {2019},
	journal = {International Journal of Mechanical Engineering and Technology},
	volume = {10},
	number = {2},
	pages = {671 - 687},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85063558495&partnerID=40&md5=0072a99a2fc37d9438f3eda93f62cbcc},
	abstract = {Requirement engineering practice (REP) are developed from requirement engineering processes to guide the engineers in requirement definition. Even though, the practices in agile present a few restrictions and open up several challenges to software industry, they help to address difficulties of conventional models and avert unnecessary cost. However, there are no clear-cut separation of these practices into their individual processes since the practices are closely used and the requirements are ever dynamic. Using Quasi-Gold standard to develop the search strategy and validating the same strategy by Snowballing, this study adapted Kitchenham guidelines to perform a systematic literature review towards identifying the common REP and the extent at which the REP are imbibed in software engineering. Requirement Management is the most popular practice while pre-testing is barely noticed. Eight of their associated challenges are identified and solutions discussed. REP is fully accepted in software engineering going by the annual rise in their discussions but future works is required on the detailed analysis of the root cause of these challenge. © 2019 Elsevier B.V., All rights reserved.},
	author_keywords = {And Snowballing; Engineering Practice; Engineering Process; Quasi-gold; Requirement Engineering Practice; Requirement Engineering Process; Requirement Management},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Garousi2019101,
	author = {Garousi, Vahid and Felderer, Michael and Mäntylä, Mika V.},
	title = {Guidelines for including grey literature and conducting multivocal literature reviews in software engineering},
	year = {2019},
	journal = {Information and Software Technology},
	volume = {106},
	pages = {101 - 121},
	doi = {10.1016/j.infsof.2018.09.006},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85053877709&doi=10.1016%2Fj.infsof.2018.09.006&partnerID=40&md5=c3e02944c35ca73f617a36c8a257bf78},
	abstract = {Context: A Multivocal Literature Review (MLR) is a form of a Systematic Literature Review (SLR) which includes the grey literature (e.g., blog posts, videos and white papers) in addition to the published (formal) literature (e.g., journal and conference papers). MLRs are useful for both researchers and practitioners since they provide summaries both the state-of-the art and –practice in a given area. MLRs are popular in other fields and have recently started to appear in software engineering (SE). As more MLR studies are conducted and reported, it is important to have a set of guidelines to ensure high quality of MLR processes and their results. Objective: There are several guidelines to conduct SLR studies in SE. However, several phases of MLRs differ from those of traditional SLRs, for instance with respect to the search process and source quality assessment. Therefore, SLR guidelines are only partially useful for conducting MLR studies. Our goal in this paper is to present guidelines on how to conduct MLR studies in SE. Method: To develop the MLR guidelines, we benefit from several inputs: (1) existing SLR guidelines in SE, (2), a literature survey of MLR guidelines and experience papers in other fields, and (3) our own experiences in conducting several MLRs in SE. We took the popular SLR guidelines of Kitchenham and Charters as the baseline and extended/adopted them to conduct MLR studies in SE. All derived guidelines are discussed in the context of an already-published MLR in SE as the running example. Results: The resulting guidelines cover all phases of conducting and reporting MLRs in SE from the planning phase, over conducting the review to the final reporting of the review. In particular, we believe that incorporating and adopting a vast set of experience-based recommendations from MLR guidelines and experience papers in other fields have enabled us to propose a set of guidelines with solid foundations. Conclusion: Having been developed on the basis of several types of experience and evidence, the provided MLR guidelines will support researchers to effectively and efficiently conduct new MLRs in any area of SE. The authors recommend the researchers to utilize these guidelines in their MLR studies and then share their lessons learned and experiences. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Evidence-based Software Engineering; Grey Literature; Guidelines; Literature Study; Multivocal Literature Review; Systematic Literature Review; Systematic Mapping Study; Information Systems; Evidence Based Software Engineering; Grey Literature; Guidelines; Literature Reviews; Literature Studies; Systematic Literature Review; Systematic Mapping Studies; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Aly2019472,
	author = {Aly, Mohab and Khomh, Foutse and GuÃ©hÃ©neuc, Yann GaÃ«l Pierre and Washizaki, Hironori and Yacout, Soumaya},
	title = {Is Fragmentation a Threat to the Success of the Internet of Things?},
	year = {2019},
	journal = {IEEE Internet of Things Journal},
	volume = {6},
	number = {1},
	pages = {472 - 487},
	doi = {10.1109/JIOT.2018.2863180},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051049569&doi=10.1109%2FJIOT.2018.2863180&partnerID=40&md5=0b7583a46590886c602c15e68fe761bb},
	abstract = {Internet of Things (IoT) aims to bring connectivity to almost every objects, i.e., things, found in the physical space. It extends connectivity to everyday things, however, such increase in the connectivity creates many prominent challenges. Context: Generally, IoT opens the door for new applications for machine-to-machine and human-to-human communications. The current trend of collaborating, distributed teams through the Internet, mobile communications, and autonomous entities, e.g., robots, is the first phase of the IoT to develop and deliver diverse services and applications. However, such collaborations is threatened by the fragmentation that we witness in the industry nowadays as it brings difficulty to integrate the diverse technologies of the various objects found in IoT systems. Diverse technologies induce interoperability issues while designing and developing various services and applications, hence, limiting the possibility of reusing the data, more specifically, the software (including frameworks, firmware, applications programming interfaces, and user interfaces) as well as of facing issues, like security threats and bugs, when developing new services or applications. Different aspects of handling data collection ranging from discovering smart sensors for data collection, integrating and applying reasoning on them must be available to provide interoperability and flexibility to the diverse objects interacting in the system. However, such approaches are bound to be challenged in future IoT scenarios as they bring substantial performance impairments in settings with the very large number of collaborating devices and technologies. Objective: We raise the awareness of the community about the lack of interoperability among technologies developed for IoT and challenges that their integration poses. We also provide guidelines for researchers and practitioners interested in connecting IoT networks and devices to develop services and applications. Method: We apply the methods advocated by the evidence-based software engineering paradigm. This paradigm and its core tool, the systematic literature review (SLR), were introduced to the software-engineering research community early 2004 to help researchers and industry systematically and objectively gather and aggregate evidences about different topics. In this paper, we conduct an SLR of both IoT interoperability issues and the state-of-practice of IoT technologies in the industry, highlighting the integration challenges related to the IoT that have significantly shifted the landscape of Internet-based collaborative services and applications nowadays. Results: Our SLR identifies a number of studies from journals, conferences, and workshops with the highest quality in the field. This SLR reports different trends, including frameworks and technologies, for the IoT for better comprehension of the paradigm and discusses the integration and interoperability challenges across the different layers of this technology while shedding light on the current IoT state-of-practice. It also discusses some future research directions for the community. © 2019 Elsevier B.V., All rights reserved.},
	author_keywords = {Internet Of Things (iot); Interoperability; Models; Protocols; Standards; Technologies And Frameworks; Application Programming Interfaces (api); Application Programs; Automation; Biological Systems; Computer Supported Cooperative Work; Data Acquisition; Data Handling; Data Structures; Distributed Computer Systems; Firmware; Interoperability; Machine-to-machine Communication; Models; Network Protocols; Program Debugging; Standards; User Interfaces; Wireless Sensor Networks; Biological System Modeling; Collaborative Services; Evidence Based Software Engineering; Future Research Directions; Internet Of Things (iot); Machine To Machine (m2m); Services And Applications; Systematic Literature Review (slr); Internet Of Things},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Porras20197750,
	author = {Porras, Jari and Happonen, A. and Knutas, Antti and Khakurel, Jayden and Ikonen, Jouni and Herala, Antti},
	title = {Code camps and hackathons in education - Literature review and lessons learned},
	year = {2019},
	journal = {Proceedings of the Annual Hawaii International Conference on System Sciences},
	volume = {2019-January},
	pages = {7750 - 7759},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85108289535&partnerID=40&md5=c7731bc9543695ef4fac9103af5d9f74},
	abstract = {Motivation: Code camps and hackathons been used in education for almost two decades. These approaches are usually intensive and for most times quite practical events for solving some real-world problems with various educational objectives. The objectives and structures of these events differ depending on the role of the event in curricula. Problem statement: Both code camps and hackathons been implemented in various ways, with varying success levels. As expected the implementation of the event varies considerably depending on the objectives set for the event, but that then leads to the difficulty and problem setting to understand what organizing of these events actually mean. For educational context, curricula have also its role in defining the targeted skills and competencies the events has to consider too. Approach: We applied a systematic literature review (SLR) to look at the various definitions and modes of these events. Whether it is called “code camp”, or “hackathon”, or anything else with the same basic meaning, we want to find out what skills and competencies these events emphasize, how they are used in Computer Science (CS) and Software Engineering (SE) education and what are the general structures of the actual arranged events. Contribution: It is aim of this SLR to i) identify various possible ways of implementing these intensive events, and ii) reflect the results to the lessons we have learned of almost two decades of various intensive code camps and hackathons we have been organizing building and participating into. Based on the results, we claim that there is tremendous potential of using these events in education and in the curriculum than how it has been applied so far. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Curricula; Education Computing; Software Engineering; Educational Context; Educational Objectives; General Structures; Literature Reviews; Problem Statement; Real-world Problem; Systematic Literature Review (slr); Engineering Education},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Wendt20197602,
	author = {Wendt, Kevin D.},
	title = {Audience and content areas of online software engineering education and training: A systematic review},
	year = {2019},
	journal = {Proceedings of the Annual Hawaii International Conference on System Sciences},
	volume = {2019-January},
	pages = {7602 - 7611},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85082876574&partnerID=40&md5=64ee1337430fa3341a9b3d1224b79bfa},
	abstract = {Online courses and instruction are a popular and rapidly expanding medium for learning. However, no holistic summary exists which classifies who or what is being taught and how online courses are being researched in the field of software engineering education and training (SEET). More important, prior research does not cover what gaps exist in the literature: which areas of SEET being ignored altogether in research. This paper reports the results of a systematic review of the existing literature for online SEET and provides analysis of the audiences and content areas being researched. Grounded in established guidelines for systematic reviews in software engineering, the studies that are identified are then coded using three standards for software engineering education content areas. As a result of the systematic review, more than 9000 search results were analyzed. Inclusion and exclusion of studies in predetermined stages resulted in more than 30 studies being coded for audience and/or software engineering content areas. The result is a comprehensive picture of the current state of research in online SEET and an identification of the gaps to be addressed. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Engineering Education; Software Engineering; Inclusion And Exclusions; On-line Softwares; Online Course; Software Engineering Content; State Of Research; Systematic Review; E-learning},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Vázquez-Ingelmo2019109673,
	author = {Vázquez-Ingelmo, Andrea and García-Peñalvo, Francisco José and Therón, Roberto},
	title = {Information Dashboards and Tailoring Capabilities-A Systematic Literature Review},
	year = {2019},
	journal = {IEEE Access},
	volume = {7},
	pages = {109673 - 109688},
	doi = {10.1109/ACCESS.2019.2933472},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074649617&doi=10.1109%2FACCESS.2019.2933472&partnerID=40&md5=4c7e967cfc67e727544233356f3ed68c},
	abstract = {The design and development of information dashboards are not trivial. Several factors must be accounted; from the data to be displayed to the audience that will use the dashboard. However, the increase in popularity of these tools has extended their use in several and very different contexts among very different user profiles. This popularization has increased the necessity of building tailored displays focused on specific requirements, goals, user roles, situations, domains, etc. Requirements are more sophisticated and varying; thus, dashboards need to match them to enhance knowledge generation and support more complex decision-making processes. This sophistication has led to the proposal of new approaches to address personal requirements and foster individualization regarding dashboards without involving high quantities of resources and long development processes. The goal of this work is to present a systematic review of the literature to analyze and classify the existing dashboard solutions that support tailoring capabilities and the methodologies used to achieve them. The methodology follows the guidelines proposed by Kitchenham and other authors in the field of software engineering. As results, 23 papers about tailored dashboards were retrieved. Three main approaches were identified regarding tailored solutions: customization, personalization, and adaptation. However, there is a wide variety of employed paradigms and features to develop tailored dashboards. The present systematic literature review analyzes challenges and issues regarding the existing solutions. It also identifies new research paths to enhance tailoring capabilities and thus, to improve user experience and insight delivery when it comes to visual analysis. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Adaptive; Custom; Information Dashboards; Personalized; Slr; Systematic Literature Review; Tailoring; Decision Making; Software Engineering; Complex Decision; Design And Development; Development Process; Knowledge Generations; Personalizations; Systematic Literature Review; Systematic Review; Tailored Solutions; User Experience},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@CONFERENCE{Schettino2019558,
	author = {Schettino, Vinicius J. and Araújo, Marco Antônio Pereira and David, José Maria N. and Braga, Regina Maria Maciel},
	title = {Towards code reviewer recommendation: A systematic review and mapping of the literature},
	year = {2019},
	pages = {558 - 571},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85068469136&partnerID=40&md5=5e5d27e92cd6a3cae3958bcc605b5d1d},
	abstract = {(Context) Code review is a well-established practice for early detecting and reducing software defects. Researchers have shown that reviewer reputation and experience applied on the evolving component are important factors for review efficiency. In global software development, manual and human based methods for choosing a reviewer for a certain patch can be even more inefficient, due the developer’s lack of knowledge about their teammate’s expertise and physical contact with their peers. (Objective) This paper aims to present a review of Information Technology (IT) based tools and methods for code reviewer recommendation, with emphasis on application contexts, input data and empirical validations. (Method) To reach this goal, we conduct a systematic mapping and review compliant with existing evidence-based Software Engineering literature. (Results) Our results show that many authors seek real and open source datasets to validate their work, especially from GitHub. Also, previous works propose development and revision expertise and social relationships as inputs for recommendation methods, evaluating them with metrics such as Top-k and review activeness. (Conclusion) We classified these methods and conclude that new research should consider focusing on open/real datasets, and propose new validation approaches and method inputs especially for global software development. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Code Review; Code Reviewer Recommendation; Global Software Development; Codes (symbols); Mapping; Open Source Software; Application Contexts; Code Review; Code Reviewer Recommendation; Empirical Validation; Evidence Based Software Engineering; Global Software Development; Recommendation Methods; Social Relationships; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{2019,
	title = {31st International Conference on Advanced Information Systems Engineering, CAiSE 2019},
	year = {2019},
	journal = {Lecture Notes in Business Information Processing},
	volume = {349},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85066818374&partnerID=40&md5=d978d31281ec4d6a87ec19ccab0b64b3},
	abstract = {The proceedings contain 83 papers. The special focus in this conference is on Advanced Information Systems Engineering. The topics include: Predictive maintenance in a digital factory shop-floor: Data mining on historical and operational data coming from manufacturers’ information systems; information extraction for additive manufacturing using news data; a fog computing approach for predictive maintenance; Blockchain usage for government-issued electronic IDs: A survey; smart contracts and void declarations of intent; blockchain-based application security risks: A systematic literature review; data management: Relational vs blockchain databases; a generic framework for flexible and data-aware business process engines; building information systems using collaborative-filtering recommendation techniques; a case study of executive functions in real process modeling sessions; the subjective cost of writing reusable code: The case of functions; Climb your way to the model: Teaching UML to software engineering students: Teaching case; a new method for manufacturing process autonomous planning in intelligent manufacturing system; design of meshing assembly algorithms for industrial gears based on image recognition; detecting anomalous behavior towards predictive maintenance; data analytics towards predictive maintenance for industrial ovens: A case study based on data analysis of various sensors data; A RAMI 4.0 view of predictive maintenance: Software architecture, platform and case study in steel industry. © 2019 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Zambrano2019985,
	author = {Zambrano, Erick and Reyes Ch., Rolando P. and Castro, John W. and Fonseca C, Efraín R.},
	title = {Metrics that could be used in mobile applications development for people with visual impairments: A preliminary literature review; Métricas que podrían usarse en el desarrollo de aplicaciones móviles para personas con deficiencias visuales: Una revisión de literatura preliminar},
	year = {2019},
	journal = {RISTI - Revista Iberica de Sistemas e Tecnologias de Informacao},
	number = {E17},
	pages = {985 - 999},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061193655&partnerID=40&md5=c9b309c43b99813bb1a426b0e83d2504},
	abstract = {Background: The widespread use of mobile devices has motivated the parallel development of countless mobile applications (apps), whose characteristics benefit most people. However, there are segments of people with visual impairments (PVI) who have been marginalized due to usability and accessibility issues. Aim: To identify primary studies which report metrics of usability, accessibility or both, applicable to the development and assessing of mobile systems, including requirements of PVI. Method: A Preliminary Literature Review (PLR) was done based on the guidelines of a Systematic Literature Review (SLR). Results: 6 primary studies reported 73 metrics for apps, which were grouped into 8 usability contexts: visual content, effectiveness, navigability, efficiency, learnability, satisfaction, understandability and accessibility. Conclusions: The most relevant contexts are Visual content, effectiveness, navigability, understandability, and accessibility; of which, the first three group the highest number of usability metrics. © 2019 Elsevier B.V., All rights reserved.},
	author_keywords = {Accessibility; Literature Review; Metrics; Software Engineering; Usability},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Razzaq2019,
	author = {Razzaq, Abdul and Wasala, Asanka and Exton, Chris and Buckley, Jim P.},
	title = {The state of empirical evaluation in static feature location},
	year = {2019},
	journal = {ACM Transactions on Software Engineering and Methodology},
	volume = {28},
	number = {1},
	pages = {},
	doi = {10.1145/3280988},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85060890866&doi=10.1145%2F3280988&partnerID=40&md5=735f199fea192059e2a520d00ae5d503},
	abstract = {Feature location (FL) is the task of finding the source code that implements a specific, user-observable functionality in a software system. It plays a key role in many software maintenance tasks and a wide variety of Feature Location Techniques (FLTs), which rely on source code structure or textual analysis, have been proposed by researchers. As FLTs evolve and more novel FLTs are introduced, it is important to perform comparison studies to investigate “Which are the best FLTs?” However, an initial reading of the literature suggests that performing such comparisons would be an arduous process, based on the large number of techniques to be compared, the heterogeneous nature of the empirical designs, and the lack of transparency in the literature. This article presents a systematic review of 170 FLT articles, published between the years 2000 and 2015. Results of the systematic review indicate that 95% of the articles studied are directed towards novelty, in that they propose a novel FLT. Sixty-nine percent of these novel FLTs are evaluated through standard empirical methods but, of those, only 9% use baseline technique(s) in their evaluations to allow cross comparison with other techniques. The heterogeneity of empirical evaluation is also clearly apparent: altogether, over 60 different FLT evaluation metrics are used across the 170 articles, 272 subject systems have been used, and 235 different benchmarks employed. The review also identifies numerous user input formats as contributing to the heterogeneity. Analysis of the existing research also suggests that only 27% of the FLTs presented might be reproduced from the published material. These findings suggest that comparison across the existing body of FLT evaluations is very difficult. We conclude by providing guidelines for empirical evaluation of FLTs that may ultimately help to standardise empirical research in the field, cognisant of FLTs with different goals, leveraging common practices in existing empirical evaluations and allied with rationalisations. This is seen as a step towards standardising evaluation in the field, thus facilitating comparison across FLTs. © 2019 Elsevier B.V., All rights reserved.},
	author_keywords = {And Phrases: Feature Location; Bug Location; Concept Location; Requirement Traceability; Computer Software; Software Engineering; Concept Locations; Empirical Evaluations; Empirical Research; Evaluation Metrics; Feature Location; Requirement Traceabilitys; Software-maintenance Tasks; Systematic Review; Location},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Brings2018,
	author = {Brings, Jennifer and Daun, Marian and Brinckmann, Sarah and Keller, Kevin and Weyer, Thorsten},
	title = {Approaches, success factors, and barriers for technology transfer in software engineering—Results of a systematic literature review},
	year = {2018},
	journal = {Journal of Software: Evolution and Process},
	volume = {30},
	number = {11},
	pages = {},
	doi = {10.1002/smr.1981},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056447075&doi=10.1002%2Fsmr.1981&partnerID=40&md5=13f322381b917703eceef7a60b979427},
	abstract = {Introduction: Technology transfer aims at supporting the transfer of results from software engineering research from academia to industrial application. Objective: This paper reports on the current state of technology transfer in software engineering. Method: We conducted a systematic literature review, in which we investigated 3070 papers. We identified in total 70 relevant papers, which were subject of a detailed analysis. Results: Many different approaches are proposed to foster technology transfer in software engineering. The majority of these approaches suggest direct collaboration between industry and academia or teaching new technologies in industrial training or university education. In addition, a considerable number of experience reports on technology transfer exist. Hence, a multitude of best practices, success stories, and lessons learned is reported. Among others, empirical evidence, maturity, and adaptability of the technology seem important preconditions for successful transfer, while social and organizational factors seem important barriers to successful technology transfer. Conclusion: Our findings can aid software engineering researchers in determining how best to support the transfer of their research results into practice. Furthermore, analysis of the literature also revealed that no reports exist on the combination of various technology transfer approaches, which could increase advantages of existing approaches while reducing their disadvantages. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Software Engineering; Systematic Literature Review; Technology Transfer; Application Programs; Engineering Education; Industrial Research; Software Engineering; Technology Transfer; Barriers For Technology Transfer; Experience Report; Industrial Training; New Technologies; Research Results; Social And Organizational Factors; Systematic Literature Review; University Education; Engineering Research},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Wang2018,
	author = {Wang, Junjie and Wang, Song and Wang, Qing},
	title = {Is there a "golden" feature set for static warning identification?: An experimental evaluation},
	year = {2018},
	journal = {International Symposium on Empirical Software Engineering and Measurement},
	pages = {},
	doi = {10.1145/3239235.3239523},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061476354&doi=10.1145%2F3239235.3239523&partnerID=40&md5=0d579872fe8f0c88bdbd7c135bcd24e0},
	abstract = {Background: The most important challenge regarding the use of static analysis tools (e.g., FindBugs) is that there are a large number of warnings that are not acted on by developers. Many features have been proposed to build classification models for the automatic identification of actionable warnings. Through analyzing these features and related studies, we observe several limitations that make the users lack practical guides to apply these features. Aims: This work aims at conducting a systematic experimental evaluation of all the public available features, and exploring whether there is a golden feature set for actionable warning identification. Method: We first conduct a systematic literature review to collect all public available features for warning identification. We employ 12 projects with totally 60 revisions as our subject projects. We then implement a tool to extract the values of all features for each project revision to prepare the experimental data. Results: Experimental evaluation on 116 collected features demonstrates that there is a common set of features (23 features) which take effect in warning identification for most project revisions. These features can achieve satisfied performance with far less time cost for warning identification. Conclusions: These commonly-selected features can be treated as the golden feature set for identifying actionable warnings. This finding can serve as a practical guideline for facilitating real-world warning identification. © 2019 Elsevier B.V., All rights reserved.},
	author_keywords = {Actionable Warning Identification; Experimental Evaluation; Static Analysis; Automation; Software Engineering; Automatic Identification; Classification Models; Experimental Evaluation; Feature Sets; Practical Guide; Practical Guidelines; Real-world; Systematic Literature Review; Static Analysis},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Hujainah201885,
	author = {Hujainah, Fadhl and Abu Bakar, Rohani Binti and Al-Haimi, Basheer and Abdulhak, Mansoor},
	title = {Stakeholder quantification and prioritisation research: A systematic literature review},
	year = {2018},
	journal = {Information and Software Technology},
	volume = {102},
	pages = {85 - 99},
	doi = {10.1016/j.infsof.2018.05.008},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048274925&doi=10.1016%2Fj.infsof.2018.05.008&partnerID=40&md5=84e6161360f461dd9b7b7dcb9842a09c},
	abstract = {Context: Stakeholder quantification and prioritisation (SQP) is executed to quantify and prioritise stakeholders of the system based on their impacts. Selecting and involving the appropriate stakeholders are considered one of the major factors for producing a successful system. Objective: The objectives of this paper is to provide precise investigation regarding the SQP domain with respect to its impact on prioritising requirements, identifying SQP attributes, critically investigating the existing techniques, and presenting the challenges and recommended future works. Method: The systematic literature review (SLR) guidelines proposed by Kitchenham are adopted to guide the review process. The identified related studies underwent a rigorous study selection process. Thus, 31 out of 210 identified studies were selected as primary studies to address adequately the formulated research questions. Results: Findings demonstrate that SQP is a crucial process in requirement prioritisation (RP) because of its ability to identify stakeholders’ impact on the systems requirements that lead to the production of a correctly prioritised list of requirements. Seventeen SQP attributes are revealed along with their description, usage impact, and degree of importance. Furthermore, nine techniques that focus on quantification and prioritisation of the stakeholders are identified and critically analysed in terms of their description, SQP process involved, SQP attributes used, types, and limitations. The findings reveal that these techniques face some challenges with respect to the lack of low-level implementation details, lack of automation and intelligence level, and heavy reliance on the involvement of experts. Conclusion: SQP has been extensively discussed in stakeholder analysis and requirement prioritisation domains. Based on the findings, a new intelligent solution is suggested to minimise the need for expert participation in conducting the SQP process along with proposing measurement criteria for the attributes used to evaluate the stakeholders. The deficiency of research works regarding the selection of SQP techniques is also observed. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Stakeholders Prioritisation; Stakeholders Quantification; Systematic Review; Information Systems; Intelligent Solutions; Stakeholder Analysis; Stakeholders Prioritisation; Stakeholders Quantification; Systematic Literature Review; Systematic Literature Review (slr); Systematic Review; Systems Requirements; Software Engineering},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Uzun201830,
	author = {Uzun, Burak and Tekinerdogan, Bedir},
	title = {Model-driven architecture based testing: A systematic literature review},
	year = {2018},
	journal = {Information and Software Technology},
	volume = {102},
	pages = {30 - 48},
	doi = {10.1016/j.infsof.2018.05.004},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85047880795&doi=10.1016%2Fj.infsof.2018.05.004&partnerID=40&md5=8093f2e693ebf65a822fe6671ef162b3},
	abstract = {Context: Model-driven architecture based testing (MDABT) adopts architectural models of a system under test and/or its environment to derive test artifacts. In the literature, different MDABT approaches have been provided together with the corresponding lessons results and lessons learned. Objective: The overall objective of this paper is to identify the published concerns for applying MDABT, identify the proposed solutions, and describe the current research directions for MDABT. Method: To this end we have provided a systematic literature review (SLR) that is conducted by a multi-phase study selection process using the published literature in major software engineering journals and conference proceedings. Results: We reviewed 739 papers that are discovered using a well-planned review protocol, and 31 of them were assessed as primary studies related to our research questions. Based on the analysis of the data extraction process, we discuss the primary trends and approaches and present the identified obstacles. Conclusion: This study shows that although a generic process the approaches different in various ways with different goals, modeling abstractions and results. Further, based on the synthesis process in the SLR we can state that the potential of MDABT has not been fully exploited yet. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Model-based Testing; Software Architecture; Systematic Review; Model Checking; Software Architecture; Software Design; Architectural Models; Model Based Testing; Model Driven Architectures; Research Questions; Software Engineering Journals; Systematic Literature Review; Systematic Literature Review (slr); Systematic Review; Software Testing},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Shakeel201820,
	author = {Shakeel, Yusra and Krüger, Jacob and von Nostitz-Wallwitz, Ivonne and Lausberger, Christian and Durand, Gabriel Campero and Saake, Gunter and Leich, Thomas},
	title = {(Automated) Literature Analysis-Threats and Experiences},
	year = {2018},
	pages = {20 - 27},
	doi = {10.1145/3194747.3194748},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85053912955&doi=10.1145%2F3194747.3194748&partnerID=40&md5=b857206c75efc3bf73047ccddfd94c94},
	abstract = {The number of scientific publications is increasing each year, specifically in the field of computer science. In order to condense existing knowledge, evidence-based software engineering is concerned with systematic literature reviews, surveys, and other kinds of literature analysis. These methods are used to summarize the evidence on empirical studies-or approaches in general- A nd to identify gaps for new research opportunities. However, executing systematic review processes requires a considerable amount of time and effort. Consequently, researchers have proposed several semi-automated approaches to support and facilitate different steps of such methods. With our current research, we aim to assist researchers to efficiently and effectively execute different steps, namely the search for and selection of primary studies. In this paper, we report several issues we identified during our research that threaten any kind of literature analysis and hamper suitable tool support. We further recommend solutions to mitigate these threats. Overall, our goal is to raise researchers' and publishers' awareness regarding several potential threats on literature analysis, to support software engineers in designing suitable tools for research, and to encourage the research community to solve these threats. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Lessons Learned; Literature Analysis; Software Engineering; Systematic Literature Review; Threats To Validity; Software Engineering; Evidence Based Software Engineering; Lessons Learned; Literature Analysis; Research Communities; Research Opportunities; Scientific Publications; Systematic Literature Review; Threats To Validity; Automation},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Marques2018,
	author = {Marques, Maira R. and Robledo, Javier},
	title = {What Software Engineering "best Practices" are we Teaching Students - A Systematic Literature Review},
	year = {2018},
	journal = {Proceedings - Frontiers in Education Conference, FIE},
	volume = {2018-October},
	pages = {},
	doi = {10.1109/FIE.2018.8658576},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85063418986&doi=10.1109%2FFIE.2018.8658576&partnerID=40&md5=b5ae357e3d61ab6235c5e0ff07b94c5d},
	abstract = {This research presents that teaching software engineering can be a demanding challenge for instructors, considering that the software industry grows rapidly and there are new development technologies being released constantly. Some of the methodologies being used in industry with time are converted in 'best practices'. This systematic literature review (SLR) focuses on finding what are the software engineering best practices being taught to students in academia. It is expected to show with this SLR what are the best practices being taught and how, so other instructors and the teaching staff can evaluate what to choose and level up their courses to the extent of what is being used and is already tested. To perform this SLR, a well-known protocol was used with the search string: 'software engineering education' and 'best practices' (variations and synonyms of the words were also used), the search was performed in six well-known databases. It is surprising that the amount of primary studies found in this SLR was not what was expected, seventeen primary studies were identified. These studies mentioned a total of seventy best practices that are being used in academia to teach software engineering, some of them are mentioned in more than one paper. But the granularity of the primary studies was quite different some of the best practices are really software engineering best practices and others are instructional best practices. It was also evaluated how the use of these practices was validated and reported, and the results are very diverse, some of them did not have a validation, others have qualitative data, and a few qualitative and quantitative data. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Engineering Education; Engineering Research; Students; Best Practices; Development Technology; Engineering Best Practice; Practice Variations; Qualitative Data; Software Engineering Education; Software Industry; Systematic Literature Review; Teaching Software; Teaching Staff; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Rodriguez-Perez2018164,
	author = {Rodriguez-Perez, Gema and Robles, Gregorio and Gonzalez-Barahona, Jesus M.},
	title = {Reproducibility and credibility in empirical software engineering: A case study based on a systematic literature review of the use of the SZZ algorithm},
	year = {2018},
	journal = {Information and Software Technology},
	volume = {99},
	pages = {164 - 176},
	doi = {10.1016/j.infsof.2018.03.009},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85044280730&doi=10.1016%2Fj.infsof.2018.03.009&partnerID=40&md5=ae819c7a046c57dcf52e95fe5cabf212},
	abstract = {Context: Reproducibility of Empirical Software Engineering (ESE) studies is an essential part for improving their credibility, as it offers the opportunity to the research community to verify, evaluate and improve their research outcomes. Objective: We aim to study reproducibility and credibility in ESE with a case study, by investigating how they have been addressed in studies where SZZ, a widely-used algorithm by Śliwerski, Zimmermann and Zeller to detect the origin of a bug, has been applied. Methodology: We have performed a systematic literature review to evaluate publications that use SZZ. In total, 187 papers have been analyzed for reproducibility, reporting of limitations and use of improved versions of the algorithm. Results: We have found a situation with a lot of room for improvement in ESE as reproducibility is not commonly found; factors that undermine the credibility of results are common. We offer some lessons learned and guidelines for researchers and reviewers to address this problem. Conclusion: Reproducibility and other related aspects that ensure a high quality scientific process should be taken more into consideration by the ESE community in order to increase the credibility of the research results. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Credibility; Reproducibility; Systematic Literature Review; Szz Algorithm; Information Systems; Credibility; Empirical Software Engineering; High Quality; Reproducibilities; Research Communities; Research Outcome; Research Results; Systematic Literature Review; Software Engineering},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ali2018133,
	author = {Ali, Nauman Bin and Usman, Muhammad},
	title = {Reliability of search in systematic reviews: Towards a quality assessment framework for the automated-search strategy},
	year = {2018},
	journal = {Information and Software Technology},
	volume = {99},
	pages = {133 - 147},
	doi = {10.1016/j.infsof.2018.02.002},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85042009714&doi=10.1016%2Fj.infsof.2018.02.002&partnerID=40&md5=24eb95a99c0f8429cd9519566b9b3709},
	abstract = {Context: The trust in systematic literature reviews (SLRs) to provide credible recommendations is critical for establishing evidence-based software engineering (EBSE) practice. The reliability of SLR as a method is not a given and largely depends on the rigor of the attempt to identify, appraise and aggregate evidence. Previous research, by comparing SLRs on the same topic, has identified search as one of the reasons for discrepancies in the included primary studies. This affects the reliability of an SLR, as the papers identified and included in it are likely to influence its conclusions. Objective: We aim to propose a comprehensive evaluation checklist to assess the reliability of an automated-search strategy used in an SLR. Method: Using a literature review, we identified guidelines for designing and reporting automated-search as a primary search strategy. Using the aggregated design, reporting and evaluation guidelines, we formulated a comprehensive evaluation checklist. The value of this checklist was demonstrated by assessing the reliability of search in 27 recent SLRs. Results: Using the proposed evaluation checklist, several additional issues (not captured by the current evaluation checklist) related to the reliability of search in recent SLRs were identified. These issues severely limit the coverage of literature by the search and also the possibility to replicate it. Conclusion: Instead of solely relying on expensive replications to assess the reliability of SLRs, this work provides means to objectively assess the likely reliability of a search-strategy used in an SLR. It highlights the often-assumed aspect of repeatability of search when using automated-search. Furthermore, by explicitly considering repeatability and consistency as sub-characteristics of a reliable search, it provides a more comprehensive evaluation checklist than the ones currently used in EBSE. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Credibility; Guidelines; Reliability; Search Strategies; Secondary Studies; Systematic Literature Reviews; Automation; Software Engineering; Credibility; Guidelines; Search Strategies; Secondary Studies; Systematic Literature Review; Reliability},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Shakeel201820,
	author = {Shakeel, Yusra and Krüger, Jacob and von Nostitz-Wallwitz, Ivonne and Lausberger, Christian and Durand, Gabriel Campero and Saake, Gunter and Leich, Thomas},
	title = {(Automated) literature analysis: Threats and experiences},
	year = {2018},
	journal = {Proceedings - International Conference on Software Engineering},
	pages = {20 - 27},
	doi = {10.1145/3194747.3194748},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054617966&doi=10.1145%2F3194747.3194748&partnerID=40&md5=e7f540bce0f6c98d7588cdf5e3c3d864},
	abstract = {The number of scientific publications is increasing each year, specifically in the field of computer science. In order to condense existing knowledge, evidence-based software engineering is concerned with systematic literature reviews, surveys, and other kinds of literature analysis. These methods are used to summarize the evidence on empirical studies - or approaches in general - and to identify gaps for new research opportunities. However, executing systematic review processes requires a considerable amount of time and effort. Consequently, researchers have proposed several semi-automated approaches to support and facilitate different steps of such methods. With our current research, we aim to assist researchers to efficiently and effectively execute different steps, namely the search for and selection of primary studies. In this paper, we report several issues we identified during our research that threaten any kind of literature analysis and hamper suitable tool support. We further recommend solutions to mitigate these threats. Overall, our goal is to raise researchers' and publishers' awareness regarding several potential threats on literature analysis, to support software engineers in designing suitable tools for research, and to encourage the research community to solve these threats. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Lessons Learned; Literature Analysis; Software Engineering; Systematic Literature Review; Threats To Validity; Automation; Evidence Based Software Engineering; Lessons Learned; Literature Analysis; Research Communities; Research Opportunities; Scientific Publications; Systematic Literature Review; Threats To Validity; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ribeiro20181594,
	author = {Ribeiro, Talita Vieira and Massollar, Jobson L. and Travassos, Guilherme Horta},
	title = {Challenges and pitfalls on surveying evidence in the software engineering technical literature: an exploratory study with novices},
	year = {2018},
	journal = {Empirical Software Engineering},
	volume = {23},
	number = {3},
	pages = {1594 - 1663},
	doi = {10.1007/s10664-017-9556-7},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85032506315&doi=10.1007%2Fs10664-017-9556-7&partnerID=40&md5=14369cbf300d6df8a390afc245a4a152},
	abstract = {The evidence-based software engineering approach advocates the use of evidence from empirical studies to support the decisions on the adoption of software technologies by practitioners in the software industry. To this end, many guidelines have been proposed to contribute to the execution and repeatability of literature reviews, and to the confidence of their results, especially regarding systematic literature reviews (SLR). To investigate similarities and differences, and to characterize the challenges and pitfalls of the planning and generated results of SLR research protocols dealing with the same research question and performed by similar teams of novice researchers in the context of the software engineering field. We qualitatively compared (using Jaccard and Kappa coefficients) and evaluated (using DARE) same goal SLR research protocols and outcomes undertaken by similar research teams. Seven similar SLR protocols regarding quality attributes for use cases executed in 2010 and 2012 enabled us to observe unexpected differences in their planning and execution. Even when the participants reached some agreement in the planning, the outcomes were different. The research protocols and reports allowed us to observe six challenges contributing to the divergences in the results: researchers’ inexperience in the topic, researchers’ inexperience in the method, lack of clearness and completeness of the papers, lack of a common terminology regarding the problem domain, lack of research verification procedures, and lack of commitment to the SLR. According to our findings, it is not possible to rely on results of SLRs performed by novices. Also, similarities at a starting or intermediate step during different SLR executions may not directly translate to the next steps, since non-explicit information might entail differences in the outcomes, hampering the repeatability and confidence of the SLR process and results. Although we do have expectations that the presence and follow-up of a senior researcher can contribute to increasing SLRs’ repeatability, this conclusion can only be drawn upon the existence of additional studies on this topic. Yet, systematic planning, transparency of decisions and verification procedures are key factors to guarantee the reliability of SLRs. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Evidence-based Software Engineering; Exploratory Study; Novice Researchers; Systematic Literature Review; Computer Software; Evidence Based Software Engineering; Explicit Information; Exploratory Studies; Novice Researchers; Planning And Execution; Systematic Literature Review; Systematic Literature Review (slr); Technical Literature; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Becker201885,
	author = {Becker, Christoph and Chitchyan, Ruzanna and Betz, Stefanie and McCord, Curtis W.},
	title = {Trade-off decisions across time in technical debt management: A systematic literature review},
	year = {2018},
	journal = {Proceedings - International Conference on Software Engineering},
	pages = {85 - 94},
	doi = {10.1145/3194164.3194171},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051561300&doi=10.1145%2F3194164.3194171&partnerID=40&md5=3547598bd48dbdd919d3ea7a5b554cd0},
	abstract = {Technical Debt arises from decisions that favour short-term outcomes at the cost of longer-term disadvantages. They may be taken knowingly or based on missing or incomplete awareness of the costs; they are taken in different roles, situations, stages and ways. Whatever technical or business factor motivate such decisions, they always imply a trade-off in time, a 'now vs. later'. How exactly are such decisions made, and how have they been studied? This paper analyzes how decisions on technical debt are studied in software engineering via a systematic literature review. It examines the presently published Software Engineering research on Technical Debt, with a particular focus on decisions involving time. The findings reveal surprising gaps in published work on empirical research in decision making. We observe that research has rarely studied how decisions are made, even in papers that focus on the decision process. Instead, most attention is focused on engineering measures and feeding them into an idealized decision making process. These findings lead to a set of recommendations for future empirical research on Technical Debt. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Behavioral Software Engineering; Decision Making; Intertemporal Choice; Naturalistic; Rationalistic; Technical Debt; Time; Economic And Social Effects; Engineering Research; Software Engineering; Inter-temporal Choices; Naturalistic; Rationalistic; Technical Debts; Time; Decision Making},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{2018,
	title = {Proceedings - International Conference on Software Engineering},
	year = {2018},
	journal = {Proceedings - International Conference on Software Engineering},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051483128&partnerID=40&md5=e7e764aa0aa554491e02982af3c75b9e},
	abstract = {The proceedings contain 22 papers. The topics discussed include: an exploratory study on the influence of developers in technical debt; architectural technical debt identification: the research landscape; technical debt as an external software attribute; introducing Debtgrep: a tool for fighting technical debt in base station software; AnaConDebt: a tool to assess and track technical debt; cognitive complexity - an overview and evaluation; the past, present and future of technical debt: learning from the past to prepare for the future; the developer's dilemma: factors affecting the decision to repay code debt; from lasagna to spaghetti: a decision model to manage defect debt; a proposed sizing model for managing 3rd party code technical debt; governing technology debt: beyond technical debt; trade-off decisions across time in technical debt management: a systematic literature review; design debt prioritization: a design best practice-based approach; technical debt cripples software developer productivity: a longitudinal study on developers' daily software development work; a framework for managing interest in technical debt: an industrial validation; limiting technical debt with maintainability assurance - an industry survey on used techniques and differences with service- and microservice-based systems; and a position study to investigate technical debt associated with security weaknesses. © 2018 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Velasquez201827,
	author = {Velasquez, Ignacio and Caro, Angélica and Rodríguez, Alfonso},
	title = {Kontun: A Framework for recommendation of authentication schemes and methods},
	year = {2018},
	journal = {Information and Software Technology},
	volume = {96},
	pages = {27 - 37},
	doi = {10.1016/j.infsof.2017.11.004},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85034589244&doi=10.1016%2Fj.infsof.2017.11.004&partnerID=40&md5=68f5f9daa24dcbd11ff0d30e48d4e6ba},
	abstract = {Context: There are many techniques for performing authentication, such as text passwords and biometrics. Combining two factors into one technique is known as multi-factor authentication. The lack of a proper method for comparing and selecting these techniques for their implementation in software development processes is observed. Objective: The article presents a recommendation Framework proposal for comparing and selecting authentication techniques in a software development process. Method: Knowledge from academy is obtained through a systematic literature review and experience from industry is gathered using a survey and interviews. The results of these two techniques are used to generate a Framework proposal, which is validated afterwards, through an expert panel and the case study method. Results: A recommendation Framework is generated, which recommends the most appropriate authentication schemes and methods for software applications based on criteria identified in literature and industry, categorized by usability, security and costs, plus the context for which the application is intended. The Framework's validity is ascertained by confirming that its recommendations are on line with those on industry, based in the results from the developed case studies. A tool prototype was created in order to help using the Framework in software development processes. Conclusion: The proposed Framework helps to cover the observed gap in literature, helping software developers to compare and select the most appropriate authentication techniques for their applications. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Authentication Scheme; Multi-factor Authentication Method; Recommendation Framework; Security; Application Programs; Authentication; Network Function Virtualization; Software Design; Software Engineering; Software Prototyping; Authentication Scheme; Authentication Techniques; Multi-factor Authentication; Recommendation Framework; Security; Software Applications; Software Development Process; Systematic Literature Review; Recommender Systems},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Budgen201862,
	author = {Budgen, David and Brereton, Pearl and Drummond, Sarah and Williams, Nikki},
	title = {Reporting systematic reviews: Some lessons from a tertiary study},
	year = {2018},
	journal = {Information and Software Technology},
	volume = {95},
	pages = {62 - 74},
	doi = {10.1016/j.infsof.2017.10.017},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85032943825&doi=10.1016%2Fj.infsof.2017.10.017&partnerID=40&md5=e39ee7d805956b4097c8876a44ea98b3},
	abstract = {Context: Many of the systematic reviews published in software engineering are related to research or methodological issues and hence are unlikely to be of direct benefit to practitioners or teachers. Those that are relevant to practice and teaching need to be presented in a form that makes their findings usable with minimum interpretation. Objective: We have examined a sample of the many systematic reviews that have been published over a period of six years, in order to assess how well these are reported and identify useful lessons about how this might be done. Method: We undertook a tertiary study, performing a systematic review of systematic reviews. Our study found 178 systematic reviews published in a set of major software engineering journals over the period 2010–2015. Of these, 37 provided recommendations or conclusions of relevance to education and/or practice and we used the DARE criteria as well as other attributes related to the systematic review process to analyse how well they were reported. Results: We have derived a set of 12 ‘lessons’ that could help authors with reporting the outcomes of a systematic review in software engineering. We also provide an associated checklist for use by journal and conference referees. Conclusion: There are several areas where better reporting is needed, including quality assessment, synthesis, and the procedures followed by the reviewers. Researchers, practitioners, teachers and journal referees would all benefit from better reporting of systematic reviews, both for clarity and also for establishing the provenance of any findings. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Provenance Of Findings; Reporting Quality; Systematic Review; Software Engineering; Provenance Of Findings; Quality Assessment; Software Engineering Journals; Systematic Review; Tertiary Study; Teaching},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Heck2018127,
	author = {Heck, Petra and Zaidman, Andy},
	title = {A systematic literature review on quality criteria for agile requirements specifications},
	year = {2018},
	journal = {Software Quality Journal},
	volume = {26},
	number = {1},
	pages = {127 - 160},
	doi = {10.1007/s11219-016-9336-4},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84988362877&doi=10.1007%2Fs11219-016-9336-4&partnerID=40&md5=e29ba1b6ed7c7199fb6b3e24da8befd0},
	abstract = {The quality of requirements is typically considered as an important factor for the quality of the end product. For traditional up-front requirements specifications, a number of standards have been defined on what constitutes good quality : Requirements should be complete, unambiguous, specific, time-bounded, consistent, etc. For agile requirements specifications, no new standards have been defined yet, and it is not clear yet whether traditional quality criteria still apply. To investigate what quality criteria for assessing the correctness of written agile requirements exist, we have conducted a systematic literature review. The review resulted in a list of 16 selected papers on this topic. These selected papers describe 28 different quality criteria for agile requirements specifications. We categorize and analyze these criteria and compare them with those from traditional requirements engineering. We discuss findings from the 16 papers in the form of recommendations for practitioners on quality assessment of agile requirements. At the same time, we indicate the open points in the form of a research agenda for researchers working on this topic. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile Requirement; Correctness; Just-in-time; Quality Assessment; Quality Criteria; Systematic Literature Review; Computer Software; Software Engineering; Agile Requirements; Correctness; Just In Time; Quality Assessment; Quality Criteria; Systematic Literature Review; Specifications},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ambreen201863,
	author = {Ambreen, Talat and Ikram, Naveed and Usman, Muhammad and Niazi, Mahmood K.},
	title = {Empirical research in requirements engineering: trends and opportunities},
	year = {2018},
	journal = {Requirements Engineering},
	volume = {23},
	number = {1},
	pages = {63 - 95},
	doi = {10.1007/s00766-016-0258-2},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84979998441&doi=10.1007%2Fs00766-016-0258-2&partnerID=40&md5=9d7639c8d9e4e0304a5cc8316863f4b8},
	abstract = {Requirements engineering (RE) being a foundation of software development has gained a great recognition in the recent era of prevailing software industry. A number of journals and conferences have published a great amount of RE research in terms of various tools, techniques, methods, and frameworks, with a variety of processes applicable in different software development domains. The plethora of empirical RE research needs to be synthesized to identify trends and future research directions. To represent a state-of-the-art of requirements engineering, along with various trends and opportunities of empirical RE research, we conducted a systematic mapping study to synthesize the empirical work done in RE. We used four major databases IEEE, ScienceDirect, SpringerLink and ACM and Identified 270 primary studies till the year 2012. An analysis of the data extracted from primary studies shows that the empirical research work in RE is on the increase since the year 2000. The requirements elicitation with 22 % of the total studies, requirements analysis with 19 % and RE process with 17 % are the major focus areas of empirical RE research. Non-functional requirements were found to be the most researched emerging area. The empirical work in the sub-area of requirements validation and verification is little and has a decreasing trend. The majority of the studies (50 %) used a case study research method followed by experiments (28 %), whereas the experience reports are few (6 %). A common trend in almost all RE sub-areas is about proposing new interventions. The leading intervention types are guidelines, techniques and processes. The interest in RE empirical research is on the rise as whole. However, requirements validation and verification area, despite its recognized importance, lacks empirical research at present. Furthermore, requirements evolution and privacy requirements also have little empirical research. These RE sub-areas need the attention of researchers for more empirical research. At present, the focus of empirical RE research is more about proposing new interventions. In future, there is a need to replicate existing studies as well to evaluate the RE interventions in more real contexts and scenarios. The practitioners’ involvement in RE empirical research needs to be increased so that they share their experiences of using different RE interventions and also inform us about the current requirements-related challenges and issues that they face in their work. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Evidence-based Software Engineering; Mapping Study; Requirements Engineering; Systematic Review; Computer Supported Cooperative Work; Mapping; Requirements Engineering; Software Design; Software Engineering; Evidence Based Software Engineering; Future Research Directions; Mapping Studies; Non-functional Requirements; Requirements Elicitation; Requirements Validation; Systematic Mapping Studies; Systematic Review; Engineering Research},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{2018,
	title = {Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE},
	year = {2018},
	journal = {Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE},
	volume = {2018-July},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056863091&partnerID=40&md5=5ad1379fb95a9123e0659fe0f3a6e64d},
	abstract = {The proceedings contain 122 papers. The topics discussed include: a new satellite constellation networking certification and reliable maintenance protocol; a novel hybrid collaborative filtering approach to recommendation using reviews: the product attribute perspective; towards business identification modeling: a Taobao case study; ontology-based software architectural pattern recognition and reasoning; object-oriented software modeling with ontologies around - a survey of existing approaches; methods for estimating agile software projects: a systematic review; investigating gaps on agile improvement solutions and their successful adoption in industry projects - a systematic literature review; towards cost effective privacy provision for typed resources in IoT environment; finding shilling attack in recommender system based on dynamic feature selection; and deep learning based information extraction framework on Chinese electronic health records. © 2018 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Hujainah201871497,
	author = {Hujainah, Fadhl and Abu Bakar, Rohani Binti and Abdulhak, Mansoor and Zamli, K. Z.},
	title = {Software Requirements Prioritisation: A Systematic Literature Review on Significance, Stakeholders, Techniques and Challenges},
	year = {2018},
	journal = {IEEE Access},
	volume = {6},
	pages = {71497 - 71523},
	doi = {10.1109/ACCESS.2018.2881755},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056718856&doi=10.1109%2FACCESS.2018.2881755&partnerID=40&md5=ea177f089ffe95c5d808ac6e307668f9},
	abstract = {As one of the gatekeepers of quality software systems, requirements' prioritization (RP) is often used to select the most important requirements as perceived by system stakeholders. To date, many RP techniques that adopt various approaches have been proposed in the literature. To identify the strengths, opportunities, and limitations of these existing approaches, this paper studied and analyzed the RP field in terms of its significance in the software development process based on the standard review guidelines by Kitchenham. By a rigorous study selection strategy, 122 relevant studies were selected to address the defined research questions. Findings indicated that RP plays a vital role in ensuring the development of a quality system with defined constraints. The stakeholders involved in RP were reported, and new categories of the participating stakeholders were proposed. Additionally, 108 RP techniques were identified and analyzed with respect to their benefits, prioritization criteria, size of requirements, types in terms of automation level, and their limitations; 84 prioritization criteria were disclosed with their frequency usages in prioritizing the requirements. The study revealed that the existing techniques suffer from serious limitations in terms of scalability, the lack of quantification, and the prioritization of the participating stakeholders, time consumption, requirement interdependences, and the need for highly professional human intervention. These findings are useful for researchers and practitioners in improving the current state of the art and state of practices. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Challenges; Requirements Prioritization; Requirements Prioritization Criteria; Stakeholders; Systematic Literature Review; Techniques; Bibliographies; Computer Software; Software Engineering; Challenges; Complexity Theory; Requirements Prioritisation; Software Systems; Stakeholders; Systematic Literature Review; Systematics; Techniques; Software Design},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Dar201863859,
	author = {Dar, Hafsa Shareef and Lali, M. Ikramullah and Ashraf, Humaira Z. and Ramzan, Muhammad Umer and Amjad, Tehmina and Shahzad, Basit},
	title = {A systematic study on software requirements elicitation techniques and its challenges in mobile application development},
	year = {2018},
	journal = {IEEE Access},
	volume = {6},
	pages = {63859 - 63867},
	doi = {10.1109/ACCESS.2018.2874981},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055714786&doi=10.1109%2FACCESS.2018.2874981&partnerID=40&md5=d3e538a41b34a2dc9b1cbc7cef82764b},
	abstract = {Software Requirements Engineering has paved its roots in both industry and academia, as today's complex systems are programmed to provide efficient user-centric functionalities. This also refers to the emergence of challenges in Requirements Elicitation techniques, approaches, and tools while performing them. Particularly, in the area of Requirements Engineering for software development, a number of techniques and approaches have been observed in literature but for mobile application development, which is different from the traditional software development, has not been discussed much in past studies. Short development cycle, device limitations, and less development time for mobile application development are some of the issues to which there is no 'silver bullet' available. Therefore, the Requirement Analysts are in dire need of defined guidelines for Requirement Elicitation in mobile application development. With this study, we aim to provide a detailed overview of Requirements Elicitation techniques and its challenges. We have conducted a systematic literature review by surveying 4507 initial and 36 primary studies. A comprehensive set of 22 elicitation techniques were measured based on quality assessment criteria, including time and cost factors, resource effectiveness, and domain understanding. Furthermore, the challenges in Requirements Elicitation were also grouped into eight different categories based on their applicability. Our study effectively contributes in highlighting Software Requirements Elicitation Techniques and its challenges in mobile application development. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Android Application; Requirement Elicitation; Requirement Gathering; Requirements Engineering; Software Development Life Cycle; Software Engineering; Application Programming Interfaces (api); Application Programs; Computer Software; Life Cycle; Mobile Computing; Requirements Engineering; Software Engineering; Android Applications; Guidelines; Mobile Applications; Mobile Communications; Requirement Elicitation; Requirement Gathering; Software Development Life Cycle; Stakeholders; Software Design},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access}
}

@ARTICLE{Tahir201857868,
	author = {Tahir, Touseef and Rasool, Ghulam and Mehmood, Waqar and Gencel, Cigdem},
	title = {An evaluation of software measurement processes in pakistani software industry},
	year = {2018},
	journal = {IEEE Access},
	volume = {6},
	pages = {57868 - 57896},
	doi = {10.1109/ACCESS.2018.2872956},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054620176&doi=10.1109%2FACCESS.2018.2872956&partnerID=40&md5=4dee6551c2112d7ee7338490e6535606},
	abstract = {Implementing a successful measurement process is a challenging task. Most measurement studies report measurement models, experiences, and lessons learned based on pilot projects or case studies in a limited scope to overcome specific challenges. This paper identifies 14 basic measurement practices and proposes a model of 18 success factors for implementing measurement processes with respect to the identified measurement theories in our systematic literature review (SLR), i.e., A systematic literature review on software measurement programs, by Tahir et al., 2016. In addition, a survey is conducted to evaluate the state of measurement practices and to validate the proposed model based on the feedback from 200 software professionals working in Pakistani software industry. The state of measurement practices in the industry is mostly not according to the identified measurement theories in the SLR. For instance, more than 50 measurement models reported in the literature but only 10% software organizations follow any measurement model. 75% of organizations do not follow any measurement standard. 80% software organizations do not use any measurement tool. The proposed model is validated by applying structural equation modeling on the survey data. Furthermore, among 18 success factors, it is statistically significant that Pakistani software professionals strongly believe in necessity of three factors for successful implementation of a measurement process, i.e., synchronization between measurement process and software process improvement, use of measurement standards, and use of measurement models. In addition, they also believe that a successful measurement process will improve prediction, monitoring and management of software projects, and support in achievement of individual and organization-wide objectives. Software organizations might consider this paper in planning and improving their measurement processes. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Software Measurement; Software Measurement Program; Software Measurement Survey; Software Metrics; Computer Aided Software Engineering; Surveys; Software Measurement; Software Measurement Process; Software Measurement Programs; Software Metrics; Software Process Improvement; Structural Equation Modeling; Systematic Literature Review; Systematic Literature Review (slr); Measurement Theory},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Accepted Open Access; Green Open Access}
}

@CONFERENCE{Sharp2018,
	author = {Sharp, Jason H. and Babb, Jeffry Stephen},
	title = {Is information systems late to the party? The current state of DevOps research in the association for information systems elibrary},
	year = {2018},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054288127&partnerID=40&md5=87a259cc32f8ead252448d3bb9bd864a},
	abstract = {With the recent growth and popularity of DevOps in industry, practitioner outlets, and publications within the areas of computer science and software engineering, the aim of this paper is to address the question, "Is Information Systems late to the party?" In hopes of shedding light on this question, the authors conducted a thorough and systematic review of the publications contained in the Association for Information Systems eLibrary to examine the current state of DevOps research within the area of Information Systems. By following guidelines established for conducting reviews of literature in Information Systems, the authors identified 42 papers containing the keyword DevOps or Devops. Further analysis of each paper revealed only six papers that directly addressed the topic of DevOps. The authors conclude that Information Systems needs to fully "join the party" and that DevOps represents a fertile ground for increased Information Systems research. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Devops; Devops Evolution; Devops Implementation; Devops Literature Review; Devops Teams; Information Use; Software Engineering; Devops; Devops Evolution; Devops Implementation; Devops Teams; Literature Reviews; Information Systems},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Correia2018133,
	author = {Correia, António and Schneider, Daniel S. and Fonseca, Benjamim L. and Paredes, Hugo},
	title = {Crowdsourcing and massively collaborative science: A systematic literature review and mapping study},
	year = {2018},
	journal = {Lecture Notes in Computer Science},
	volume = {11001 LNCS},
	pages = {133 - 154},
	doi = {10.1007/978-3-319-99504-5_11},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85053122480&doi=10.1007%2F978-3-319-99504-5_11&partnerID=40&md5=7396985bf9356d531f3316f28d5e539d},
	abstract = {Current times are denoting unprecedented indicators of scientific data production, and the involvement of the wider public (the crowd) on research has attracted increasing attention. Drawing on review of extant literature, this paper outlines some ways in which crowdsourcing and mass collaboration can leverage the design of intelligent systems to keep pace with the rapid transformation of scientific work. A systematic literature review was performed following the guidelines of evidence-based software engineering and a total of 148 papers were identified as primary after querying digital libraries. From our review, a lack of methodological frameworks and algorithms for enhancing interactive intelligent systems by combining machine and crowd intelligence is clearly manifested and we will need more technical support in the future. We lay out a vision for a cyberinfrastructure that comprises crowd behavior, task features, platform facilities, and integration of human inputs into AI systems. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Ai; Crowdsourcing; Distributed Scientific Collaboration; Human Computation; Human-machine Hybrid Computation; Massively Collaborative Science; Systematic Literature Review; Artificial Intelligence; Crowdsourcing; Digital Libraries; Distributed Computer Systems; Intelligent Systems; Software Engineering; Human Computation; Hybrid Computation; Massively Collaborative Science; Scientific Collaboration; Systematic Literature Review; Behavioral Research},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Khan2018156,
	author = {Khan, Muhammad Uzair and Iftikhar, Sidra and Iqbal, Muhamamd Zohaib and Sherin, Salman},
	title = {Empirical studies omit reporting necessary details: A systematic literature review of reporting quality in model based testing},
	year = {2018},
	journal = {Computer Standards and Interfaces},
	volume = {55},
	pages = {156 - 170},
	doi = {10.1016/j.csi.2017.08.002},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85027725107&doi=10.1016%2Fj.csi.2017.08.002&partnerID=40&md5=28c7bc63954c5a522280d32f5e8588c9},
	abstract = {Context Empirical studies are essential in evaluating the effectiveness of Model-based Testing (MBT) research and should be reported properly to ensure their replication and to highlight the strengths and limitations of the MBT techniques being evaluated. Researchers have proposed guidelines detailing what information should be reported when presenting empirical studies and what should be the structure of such primary studies. There is a need to evaluate the reporting quality of the empirical studies in MBT literature. Objective To evaluate the reporting quality of empirical studies in the model based testing domain; identifying where the reported studies fail to follow the proposed guidelines and finding frequently omitted details. As an auxiliary goal we aim to quantify the percentage of empirical studies conducted in industrial context. Method We evaluate the reporting quality and the execution contexts of MBT empirical studies reported in literature. For our study we consider the MBT papers published in top ten software engineering journals over the last eighteen years. We evaluate the published primary studies using the empirical study reporting guidelines. Results We found 87 empirical in MBT that met our selection criteria. Initial results showed that the existing guidelines were not only too strict (for example they demand presence of specific sections rather than simply having the details present in the paper), they also did not adequately cover MBT specific details. Therefore, we propose modified the guidelines for reporting empirical studies in MBT and re-evaluated the selected studies. Results show that while only a few empirical studies follow the exact structure proposed by the guidelines, approximately half the papers contain at least 50% of the required details. Most of the papers omit details related to process and analysis leading to presented results. We found a positive trend of improving reporting quality of empirical studies in MBT over the last Eighteen years. Another important finding from the review is that few reported studies were conducted in real industrial context. Conclusions Model based testing community needs to be more aware of the reporting guidelines and more effort should be spent on reporting the necessary details. Furthermore, we found that only few studies that are conducted in industrial context and hence more focus should be given to empirical case studies in real industry context. However, the reporting quality of research papers presenting empirical evaluations is gradually improving. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Study; Model Based Testing; Reporting Guidelines; Reporting Quality; Model Checking; Software Engineering; Empirical Case Studies; Empirical Evaluations; Empirical Studies; Model Based Testing; Reporting Guidelines; Selection Criteria; Software Engineering Journals; Systematic Literature Review; Quality Control},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Hoisl201749,
	author = {Hoisl, Bernhard and Sobernig, Stefan and Strembeck, Mark},
	title = {Reusable and generic design decisions for developing UML-based domain-specific languages},
	year = {2017},
	journal = {Information and Software Technology},
	volume = {92},
	pages = {49 - 74},
	doi = {10.1016/j.infsof.2017.07.008},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85027512992&doi=10.1016%2Fj.infsof.2017.07.008&partnerID=40&md5=2bfd8b3a6e6d0d8c42f7e1af95bf949f},
	abstract = {Context: In recent years, UML-based domain-specific model languages (DSMLs) have become a popular option in model-driven development projects. However, making informed design decisions for such DSMLs involves a large number of non-trivial and inter-related options. These options concern the language-model specification, UML extension techniques, concrete-syntax language design, and modeling-tool support. Objective: In order to make the corresponding knowledge on design decisions reusable, proven design rationale from existing DSML projects must be collected, systematized, and documented using an agreed upon documentation format. Method: We applied a sequential multi-method approach to identify and to document reusable design decisions for UML-based DSMLs. The approach included a Web-based survey with 80 participants. Moreover, 80 DSML projects<sup>1</sup> which have been identified through a prior systematic literature review, were analyzed in detail in order to identify reusable design decisions for such DSMLs. Results: We present insights on the current state of practice in documenting UML-based DSMLs (e.g., perceived barriers, documentation techniques, reuse potential) and a publicly available collection of reusable design decisions, including 35 decision options on different DSML development concerns (especially concerning the language model, concrete-syntax language design, and modeling tools). The reusable design decisions are documented using a structured documentation format (decision record). Conclusion: Our results are both, scientifically relevant (e.g. for design-space analyses or for creating classification schemas for further research on UML-based DSML development) and important for actual software engineering projects (e.g. by providing best-practice guidelines and pointers to common pitfalls). © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Design Decision; Design Rationale; Domain-specific Language; Model-driven Software Development; Survey; Unified Modeling Language; Computational Linguistics; Computer Programming Languages; Concretes; Graphical User Interfaces; Modeling Languages; Problem Oriented Languages; Software Engineering; Surveying; Surveys; Syntactics; Unified Modeling Language; Visual Languages; Best Practice Guidelines; Design Decisions; Design Rationale; Domain Specific Languages; Domain Specific Modeling Languages; Model-driven Software Development; Software Engineering Projects; Systematic Literature Review; Software Design},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Kuhrmann20172852,
	author = {Kuhrmann, Marco and Mendez, Daniel and Daneva, Maya},
	title = {On the pragmatic design of literature studies in software engineering: an experience-based guideline},
	year = {2017},
	journal = {Empirical Software Engineering},
	volume = {22},
	number = {6},
	pages = {2852 - 2891},
	doi = {10.1007/s10664-016-9492-y},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85008429791&doi=10.1007%2Fs10664-016-9492-y&partnerID=40&md5=bfa5ebc6bb431b89e09323ecfb6ee40b},
	abstract = {Systematic literature studies have received much attention in empirical software engineering in recent years. They have become a powerful tool to collect and structure reported knowledge in a systematic and reproducible way. We distinguish systematic literature reviews to systematically analyze reported evidence in depth, and systematic mapping studies to structure a field of interest in a broader, usually quantified manner. Due to the rapidly increasing body of knowledge in software engineering, researchers who want to capture the published work in a domain often face an extensive amount of publications, which need to be screened, rated for relevance, classified, and eventually analyzed. Although there are several guidelines to conduct literature studies, they do not yet help researchers coping with the specific difficulties encountered in the practical application of these guidelines. In this article, we present an experience-based guideline to aid researchers in designing systematic literature studies with special emphasis on the data collection and selection procedures. Our guideline aims at providing a blueprint for a practical and pragmatic path through the plethora of currently available practices and deliverables capturing the dependencies among the single steps. The guideline emerges from various mapping studies and literature reviews conducted by the authors and provides recommendations for the general study design, data collection, and study selection procedures. Finally, we share our experiences and lessons learned in applying the different practices of the proposed guideline. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Software Engineering; Guideline Proposal; Lessons Learned; Systematic Literature Review; Systematic Mapping Study; Mapping; Software Engineering; Empirical Software Engineering; Guideline Proposal; Lessons Learned; Systematic Literature Review; Systematic Mapping Studies; Data Acquisition},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Bronze Open Access; Green Accepted Open Access; Green Final Open Access; Green Open Access}
}

@ARTICLE{Garousi20171091,
	author = {Garousi, Vahid and Eskandar, Matt M. and Herkiloǧlu, Kadir},
	title = {Industry–academia collaborations in software testing: experience and success stories from Canada and Turkey},
	year = {2017},
	journal = {Software Quality Journal},
	volume = {25},
	number = {4},
	pages = {1091 - 1143},
	doi = {10.1007/s11219-016-9319-5},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84973130370&doi=10.1007%2Fs11219-016-9319-5&partnerID=40&md5=4fe1be94ff72f090979e81d597c7809b},
	abstract = {Collaboration between industry and academia supports improvement and innovation in industry and helps to ensure industrial relevance in academic research. However, many researchers and practitioners believe that the level of joint industry–academia collaborations (IAC) in software engineering (SE) is still relatively very low, compared to the amount of activity in each of the two communities. The goal of the empirical study reported in this paper is to characterize a set of collaborative industry–academia R&D projects in the area of software testing conducted by the authors (based in Canada and Turkey) with respect to a set of challenges, patterns and anti-patterns identified by a recent Systematic Literature Review study, with the aim of contributing to the body of evidence in the area of IAC, for the benefit of SE researchers and practitioners in conducting successful IAC projects in software testing and in software engineering in general. To address the above goal, a pool of ten IAC projects (six completed, two failed and two ongoing) all in the area of software testing, which the authors have led or have had active roles in, were selected as objects of study and were analyzed (both quantitatively and qualitatively) with respect to the set of selected challenges, patterns and anti-patterns. As outputs, the study presents a set of empirical findings and evidence-based recommendations, e.g.: it has been observed that even if an IAC project may seem perfect from many aspects, one single major challenge (e.g., disagreement in confidentiality agreements) can lead to its failure. Thus, we recommend that both parties (academics and practitioners) consider all the challenges early on and proactively work together to eliminate the risk of challenges in IAC projects. We furthermore report correlation and interrelationship of challenges, patterns and anti-patterns with project success measures. This study hopes to encourage and benefit other SE researchers and practitioners in conducting successful IAC projects in software testing and in software engineering in general in the future. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Anti-patterns; Challenges; Empirical Study; Evidence; Experience Report; Industry–academia Collaborations; Software Engineering; Software Testing; Success Factors (patterns); Industrial Research; Software Engineering; Anti-patterns; Challenges; Empirical Studies; Evidence; Experience Report; Success Factors; Software Testing},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Marimuthu2017143,
	author = {Marimuthu, C. and Chandrasekaran, Kandasamy},
	title = {Systematic studies in software product lines: A tertiary study},
	year = {2017},
	journal = {ACM International Conference Proceeding Series},
	volume = {1},
	pages = {143 - 152},
	doi = {10.1145/3106195.3106212},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85032300414&doi=10.1145%2F3106195.3106212&partnerID=40&md5=69c45f1279d1ac4c1a37c7de6deb5755},
	abstract = {Software product lines are widely used in the software industries to increase the re-usability and to decrease maintenance cost. On the other hand, systematic reviews are widely used in the software engineering research community to provide the overview of the research field and practitioners guidelines. Researchers have conducted many systematic studies on the different aspects of SPLs. To the best of our knowledge, till now there is no tertiary study conducted on systematic studies of SPL related research topics. In this paper, we aim at conducting a systematic mapping study of existing systematic studies to report the overview of the findings for researchers and practitioners. We performed snowballing and automated search to find out the relevant systematic studies. As a result, we analyzed 60 relevant studies to answer 5 research questions. The main focus of this tertiary study is to highlight the research topics, type of published reviews, active researchers and publication forums. Additionally, we highlight some of the limitations of the systematic studies. The important finding of this study is that the research field is well matured as the systematic studies covered a wide range of research topics. Another important finding is that many studies provided information for practitioners as well as researchers which is a notable improvement in the systematic reviews. However, many studies failed to assess the quality of the primary studies which is the major limitation of the existing systematic studies. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Software Product Line; Systematic Review; Tertiary Study; Computer Software; Software Design; Software Engineering; Automated Searches; Maintenance Cost; Research Questions; Software Industry; Software Product Line; Systematic Mapping Studies; Systematic Review; Tertiary Study; Computer Software Reusability},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{2017,
	title = {ACM International Conference Proceeding Series},
	year = {2017},
	journal = {ACM International Conference Proceeding Series},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055495874&partnerID=40&md5=f55cd0e9da1a80d3756e6603f2783e76},
	abstract = {The proceedings contain 42 papers. The topics discussed include: hearing the voice of developers in mobile software ecosystems; how has the health of software ecosystems been evaluated? a systematic review; incremental strategy for applying mutation operators emphasizing faults difficult to be detected by automated static analyser; test case prioritization: a systematic review and mapping of the literature; an analysis of the empirical software engineering over the last 10 editions of Brazilian software engineering symposium; investigating the effectiveness of peer code review in distributed software development; tweaking association rules to optimize software change recommendations; what are software engineers asking about Android testing on stack overflow?; automatic generation of search-based algorithms applied to the feature testing of software product lines; comprehensibility of heterogeneous configuration knowledge: an user study; comparing configuration approaches for dynamic software product lines; late decomposition of applications into services through model-driven engineering; improving the structure of KDM instances via refactorings: an experimental study using KDM-RE; adding human interaction aspects in the writing of user stories: a perspective of software developers; students' engagement in open source projects : an analysis of Google summer of code; and software knowledge registration practices at software innovation startups - results of an exploratory study. © 2018 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Yusop2017848,
	author = {Yusop, Nor Shahida Mohamad and Grundy, John C. and Vasa, Rajesh},
	title = {Reporting Usability Defects: A Systematic Literature Review},
	year = {2017},
	journal = {IEEE Transactions on Software Engineering},
	volume = {43},
	number = {9},
	pages = {848 - 867},
	doi = {10.1109/TSE.2016.2638427},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85030554017&doi=10.1109%2FTSE.2016.2638427&partnerID=40&md5=cac35369a576ee343a8b178ff708b7f9},
	abstract = {Usability defects can be found either by formal usability evaluation methods or indirectly during system testing or usage. No matter how they are discovered, these defects must be tracked and reported. However, empirical studies indicate that usability defects are often not clearly and fully described. This study aims to identify the state of the art in reporting of usability defects in the software engineering and usability engineering literature. We conducted a systematic literature review of usability defect reporting drawing from both the usability and software engineering literature from January 2000 until March 2016. As a result, a total of 57 studies were identified, in which we classified the studies into three categories: reporting usability defect information, analysing usability defect data and key challenges. Out of these, 20 were software engineering studies and 37 were usability studies. The results of this systematic literature review show that usability defect reporting processes suffer from a number of limitations, including: mixed data, inconsistency of terms and values of usability defect data, and insufficient attributes to classify usability defects. We make a number of recommendations to improve usability defect reporting and management in software engineering. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Systematic Review; Test Management; Usability Defect Reporting; Usability Testing; User Interface; Defects; Software Engineering; User Interfaces; Empirical Studies; Systematic Literature Review; Systematic Review; Test Management; Usability Defect Reporting; Usability Evaluation Methods; Usability Studies; Usability Testing; Usability Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Olorisade20171,
	author = {Olorisade, Babatunde Kazeem and Brereton, Pearl and Andras, Peter Peter},
	title = {Reproducibility of studies on text mining for citation screening in systematic reviews: Evaluation and checklist},
	year = {2017},
	journal = {Journal of Biomedical Informatics},
	volume = {73},
	pages = {1 - 13},
	doi = {10.1016/j.jbi.2017.07.010},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85025143405&doi=10.1016%2Fj.jbi.2017.07.010&partnerID=40&md5=4fcc5da60f0c97890fc01153a85ae462},
	abstract = {Context Independent validation of published scientific results through study replication is a pre-condition for accepting the validity of such results. In computation research, full replication is often unrealistic for independent results validation, therefore, study reproduction has been justified as the minimum acceptable standard to evaluate the validity of scientific claims. The application of text mining techniques to citation screening in the context of systematic literature reviews is a relatively young and growing computational field with high relevance for software engineering, medical research and other fields. However, there is little work so far on reproduction studies in the field. Objective In this paper, we investigate the reproducibility of studies in this area based on information contained in published articles and we propose reporting guidelines that could improve reproducibility. Methods The study was approached in two ways. Initially we attempted to reproduce results from six studies, which were based on the same raw dataset. Then, based on this experience, we identified steps considered essential to successful reproduction of text mining experiments and characterized them to measure how reproducible is a study given the information provided on these steps. 33 articles were systematically assessed for reproducibility using this approach. Results Our work revealed that it is currently difficult if not impossible to independently reproduce the results published in any of the studies investigated. The lack of information about the datasets used limits reproducibility of about 80% of the studies assessed. Also, information about the machine learning algorithms is inadequate in about 27% of the papers. On the plus side, the third party software tools used are mostly free and available. Conclusions The reproducibility potential of most of the studies can be significantly improved if more attention is paid to information provided on the datasets used, how they were partitioned and utilized, and how any randomization was controlled. We introduce a checklist of information that needs to be provided in order to ensure that a published study can be reproduced. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Citation Screening; Reproducibility; Reproducible Research; Systematic Review; Text Mining; Application Programs; Diagnosis; Learning Algorithms; Publishing; Software Engineering; Context Independent; Reproducibilities; Reproducible Research; Systematic Literature Review; Systematic Review; Text Mining; Text Mining Techniques; Third Party Software; Data Mining; Access To Information; Article; Automation; Citation Analysis; Data Analysis; Data Analysis Software; Data Mining; Information Processing; Machine Learning; Mathematical Analysis; Medical Research; Perceptron; Practice Guideline; Priority Journal; Reproducibility; Support Vector Machine; Systematic Review (topic); Checklist; Human; Literature; Publication; Biomedical Research; Checklist; Data Mining; Humans; Publications; Reproducibility Of Results; Review Literature As Topic},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Feng201741,
	author = {Feng, Luyi and Chiam, Yin Kia and Lo, Sin Kuang},
	title = {Text-Mining Techniques and Tools for Systematic Literature Reviews: A Systematic Literature Review},
	year = {2017},
	journal = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
	volume = {2017-December},
	pages = {41 - 50},
	doi = {10.1109/APSEC.2017.10},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85045907808&doi=10.1109%2FAPSEC.2017.10&partnerID=40&md5=4bb6e2da761f5f78da1506964d8d05e6},
	abstract = {Despite the importance of conducting systematic literature reviews (SLRs) for identifying the research gaps in software engineering (SE) research, SLRs are a complex, multi-stage, and time-consuming process if performed manually. Conducting an SLR in line with the guidelines and practice in the SE domain requires considerable effort and expertise. The objective of this SLR is to identify and classify text-mining techniques and tools that can help facilitate SLR activities. This study also investigates the adoption of text-mining (TM) techniques to support SLR in the SE domain. We performed a mixed search strategy to identify relevant studies published from January 1, 2004, to December 31, 2016. We shortlisted 32 papers into the final set of relevant studies published in the SE, medicine and social science disciplines. The majority of the text-mining techniques attempted to support the study selection stage. Only 12 out of the 14 studies in the SE domain applied text-mining techniques, focusing primarily on facilitating the search and study selection stages. By learning from the experience of applying TM techniques in clinical medicine and social science fields, we believe that SE researchers can adopt appropriate SLR automation strategies for use in the SE field. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Systematic Literature Review; Text Mining Techniques; Tool Support; Behavioral Research; Data Mining; Medicine; Multi-stages; Research Gaps; Review Activities; Selection Stages; Software Engineering Domain; Software Engineering Research; Systematic Literature Review; Techniques And Tools; Text Mining Techniques; Tool Support; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Bhatti201740,
	author = {Bhatti, Muhammad Wasim and Ahsan, Ali},
	title = {Effective communication among globally distributed software development teams: Development of an "effective communication" scale},
	year = {2017},
	journal = {Journal of Global Information Management},
	volume = {25},
	number = {3},
	pages = {40 - 62},
	doi = {10.4018/JGIM.2017070103},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85019131697&doi=10.4018%2FJGIM.2017070103&partnerID=40&md5=deefb3c11f32c66439d82fd928f9bd91},
	abstract = {Global software development, an emerging software development methodology within a technology-enabled environment has recently received increased attention from scholars and practitioners. Despite the fact that the lack of effective communication is a major challenge of globally distributed teams, communication research related to the scale development is still very limited in existing literature. Considering the communication challenges and increasing need to measure the effectiveness of communication, this research is focused to develop a scale for "Effective Communication" for globally distributed software development teams. Systematic literature review is performed to identify the best practices of effective communication for the development of "Effective Communication" scale. A questionnaire survey consisting of 29 items is administered in globally distributed software development teams. Confirmatory factor analysis and statistical results depicted that the four-factor model (e.g. stakeholders' involvement, acculturation, usage of appropriate tools and technology, and information availability) is more parsimonious and an optimal model fit. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Effective Communication; Global Software Development; Globally Distributed Teams; Scale Development; Factor Analysis; Software Engineering; Surveys; Confirmatory Factor Analysis; Effective Communication; Global Software Development; Globally Distributed Software Development; Globally-distributed Teams; Scale Development; Software Development Methodologies; Systematic Literature Review; Software Design},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Garousi2017170,
	author = {Garousi, Vahid and Felderer, Michael},
	title = {Experience-based guidelines for effective and efficient data extraction in systematic reviews in software engineering},
	year = {2017},
	journal = {ACM International Conference Proceeding Series},
	volume = {Part F128635},
	pages = {170 - 179},
	doi = {10.1145/3084226.3084238},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85025479499&doi=10.1145%2F3084226.3084238&partnerID=40&md5=b31001a39bb27f82f6701794bc90682c},
	abstract = {To systematically collect evidence and to structure a given area in software engineering (SE), Systematic Literature Reviews (SLR) and Systematic Mapping (SM) studies have become common. Data extraction is one of the main phases (activities) when conducting an SM or an SLR, whose objective is to extract required data from the primary studies and to accurately record the information researchers need to answer the questions of the SM/SLR study. Based on experience in a large number of SM/SLR studies, we and many other researchers have found the data extraction in SLRs to be time consuming and error-prone, thus raising the real need for heuristics and guidelines for effective and efficient data extraction in these studies, especially to be learnt by junior and young researchers. As a 'guideline' paper, this paper contributes a synthesized list of challenges usually faced during SLRs' data extraction phase and the corresponding solutions (guidelines). For our synthesis, we consider two data sources: (1) the pool of 16 SLR studies in which the authors have been involved in, as well as (2) a review of challenges and guidelines in the existing literature. Our experience in utilizing the presented guidelines in the near past have helped our junior colleagues to conduct data extractions more effectively and efficiently. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Data Extraction; Empirical Software Engineering; Research Methodology; Slr; Sm; Systematic Literature Reviews; Systematic Mapping Studies; Data Mining; Extraction; Mapping; Samarium; Data Extraction; Empirical Software Engineering; Research Methodologies; Systematic Literature Review; Systematic Mapping Studies; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Garousi2017224,
	author = {Garousi, Vahid and Felderer, Michael and Fernandes, João M. and Pfahl, Dietmar and Mäntylä, Mika V.},
	title = {Industry-academia collaborations in software engineering},
	year = {2017},
	journal = {ACM International Conference Proceeding Series},
	volume = {Part F128635},
	pages = {224 - 229},
	doi = {10.1145/3084226.3084279},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85025444508&doi=10.1145%2F3084226.3084279&partnerID=40&md5=1da300f33f4c7b4ddc7aabf3d13ebb25},
	abstract = {Research collaboration between industry and academia supports improvement and innovation in industry and helps to ensure industrial relevance in academic research. However, many researchers and practitioners believe that the level of joint industry-academia collaboration (IAC) in software engineering (SE) research is still relatively low, compared to the amount of activity in each of the two communities. The goal of the empirical study reported in this paper is to exploratory characterize the state of IAC with respect to a set of challenges, patterns and anti-patterns identified by a recent Systematic Literature Review study. To address the above goal, we gathered the opinions of researchers and practitioners w.r.t. their experiences in IAC projects. Our dataset includes 47 opinion data points related to a large set of projects conducted in 10 different countries. We aim to contribute to the body of evidence in the area of IAC, for the benefit of researchers and practitioners in conducting future successful IAC projects in SE. As an output, the study presents a set of empirical findings and evidence-based recommendations to increase the success of IAC projects. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Anti-patterns; Challenges; Empirical Study; Industry-academia Collaborations; Patterns; Research; Software Engineering; Success Factors; Industrial Research; Research; Anti-patterns; Challenges; Empirical Studies; Patterns; Success Factors; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Final Open Access; Green Open Access}
}

@ARTICLE{Hoda201760,
	author = {Hoda, Rashina and Salleh, Norsaremah and Grundy, John C. and Tee, Hui Mien},
	title = {Systematic literature reviews in agile software development: A tertiary study},
	year = {2017},
	journal = {Information and Software Technology},
	volume = {85},
	pages = {60 - 70},
	doi = {10.1016/j.infsof.2017.01.007},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85009961943&doi=10.1016%2Fj.infsof.2017.01.007&partnerID=40&md5=90ce329f452f55b55c7cb63fba1ae10b},
	abstract = {Context A number of systematic literature reviews and mapping studies (SLRs) covering numerous primary research studies on various aspects of agile software development (ASD) exist. Objective The aim of this paper is to provide an overview of the SLRs on ASD research topics for software engineering researchers and practitioners. Method We followed the tertiary study guidelines by Kitchenham et al. to find SLRs published between late 1990s to December 2015. Results We found 28 SLRs focusing on ten different ASD research areas: adoption, methods, practices, human and social aspects, CMMI, usability, global software engineering (GSE), organizational agility, embedded systems, and software product line engineering. The number of SLRs on ASD topics, similar to those on software engineering (SE) topics in general, is on the rise. A majority of the SLRs applied standardized guidelines and the quality of these SLRs on ASD topics was found to be slightly higher for journal publications than for conferences. While some individuals and institutions seem to lead this area, the spread of authors and institutions is wide. With respect to prior review recommendations, significant progress was noticed in the area of connecting agile to established domains such as usability, CMMI, and GSE; and considerable progress was observed in focusing on management-oriented approaches as Scrum and sustaining ASD in different contexts such as embedded systems. Conclusion SLRs of ASD studies are on the rise and cover a variety of ASD aspects, ranging from early adoption issues to newer applications of ASD such as in product line engineering. ASD research can benefit from further primary and secondary studies on evaluating benefits and challenges of ASD methods, agile hybrids in large-scale setups, sustainability, motivation, teamwork, and project management; as well as a fresh review of empirical studies in ASD to cover the period post 2008. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile Software Development; Mapping Study; Systematic Literature Reviews; Tertiary Study; Agile Manufacturing Systems; Embedded Systems; Human Resource Management; Mapping; Project Management; Social Aspects; Agile Software Development; Global Software Engineering; Mapping Studies; Product Line Engineering; Review Recommendations; Software Product Line Engineerings; Systematic Literature Review; Tertiary Study; Software Design},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Tosun2017273,
	author = {Tosun, Ayse and Bener, Ayşe and Akbarinasaji, Shirin},
	title = {A systematic literature review on the applications of Bayesian networks to predict software quality},
	year = {2017},
	journal = {Software Quality Journal},
	volume = {25},
	number = {1},
	pages = {273 - 305},
	doi = {10.1007/s11219-015-9297-z},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84948125967&doi=10.1007%2Fs11219-015-9297-z&partnerID=40&md5=9e3731efc93497a1e9bb5b6ee1b4075a},
	abstract = {Bayesian networks (BN) have been used for decision making in software engineering for many years. In other fields such as bioinformatics, BNs are rigorously evaluated in terms of the techniques that are used to build the network structure and to learn the parameters. We extend our prior mapping study to investigate the extent to which contextual and methodological details regarding BN construction are reported in the studies. We conduct a systematic literature review on the applications of BNs to predict software quality. We focus on more detailed questions regarding (1) dataset characteristics, (2) techniques used for parameter learning, (3) techniques used for structure learning, (4) use of tools, and (5) model validation techniques. Results on ten primary studies show that BNs are mostly built based on expert knowledge, i.e. structure and prior distributions are defined by experts, whereas authors benefit from BN tools and quantitative data to validate their models. In most of the papers, authors do not clearly explain their justification for choosing a specific technique, and they do not compare their proposed BNs with other machine learning approaches. There is also a lack of consensus on the performance measures to validate the proposed BNs. Compared to other domains, the use of BNs is still very limited and current publications do not report enough details to replicate the studies. We propose a framework that provides a set of guidelines for reporting the essential contextual and methodological details of BNs. We believe such a framework would be useful to replicate and extend the work on BNs. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Applications Of Ai; Bayesian Network; Software Quality; Software Reliability Prediction; Systematic Literature Review; Application Programs; Artificial Intelligence; Bioinformatics; Computer Software Selection And Evaluation; Decision Making; Forecasting; Learning Systems; Software Engineering; Software Reliability; Applications Of Ai; Machine Learning Approaches; Network Structures; Parameter Learning; Performance Measure; Prior Distribution; Software Quality; Systematic Literature Review; Bayesian Networks},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Barn2017212,
	author = {Barn, Balbir S. and Barat, Souvik and Clark, Tony},
	title = {Conducting systematic literature reviews and systematic mapping studies},
	year = {2017},
	journal = {ACM International Conference Proceeding Series},
	pages = {212 - 213},
	doi = {10.1145/3021460.3021489},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054160759&doi=10.1145%2F3021460.3021489&partnerID=40&md5=0a2d67bb062fad42a0f32d526feb6bb7},
	abstract = {Context: An essential part of conducting software engineering (SE) research is the ability to identify extant research on tools, technologies, concepts and methods in order to evaluate and make rational and scientific decisions. The domain from which such knowledge is extracted is typically existing research literature found in journals, conference proceedings, books and gray literature. Empirical approaches that include various systematic review (SR) methodologies such as systematic literature review (SLR) and systematic mapping study (SMS) are found to be effective in this context. They adopt rigorous planning, follow repeatable and well-defined processes, and produce unbiased and evidence-based outcomes. Despite these significant benefits, the general trend on using these systematic review (SR) methodologies is not encouraging in SE research. The primary reasons emerging are twofold - a) SR methodologies are largely cited as time-consuming activities and b) lack of guidance to conduct systematic reviews. This tutorial discusses these concerns and describes an effective way of using SR methodologies for SE research. Objectives: Attendees will be introduced to the key concepts, methods and processes for conducting systematic literature reviews (SLR) and systematic mapping studies (SMS). The benefits, limitations, guidelines for using SR methodologies in an effective manner will discussed in the session. Attendees will be guided on the appropriate formulation of a research question and sub questions; the development of a review protocol such as inclusion criteria, exclusion criteria, quality criteria and classification structures; and execution of review protocol using digital libraries and syntheses of review data. A web based software tool<sup>1</sup>, for supporting the systematic literature review process will be demonstrated and attendees will get the opportunity to use the tool to conduct the review to help in identification of relevant research and extraction and synthesis of data. Method: We will use a blend of information presentation, interactive hands-on session and knowledge sharing session. The presentation will introduce the key concepts, benefits, limitations and how to overcome the limitations; hands on session will illustrate a review process with a case study, and finally the knowledge sharing session will discuss the experiences, best practices and the lesson learnt. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Literature Review; Meta Modeling; Model Based Literature Review; Systematic Literature Review; Systematic Mapping Study; Digital Libraries; Knowledge Management; Mapping; Classification Structure; Information Presentation; Literature Reviews; Meta Model; Scientific Decisions; Systematic Literature Review; Systematic Literature Review (slr); Systematic Mapping Studies; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Malhotra201785,
	author = {Malhotra, Ruchika and Khanna, Megha and Raje, Rajeev R.},
	title = {On the application of search-based techniques for software engineering predictive modeling: A systematic review and future directions},
	year = {2017},
	journal = {Swarm and Evolutionary Computation},
	volume = {32},
	pages = {85 - 109},
	doi = {10.1016/j.swevo.2016.10.002},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85002466321&doi=10.1016%2Fj.swevo.2016.10.002&partnerID=40&md5=acb589f003f825fe0dc71b1b5bf55f8b},
	abstract = {Software engineering predictive modeling involves construction of models, with the help of software metrics, for estimating quality attributes. Recently, the use of search-based techniques have gained importance as they help the developers and project-managers in the identification of optimal solutions for developing effective prediction models. In this paper, we perform a systematic review of 78 primary studies from January 1992 to December 2015 which analyze the predictive capability of search-based techniques for ascertaining four predominant software quality attributes, i.e., effort, defect proneness, maintainability and change proneness. The review analyses the effective use and application of search-based techniques by evaluating appropriate specifications of fitness functions, parameter settings, validation methods, accounting for their stochastic natures and the evaluation of developmental models with the use of well-known statistical tests. Furthermore, we compare the effectiveness of different models, developed using the various search-based techniques amongst themselves, and also with the prevalent machine learning techniques used in literature. Although there are very few studies which use search-based techniques for predicting maintainability and change proneness, we found that the results of the application of search-based techniques for effort estimation and defect prediction are encouraging. Hence, this comprehensive study and the associated results will provide guidelines to practitioners and researchers and will enable them to make proper choices for applying the search-based techniques to their specific situations. © 2016 Elsevier B.V., All rights reserved.},
	author_keywords = {Change Prediction; Defect Prediction; Effort Estimation; Maintainability Prediction; Search-based Techniques; Software Quality; Artificial Intelligence; Computer Software Selection And Evaluation; Defects; Forecasting; Learning Systems; Maintainability; Object Oriented Programming; Software Engineering; Stochastic Models; Stochastic Systems; Change Prediction; Defect Prediction; Effort Estimation; Search-based; Software Quality; Application Programs},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Majeed201724,
	author = {Majeed, Asim and Baadel, Said and Williams, Mike Lloyd},
	title = {Semantics of intelligent learning environment (ILE): Cesim simulation},
	year = {2017},
	journal = {ACM International Conference Proceeding Series},
	pages = {24 - 29},
	doi = {10.1145/3026480.3026488},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85015628885&doi=10.1145%2F3026480.3026488&partnerID=40&md5=bb400a307b94c5fefb9ffcae6a832016},
	abstract = {In the past few decades, learning through simulation and games has evolved in response to a continuous demand for new methods of teaching learners - thus helping academics to deliver their courses effectively. This research paper aims to identify the impact(s) of simulation-based virtual learning environment on postgraduate studentslearning abilities. To achieve the learning objectives; positive relations between simulations and students learning are gathered based on the systematic review of the literature. A successful use of simulations depends on four factors: the role of the instructor, integration in the course, the courses technical specifications and, the practical exposure as an integrative dynamic virtual learning environment. We utilized a quantitative methodology to compile data from online bloggers and analysed the content. The findings in this paper reveal that students from all groups, disaggregated by gender and ethnicity, showed significant learning gains after playing these challenging simulation games. We also present some recommendations that can help alleviate some of the constraints experienced by institutions of higher education that integrate simulations into classrooms. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Cesim; Game-based Learning; Simulation; Virtual; Computer Aided Instruction; Computer Aided Software Engineering; Education; Electronic Commerce; Semantics; Students; Teaching; Virtual Reality; Cesim; Game-based Learning; Institutions Of Higher Educations; Intelligent Learning Environments; Simulation; Technical Specifications; Virtual; Virtual Learning Environments; E-learning},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Felderer201747,
	author = {Felderer, Michael and Carver, Jeffrey C.},
	title = {Guidelines for systematic mapping studies in security engineering},
	year = {2017},
	pages = {47 - 68},
	doi = {10.1201/b20962},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85052671799&doi=10.1201%2Fb20962&partnerID=40&md5=808dd9876e6b8d446981bd5d0567418f},
	abstract = {A mature field requires researchers who are able to analyze and synthesize research to draw deeper, more meaningful conclusions. As a research area matures there is often a sharp increase in the number of research reports and results made available. With this increase, it is important to perform secondary studies that summarize results and provide an overview of the area. Methodologies exist for various types of secondary studies (i.e. systematic literature reviews and systematic mapping studies), which have been extensively used in evidence-based medicine and and software engineering. Secondary studies are less common in security engineering. However, a general trend toward more empirical studies in software security and evidence-based software security engineering has led to an increased focus on systematic research methods. © 2019 Elsevier B.V., All rights reserved.},
	author_keywords = {Mapping; Software Engineering; Empirical Studies; Evidence-based Medicine; Research Reports; Security Engineering; Software Security; Systematic Literature Review; Systematic Mapping Studies; Systematic Research; Security Systems},
	type = {Book chapter},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Uysal2017504,
	author = {Uysal, Murat Pasa and Giray, Görkem},
	title = {An essence framework approach to software engineering research; Yazilim Mühendisliǧi Araştirmalarina Öz ÇerçEve Yaklaşimi},
	year = {2017},
	journal = {CEUR Workshop Proceedings},
	volume = {1980},
	pages = {504 - 515},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85035077665&partnerID=40&md5=e84a96e098a752c7aed83349d5d0098c},
	abstract = {It is thought that the comparison of studies designed and conducted in the research field of Software Engineering (SE) on a common basis in terms of various dimensions and variables may bring important contributions to the industry as much as to the scientific world. In this study, therefore, we develop an Essence Framework-based Research Design and Evaluation Model (EFBRDEM), and then apply this model to the evaluation of an empirical research in SE. Our study is conducted according to the guidelines of Systematic Review and Qualitative Research. At first, we systematically review the related. literature, and then develop the EFBRDEM. Finally, an empirical research on agile SE methods is modeled using the EFBRDEM. The first impressions are such that the proposed model can serve as a bridge between the research field and the industry as well as it can shed light on long-standing fundamental problems between the theory and SE practices. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Essence Framework; Research Method; Software Engineering; Empirical Research; Essence Framework; First Impressions; Qualitative Research; Research Designs; Research Fields; Research Methods; Systematic Review; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{2017,
	title = {Proceedings of the 45th SEFI Annual Conference 2017 - Education Excellence for Sustainability, SEFI 2017},
	year = {2017},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85034764804&partnerID=40&md5=8da95f696386b8176aaabd6905ea0b14},
	abstract = {The proceedings contain 186 papers. The topics discussed include: challenges for teaching sustainability and promoting diversity within a software engineering course; engineering and sustainability education in Nigeria; sustainability accreditation in engineering education: comparison between Danish and French contexts; the European project semester at ISEP (EPS@ISEP) programme implementation results and ideas for improvement; introducing sustainability in engineering education curricula: an achievable outcome or a utopia?; student comparative self-assessment based on learning outcomes; sustainable transfer of a German PPBL model to a Mongolian environment: intercultural experiences, reflections, & recommendations; minor in sustainable design for engineering design education. experience at UPC Barcelona tech; circular economy design forum - introducing entrepreneurial mindset and circularity to teaching; engineering education for sustainable cities in Africa: conversations from Kenya; teaching sustainability to engineers: a systematic literature review; how to integrate sustainability and entrepreneurship in the Ba/Ma-curricula?; hands-on experiments vs. computer-based simulations in energy storage laboratories; sustainability literacy and engineering experiences from a literacy test as a teaching and assessment tool in Nordic universities; education for sustainable development through service learning in engineering; and around the world in 36 hours - understanding the dynamics of the global product design relay marathon. © 2017 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Gilal20171399,
	author = {Gilal, Abdul Rehman and Jaafar, Jafreezal Bin and Abro, Ahsanullah and Omar, Mazni Binti and Basri, Shuib Bin and Saleem, Muhammad Qaiser},
	title = {Effective personality preferences of software programmer: A systematic review},
	year = {2017},
	journal = {Journal of Information Science and Engineering},
	volume = {33},
	number = {6},
	pages = {1399 - 1416},
	doi = {10.6688/JISE.2017.33.6.1},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85034763285&doi=10.6688%2FJISE.2017.33.6.1&partnerID=40&md5=c08cbef69693fd78ea7f12ea40788f7a},
	abstract = {A plethora of research has been carried out to explore the key importance of team roles and personality types in software development. What types of personality are handy and beneficial for an ideal and effective teamwork is still a question for the researchers and practitioners. This study has combined the past claims of personality preferences for programmer role so that researchers and practitioners can easily access the literature. In order to achieve the study objective, Kitchenham guidelines were followed to design and implement the review protocol. The whole review focused to find the effective personality preferences of programmer role from different experimental settings: individuals-Andteams and academic-And-industry. Additionally, only those studies were selected that used Myers-Briggs type indicator (MBTI) personality test. The results of this study were divided into three categories based on the obtained personality preferences: strongly appeared, weakly appeared, and disappeared. For example, it was strongly observed in the results that combination of intuitive (N) and feeling (F) traits is not a suitable personality choice for programmer role. The conclusion of this study can be drawn with the statement that personality based software development research needs serious attention to fill the wide gaps. There are numerous ambiguities for practitioners if they intend to put these studies into use. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Mbti; Personality; Programmer; Software Development; Systematic Review; Computer Software; Software Engineering; Design And Implements; Mbti; Myers-briggs Type Indicators; Personality; Personality Tests; Personality Types; Programmer; Systematic Review; Software Design},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Garcés201791,
	author = {Garcés, Lina and Romero Felizardo, Katia Romero and Oliveira, Lucas Bueno Ruas and Nakagawa, Elisa Yumi},
	title = {An experience report on update of systematic literature reviews},
	year = {2017},
	journal = {Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE},
	pages = {91 - 96},
	doi = {10.18293/SEKE2017-078},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85029531031&doi=10.18293%2FSEKE2017-078&partnerID=40&md5=7bdc13b2fa60e483109755624c95b1eb},
	abstract = {Context: In order to preserve the value of Systematic Literature Reviews (SLRs), they should be frequently updated including new studies produced after the conduction of the reviews. However, most of SLRs are outdated and there is a lack of works that support the conduction of SLRs updates. Objective: The main goal of this paper is to report our experience in updating two of our SLRs. Method: To update these two SLRs, we used automated techniques based on VTM (Visual Text Mining) to guarantee the presence of relevant studies. Results: From our experience, some factors to satisfactorily update SLRs were identified: (i) to adopt software tools to support the updating process; (ii) to provide as much as possible information of previous SLR; (iii) to involve researchers from previous SLR; and (iv) to reuse protocol from preliminar SLR. Conclusions: Reported lessons learned can be used as a basis of knowledge to guide researchers when updating their SLRs. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Systematic Literature Review; Update; Vtm; Computer Software Reusability; Data Mining; Knowledge Engineering; Automated Techniques; Experience Report; New Study; Systematic Literature Review; Text Mining; Update; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Bronze Open Access}
}

@CONFERENCE{Thiry2017248,
	author = {Thiry, Marcello and Schmidt, Roger Anderson},
	title = {Self-Adaptive systems driven by runtime models a systematic literature review of approaches},
	year = {2017},
	journal = {Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE},
	pages = {248 - 253},
	doi = {10.18293/SEKE2017-168},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85029471104&doi=10.18293%2FSEKE2017-168&partnerID=40&md5=ef9586601b7d25f9eef23fe24a6fa48b},
	abstract = {Model-Driven Software Engineering (MDSE) represents a promising research area with a variety of challenging issues open for discussion. Expanding the limits of the MDSE paradigm, runtime models keep abstract representations of the running system in order to trigger on-The-fly software reconfigurations. One of the most popular applications of runtime models are self-Adaptive systems, since abstractions can be finetuned not only in the development phases, but also in runtime. As this kind of system needs to modify its behavior during execution, this can be achieved by means of high-level model interventions. The objective of this article is to present relevant approaches of self-Adaptive systems driven by runtime models. This article can help practitioners to get an overall picture of current approaches, in terms of methods, techniques and tools. Researchers can also be inspired to create new or to extend current approaches, facing the challenges identified here. To that end, we conducted a rigorous Systematic Literature Review based on the guidelines proposed by Kitchenham. This paper provides answers for four research questions, based on 16 selected articles. In the conclusion, we present some considerations and challenges based on the results obtained from this review. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Model-driven Software Engineering; Runtime Model; Self-adaptive System; Systematic Literature Review; Abstracting; Embedded Systems; Knowledge Engineering; Software Engineering; Systems Analysis; Abstract Representation; High-level Modeling; Model Driven Software Engineering; Runtime Models; Self-adaptive System; Software Reconfiguration; Systematic Literature Review; Techniques And Tools; Adaptive Systems},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Bronze Open Access}
}

@ARTICLE{Haneem2017705,
	author = {Haneem, Faizura and Kama, Nazri and Ali, Rosmah Binti and Selamat, Ali Bin},
	title = {Applying data analytics approach in systematic literature review: Master data management case study},
	year = {2017},
	journal = {Frontiers in Artificial Intelligence and Applications},
	volume = {297},
	pages = {705 - 715},
	doi = {10.3233/978-1-61499-800-6-705},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85029229683&doi=10.3233%2F978-1-61499-800-6-705&partnerID=40&md5=34ba10161f8f1102a76700cbfa6af69e},
	abstract = {Systematic Literature Review (SLR) is a structured way of conducting a review that can assist the researcher in analyzing the progress of a specific stream of research. Although there are a number of SLR guidelines proposed by existing researchers, there is still too little attention paid to the approach taken and the tools that could be applied throughout the SLR process. Therefore, this paper attempted to fill the gap by presenting the application of Data Analytics approach in the SLR with the utilization of data mining and text mining technique. It proposed a step-by-step procedure using data analytics approach, and recommended tools to be used in the SLR process. To demonstrate the applicability of the approach, the authors selected a Master Data Management research domain as a case study. Based on this particular application, it can be concluded that this approach is a replicable, effective and output-based approach in conducting an SLR. It is hoped that other researchers would be able to replicate this approach in doing SLR for other research domains such as software engineering and information technology fields of study. © 2024 Elsevier B.V., All rights reserved.},
	author_keywords = {Data Analytics; Master Data Management; Systematic Literature Review; Text Mining; Information Management; Software Engineering; Analytic Approach; Case-studies; Data Analytics; Master Data Management; Research Domains; Review Process; Step By Step Procedure; Systematic Literature Review; Text Mining Techniques; Text-mining; Data Mining},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{2017,
	title = {CIbSE 2017 - XX Ibero-American Conference on Software Engineering},
	year = {2017},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85026671635&partnerID=40&md5=7c91af295a51c479fc888b97a758b2d0},
	abstract = {The proceedings contain 64 papers. The topics discussed include: automated structural software testing of autonomous vehicles; supporting assessment and improvement of software development processes using model transformations; logical unified modeling for NoSQL databases; using voice commands for UML modelling support on interactive whiteboards: insights and experiences; toward technical debt aware software modeling; teaching of agile UML modelling: recommendations from students' reflections; an enhanced evaluation model for search-based product line architecture design; towards the predictive performance analysis of adaptive systems with emotions; family of strategies for different evaluation purposes; time to pay up - technical debt from a software quality perspective; so little value a multi-case study on improving the impact of data-driven development practices; a survey on preferences of quality attributes in the decision-making for self-adaptive and self-managed systems: the bad, the good and the ugly; requirements engineering for robotic system: a systematic mapping study; requirements engineering practice and problems in agile projects: results from an international survey; retrospective and trends in requirements engineering for embedded systems: a systematic literature review; and limiting the scope of the domain language to build user stories. © 2017 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Alfagi2017101,
	author = {Alfagi, Abd S. and Manaf, Azizah Abdul and Hamida, Belal Ahmed and Hamza, Mohd Ghazali},
	title = {A systematic literature review on necessity, challenges, applications and attacks of watermarking relational database},
	year = {2017},
	journal = {Journal of Telecommunication, Electronic and Computer Engineering},
	volume = {9},
	number = {1-3},
	pages = {101 - 108},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85020832103&partnerID=40&md5=628ad56ecceb7d09e6a5d85653e39491},
	abstract = {Systematic literature review (SLR) is a significant research methodology in software engineering and computer science. One precarious step in applying this methodology is to enterprise and perform appropriate and effective search approach. This is a time-consuming and error-prone step, which needs to be carefully planned and implemented. There is an apparent need for a systematic approach to designing and performing a suitable search strategy for optimally retrieving the target literature from digital libraries. To the best of our knowledge, five intensive review papers [1-5] have been found which are not SLR, instead they are a normal survey or literature review. In contrast to [1-9] this paper followed general guidelines for undertaking SLR in order to illustrate necessity, challenges, applications, and attacks of watermarking relational database. An advanced search has been performed in most relevant digital libraries to obtain potentially relevant articles published until the end of 2014. Forty-six primary studies (PSs) have been identified based on inclusion and exclusion criteria. The analytical study is mainly based on the PSs to achieve the objectives. The results illustrate the importance of digital watermark in protecting the relational database, the differences between watermarking relational database and multimedia objects and the demand to increase the level of attack resilience. In addition, the results indicate that watermarking relational database is an interested area for researchers. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Database; Database Watermarking; Systematic Literature Review; Watermarking Multimedia Objects},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Palomino201757,
	author = {Palomino, Marco and Dávila, Abraham Eliseo and Melendez, Karin Ana and Pessôa, Marcelo Schneck De Paula},
	title = {Agile practices adoption in CMMI organizations: A systematic literature review},
	year = {2017},
	journal = {Advances in Intelligent Systems and Computing},
	volume = {537},
	pages = {57 - 67},
	doi = {10.1007/978-3-319-48523-2_6},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84992455483&doi=10.1007%2F978-3-319-48523-2_6&partnerID=40&md5=72af6cd5c629924c636592721537983c},
	abstract = {In the recent years, the adoption of agile frameworks and methodologies in Software Development Organizations (SDO) has grown up considerably. Unfortunately, there are scenarios where agile practices can’t cover alone all the needs; for instance, software projects with a large level of required formal documentation or large, complex software projects; similarly, this kind of situations happen frequently in a context of CMMI organizations. The aim of this study is identify and analyze the most used agile practices that are used in combination with CMMI within SDO. To accomplish this, a systematic literature review has been performed according to relevant guidelines. This study has identified practices related Daily Meeting and Product Backlog management from Scrum framework as most common agile practices used in combination with CMMI. In addition, we could identify that there are specific benefits of implementing practices from both approaches. © 2016 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile Practice; Agile Software Development; Cmmi; Application Programs; Societies And Institutions; Software Engineering; Agile Practices; Agile Software Development; Cmmi; Complex Software; Formal Documentation; Software Development Organizations; Software Project; Systematic Literature Review; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{20171,
	title = {International Conference on Software Process Improvement, CIMPS 2016},
	year = {2017},
	journal = {Advances in Intelligent Systems and Computing},
	volume = {537},
	pages = {1 - 293},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84992446133&partnerID=40&md5=4ccc2ed0ff7d854f8704e8fbde8bfabf},
	abstract = {The proceedings contain 27 papers. The special focus in this conference is on Organizational Models, Standards, Methodologies, Knowledge Management, Software Systems, Applications, Tools, Information and Communication Technologies. The topics include: Analysis about the implementation level of ITIL in SMEs; organizational maturity models architectures; a systematic literature review; process mining applications in software engineering; agile practices adoption in CMMI organizations; a systematic literature review; CAPE Role in engineering innovation; part 1-the evolution; CAPE Role in engineering innovation: part 2-the coming revolution; using design patterns to solve Newton-type methods; factors affecting the accuracy of use case points; improving competitiveness aligning knowledge and talent management with strategic goals; adoption of the user profiles technique in the open source software development process; mobile application for automatic counting of bacterial colonies; a new scheme to visualize clusters model in data mining; determinant factors in post-implementation phase of ERP systems; tourism recommendation system based in user functionality and points-of-interest accessibility levels and identification of visually impaired users for customizing web pages on the internet. © 2016 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Garousi2016106,
	author = {Garousi, Vahid and Petersen, Kai and Özkan, Barış},
	title = {Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review},
	year = {2016},
	journal = {Information and Software Technology},
	volume = {79},
	pages = {106 - 127},
	doi = {10.1016/j.infsof.2016.07.006},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84980410074&doi=10.1016%2Fj.infsof.2016.07.006&partnerID=40&md5=50d9847fc2d019d1587864231c1015c2},
	abstract = {Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two ’camps’ show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations. Objective: To identify (a) the challenges to avoid risks to the collaboration by being aware of the challenges, (b) the best practices to provide an inventory of practices (patterns) allowing for an informed choice of practices to use when planning and conducting collaborative projects. Method: A systematic review has been conducted. Synthesis has been done using grounded-theory based coding procedures. Results: Through thematic analysis we identified 10 challenge themes and 17 best practice themes. A key outcome was the inventory of best practices, the most common ones recommended in different contexts were to hold regular workshops and seminars with industry, assure continuous learning from industry and academic sides, ensure management engagement, the need for a champion, basing research on real-world problems, showing explicit benefits to the industry partner, be agile during the collaboration, and the co-location of the researcher on the industry side. Conclusion: Given the importance of industry-academia collaboration to conduct research of high practical relevance we provide a synthesis of challenges and best practices, which can be used by researchers and practitioners to make informed decisions on how to structure their collaborations. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Best Practices; Challenges; Industry; Industry-academia Collaborations; Software Engineering; Success Patterns; Systematic Literature Review; Universities; Industry; Information Systems; Best Practices; Challenges; Success Patterns; Systematic Literature Review; Universities; Software Engineering},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Cruz-Hinojosa2016124,
	author = {Cruz-Hinojosa, Nancy Judith and Gutierrez-de-Mesa, Jose Antonio},
	title = {Literature review of the situation research faces in the application of ITIL in Small and Medium Enterprises},
	year = {2016},
	journal = {Computer Standards and Interfaces},
	volume = {48},
	pages = {124 - 138},
	doi = {10.1016/j.csi.2016.05.001},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84974855172&doi=10.1016%2Fj.csi.2016.05.001&partnerID=40&md5=4cb91b6e79fc6777fdf8142a4fd0ae62},
	abstract = {This paper carries out a review of the issues that Small and Medium Enterprises (SMEs) face when trying to ensure their alignment with Information Technology Infrastructure Library (ITIL) guidelines. It is well-known that SMEs experience different challenges to those experienced by Large Enterprises, however their demands are the same as larger companies. Given that they have less labor and technological resources, they must optimize their service levels and adapt the activities of their IT departments to the needs of the company without negatively impacting service commitments. In this context our main objective is to establish a complete review concerning the important information that exists in relation to ITIL and its use in Small and Medium Enterprises, evaluating methods for the collection of evidence and analysis. For this reason we have conducted a systematic literature review with the automated search in the range 2007-2015 which has led us to identify thirty-nine articles of relevance. It is noted that, although it was initially expected that there might be enough information that would help us validate and interpret the way that ITIL functions for Small and Medium Enterprises, the reality is that there are not many publications of relevance that deal with the topic of ITIL and SMEs. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Itil; Method; Small And Medium Enterprises; Systematic Literature Review; Interfaces (computer); Automated Searches; Information Technology Infrastructure Library (itil); Itil; Literature Reviews; Method; Small And Medium Enterprise; Systematic Literature Review; Technological Resources; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Badampudi2016148,
	author = {Badampudi, Deepika and Wohlin, Claes},
	title = {Bayesian Synthesis for Knowledge Translation in Software Engineering: Method and Illustration},
	year = {2016},
	pages = {148 - 156},
	doi = {10.1109/SEAA.2016.45},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85020739622&doi=10.1109%2FSEAA.2016.45&partnerID=40&md5=e3b87d7bb7c6da1c262bba721c59b365},
	abstract = {Systematic literature reviews in software engineering are necessary to synthesize evidence from multiple studies to provide knowledge and decision support. However, synthesis methods are underutilized in software engineering research. Moreover, translation of synthesized data (outcomes of a systematic review) to provide recommendations for practitioners is seldom practiced. The objective of this paper is to introduce the use of Bayesian synthesis in software engineering research, in particular to translate research evidence into practice by providing the possibility to combine contextualized expert opinions with research evidence. We adopted the Bayesian synthesis method from health research and customized it to be used in software engineering research. The proposed method is described and illustrated using an example from the literature. Bayesian synthesis provides a systematic approach to incorporate subjective opinions in the synthesis process thereby making the synthesis results more suitable to the context in which they will be applied. Thereby, facilitating the interpretation and translation of knowledge to action/application. None of the synthesis methods used in software engineering allows for the integration of subjective opinions, hence using Bayesian synthesis can add a new dimension to the synthesis process in software engineering research. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Bayesian Synthesis; Decision-making; Evidence-based Software Engineering; Knowledge Translation; Application Programs; Decision Making; Decision Support Systems; Engineering Research; Bayesian; Decision Supports; Evidence Based Software Engineering; Knowledge Translation; Synthesis Method; Synthesis Process; Systematic Literature Review; Systematic Review; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Serna M.2016703,
	author = {Serna M., Edgar and Jiménez, Jorge Hernán Suaza},
	title = {Document requirements elicitation: A systematic review; Documentar la elicitación de requisitos: Una revisión sistemática},
	year = {2016},
	journal = {Ingeniare},
	volume = {24},
	number = {4},
	pages = {703 - 714},
	doi = {10.4067/S0718-33052016000400014},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85006043672&doi=10.4067%2FS0718-33052016000400014&partnerID=40&md5=7347742b41260a0e28306c2374da5f46},
	abstract = {Different researchers have proposed techniques and models for eliciting requirements, and most described process and recommendations to capture them, but there are few details on how to document with this step. Although the community has widely recognized the importance of engineering requirements, and elicitation of an important stage of this phase of software engineering, there have been few studies to guide engineers to document this elicitation. The importance of proper documentation of this step is that it allows a better understanding of customer and the user needs, and helps engineers to best perceive the problem, and model a solution that adequately reflected in the Specification. In this work are presented the results of a literature review, aimed at discovering, analyzing and comparing the proposals to document the elicitation of requirements. 73 works were consulted in the databases, of which 18 formed the final sample. The conclusion is that more work is missing on what to do with this documentation, because none of the studies analyzed directly and completely describes a proposal to do so. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Requirements; Requirements Documentation; Requirements Elicitation; Requirements Engineering; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Gold Open Access; Green Final Open Access; Green Open Access}
}

@CONFERENCE{Wohlin2016,
	author = {Wohlin, Claes},
	title = {Is there a Future for Empirical Software Engineering?},
	year = {2016},
	journal = {International Symposium on Empirical Software Engineering and Measurement},
	volume = {08-09-September-2016},
	pages = {},
	doi = {10.1145/2961111.2962641},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84991703795&doi=10.1145%2F2961111.2962641&partnerID=40&md5=7bb642f49f50721a0a303212206689dd},
	abstract = {Empirical studies of different kinds are nowadays regularly published in software engineering journals and conferences. Many empirical studies have been published, but are this sufficient? Individual studies are important, b ut the actual potential in relation to evidence-based software engineering [1] is not fully exploited. As a discipline we have to be able to go further to make our individual studies more useful. Other research should be able to leverage on the studies and industry should be able to make informed decisions based on the empirical research. There are several challenges related to making individual empirical studies useful in a broader context. Anyone having conducted a systematic literature review [2] has most likely experienced the problem of being able to synthesize the relevant studies. In all too many cases, we end up with a systematic mapping study [3], or in the best case something on the borderline between a review and a mapping study. This illustrates the need to write for synthesis [4], and in particular including sufficient contextual information to allow for synthesis [4]. Evidence-based software engineering [1] through the use of systematic literature studies (reviews and maps) has emerged. Methodological support and guidelines (e.g. [2], [3], [6] and [7]) for conducting systematic literature studies have been formulated and they should be carefully followed. However, more is needed! We still need to improve! The keynote is focused on the needs for the future as seen by the presenter. Synthesis has proven hard, and improvements are needed when it comes to both primary studies and secondary studies. It has been shown that the reliability of secondary studies can be challenged [8]. However, if we do manage to publish high quality primary studies, and we truly manage to conduct strong systematic literature reviews, we have a good basis for both building theories in software engineering and to enable industry to make informed decisions using scientific evidence. Unfortunately, this is not the situation today. Theories are mostly based on our own research, as exemplified by [9]. This is fine, but much more can be done if we can easier leverage on the research done by others to build theories. Furthermore, industry is often making decision related to processes, methods, techniques and tools before we manage to obtain sufficient evidence for recommendations. The points made above are highlighted using personal experiences from conducting systematic literature studies, collaborating with industry and research on developing an empirically based software engineering theory. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Research Methods; Synthesis; Systematic Reviews; Mapping; Synthesis (chemical); Empirical Research Method; Empirical Software Engineering; Evidence Based Software Engineering; Software Engineering Journals; Software Engineering Theories; Systematic Literature Review; Systematic Mapping Studies; Systematic Review; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Villarreal2016,
	author = {Villarreal, Vladimir and Hervas, Ramon and Bravo, José},
	title = {A Systematic Review for Mobile Monitoring Solutions in M-Health},
	year = {2016},
	journal = {Journal of Medical Systems},
	volume = {40},
	number = {9},
	pages = {},
	doi = {10.1007/s10916-016-0559-5},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84979690339&doi=10.1007%2Fs10916-016-0559-5&partnerID=40&md5=8e0691fae12e5ba5f7da1b157772eff7},
	abstract = {A systematic review allows us to identify, assess, and interpret all possible relevant work associated with a question in particular or the subject of an area. Different authors can use several methodologies to learn about research related to their own research in different fields. The main objective of this review is to identify work, research and publications made in the field of the mobile monitoring of patients through some application or commercial or non-commercial solutions in m-Health. Next, we compare the different solutions with our solution, MoMo (Mobile Monitoring) Framework. MoMo is a solution that allows for patient mobile monitoring through mobile phones and biometric devices (blood pressure meter, glucometer and others). Our systematic review is based on the methodology of B. Kitchenham. She proposed specific guidelines for carrying out a systematic review in software engineering. We prepare our systematic review base in the selection of primary and secondary research related to mobile monitoring solutions following criteria with a specific weight to compare with each part of our research. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {M-health; Mobile Monitoring; Systematic Review; Ubiquitous Computing; Article; Biometry; Blood Glucose Meter; Blood Pressure Meter; Computer Security; Health Care Cost; Human; Mobile Application; Mobile Phone; Patient Coding; Patient Information; Software Design; Telemonitoring; Computer System; Devices; Organization And Management; Physiologic Monitoring; Telemedicine; Cell Phones; Computer Systems; Humans; Monitoring, Physiologic; Telemedicine},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Sanchez Guinea2016251,
	author = {Sanchez Guinea, Alejandro and Nain, Grégory and Le Traon, Yves La},
	title = {A systematic review on the engineering of software for ubiquitous systems},
	year = {2016},
	journal = {Journal of Systems and Software},
	volume = {118},
	pages = {251 - 276},
	doi = {10.1016/j.jss.2016.05.024},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84971440974&doi=10.1016%2Fj.jss.2016.05.024&partnerID=40&md5=11a6e4bb181367d0fda9e5e1faa0be3d},
	abstract = {Context: Software engineering for ubiquitous systems has experienced an important and rapid growth, however the vast research corpus makes it difficult to obtain valuable information from it. Objective: To identify, evaluate, and synthesize research about the most relevant approaches addressing the different phases of the software development life cycle for ubiquitous systems. Method: We conducted a systematic literature review of papers presenting and evaluating approaches for the different phases of the software development life cycle for ubiquitous systems. Approaches were classified according to the phase of the development cycle they addressed, identifying their main concerns and limitations. Results: We identified 128 papers reporting 132 approaches addressing issues related to different phases of the software development cycle for ubiquitous systems. Most approaches have been aimed at addressing the implementation, evolution/maintenance, and feedback phases, while others phases such as testing need more attention from researchers. Conclusion: We recommend to follow existing guidelines when conducting case studies to make the studies more reproducible and closer to real life cases. While some phases of the development cycle have been extensively explored, there is still room for research in other phases, toward a more agile and integrated cycle, from requirements to testing and feedback. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Development Methods; Empirical Software Engineering; Evidence-based Software Engineering; Pervasive Systems; Research Synthesis; Software Development Cycle; Systematic Review; Ubiquitous Systems; Computer Software; Ubiquitous Computing; Development Method; Empirical Software Engineering; Evidence Based Software Engineering; Pervasive Systems; Research Synthesis; Software Development Cycles; Systematic Review; Ubiquitous Systems; Software Design},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@CONFERENCE{Garousi2016213,
	author = {Garousi, Vahid and Herkiloǧlu, Kadir},
	title = {Selecting the Right Topics for Industry-Academia Collaborations in Software Testing: An Experience Report},
	year = {2016},
	pages = {213 - 222},
	doi = {10.1109/ICST.2016.7},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84983288448&doi=10.1109%2FICST.2016.7&partnerID=40&md5=3cb7905d19b3b05ea441e02823bae2de},
	abstract = {The global software industry and the Software Engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations (IAC) in SE is still relatively very low, compared to the amount of activity in each of the two communities. Selecting the right topic for a new IAC has been reported to be challenging and often a deal-maker or-breaker for the start of IACs. Motivated by the above need, the goal of this paper is to propose experience-based guidelines from our 10+ software testing IACs in the past several years in Canada and Turkey to effectively and efficiently select right topics for IACs in software testing (also easily generalizable to other areas of SE), for the benefit of SE researchers and practitioners in starting new IACs. The experience and evidence supporting the guidelines in this paper are drawn from the authors' past projects and also seven on-going software-testing projects in the context of a large Turkish software and systems company. The topic-selection process has involved interaction with company representatives in the form of both multiple group discussions and separate face-to-face meetings while utilizing grounded-theory to find (converge to) topics which would be 'interesting' and useful from both industrial and academic perspectives. To increase the success of our topic selection process, we also utilized two other sources of information from the literature: (1) a set of four fitness criteria for topic selection in industry experiments, and (2) challenges and best practices for IAC, specific to project inception, as synthesized in a recent systematic literature review. We believe the results of this paper would be helpful for other researchers and practitioners not only in software testing but also in software engineering in general in increasing their chances of success in project inception and topic selection phase. © 2016 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Study; Experience Report; Grounded Theory; Industry-academia Collaborations; Software Engineering; Software Testing; Topic Selection; Group Theory; Software Engineering; Verification; Amount Of Activities; Empirical Studies; Experience Report; Face-to-face Meetings; Grounded Theory; Sources Of Informations; Systematic Literature Review; Topic Selection; Software Testing},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{2016,
	title = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
	year = {2016},
	journal = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
	volume = {0},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85172607773&partnerID=40&md5=919ff8021ccb4e499e1f3ec3387e3e31},
	abstract = {The proceedings contain 58 papers. The topics discussed include: task recommendation with developer social network in software crowdsourcing; EXPSOL: recommending online threads for exception-related bug reports; retrieving design pattern usage examples using domain matching; LibSift: automated detection of third-party libraries in Android applications; does the role matter? an investigation of the code quality of casual contributors in GitHub; a model checking based approach for containment checking of UML sequence diagrams; model driven software security architecture of systems-of-systems; analytical study of cognitive layered approach for understanding security requirements using problem domain ontology; a map of threats to validity of systematic literature reviews in software engineering; heterogeneous cross-company effort estimation through transfer learning; an algorithmic-based change effort estimation model for software development; achieving high code coverage in Android UI testing via automated widget exercising; testing android apps via guided gesture event generation; model-based API-call constraint checking for automotive control software; and minimalist qualitative models for model checking cyber-physical feature coordination. © 2023 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Irshad2016,
	author = {Irshad, Mohsin and Torkar, Richard and Petersen, Kai and Afzal, Wasif},
	title = {Capturing cost avoidance through reuse: Systematic literature review and industrial evaluation},
	year = {2016},
	journal = {ACM International Conference Proceeding Series},
	volume = {01-03-June-2016},
	pages = {},
	doi = {10.1145/2915970.2915989},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84978540065&doi=10.1145%2F2915970.2915989&partnerID=40&md5=ef7e70274d62aa2e9a0dd882f04006f9},
	abstract = {Background: Cost avoidance through reuse shows the benefits gained by the software organisations when reusing an artefact. Cost avoidance captures benefits that are not captured by cost savings e.g. spending that would have increased in the absence of the cost avoidance activity. This type of benefit can be combined with quality aspects of the product e.g. costs avoided because of defect prevention. Cost avoidance is a key driver for software reuse. Objectives: The main objectives of this study are: (1) To assess the status of capturing cost avoidance through reuse in the academia; (2) Based on the first objective, propose improvements in capturing of reuse cost avoidance, integrate these into an instrument, and evaluate the instrument in the software industry. Method: The study starts with a systematic literature review (SLR) on capturing of cost avoidance through reuse. Later, a solution is proposed and evaluated in the industry to address the shortcomings identified during the systematic literature review. Results: The results of a systematic literature review describe three previous studies on reuse cost avoidance and show that no solution, to capture reuse cost avoidance, was validated in industry. Afterwards, an instrument and a data collection form are proposed that can be used to capture the cost avoided by reusing any type of reuse artefact. The instrument and data collection form (describing guidelines) were demonstrated to a focus group, as part of static evaluation. Based on the feedback, the instrument was updated and evaluated in industry at 6 development sites, in 3 different countries, covering 24 projects in total. Conclusion: The proposed solution performed well in industrial evaluation. With this solution, practitioners were able to do calculations for reuse costs avoidance and use the results as decision support for identifying potential artefacts to reuse. © 2016 Elsevier B.V., All rights reserved.},
	author_keywords = {Cost Avoidance; Cost Savings; Software Reuse; Costs; Data Acquisition; Decision Support Systems; Software Engineering; Cost Avoidances; Cost Saving; Decision Supports; Defect Prevention; Industrial Evaluations; Software Organisations; Systematic Literature Review; Systematic Literature Review (slr); Computer Software Reusability},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Garousi2016,
	author = {Garousi, Vahid and Felderer, Michael and Mäntylä, Mika V.},
	title = {The need for multivocal literature reviews in software engineering: Complementing systematic literature reviews with grey literature},
	year = {2016},
	journal = {ACM International Conference Proceeding Series},
	volume = {01-03-June-2016},
	pages = {},
	doi = {10.1145/2915970.2916008},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84978496329&doi=10.1145%2F2915970.2916008&partnerID=40&md5=1e186d71278a0754acfafd58faa831d5},
	abstract = {Systematic Literature Reviews (SLR) may not provide insight into the "state of the practice" in SE, as they do not typically include the "grey" (non-published) literature. A Multivocal Literature Review (MLR) is a form of a SLR which includes grey literature in addition to the published (formal) literature. Only a few MLRs have been published in SE so far. We aim at raising the awareness for MLRs in SE by addressing two research questions (RQs): (1) What types of knowledge are missed when a SLR does not include the multivocal literature in a SE field? and (2) What do we, as a community, gain when we include the multivocal literature and conduct MLRs? To answer these RQs, we sample a few example SLRs and MLRs and identify the missing and the gained knowledge due to excluding or including the grey literature. We find that (1) grey literature can give substantial benefits in certain areas of SE, and that (2) the inclusion of grey literature brings forward certain challenges as evidence in them is often experience and opinion based. Given these conflicting viewpoints, the authors are planning to prepare systematic guidelines for performing MLRs in SE. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Software Engineering; Grey Literature; Mlr; Multivocal Literature Reviews; Research Methodology; Slr; Systematic Literature Reviews; Computer Applications; Computer Programming; Empirical Software Engineering; Grey Literature; Literature Reviews; Research Methodologies; Systematic Literature Review; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Fernandes2016,
	author = {Fernandes, Eduardo Augusto Militão and Oliveira, Johnatan and Vale, Gustavo and Paiva, Thanis and Figueiredo, Eduardo Magno Lages},
	title = {A review-based comparative study of bad smell detection tools},
	year = {2016},
	journal = {ACM International Conference Proceeding Series},
	volume = {01-03-June-2016},
	pages = {},
	doi = {10.1145/2915970.2915984},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84978468668&doi=10.1145%2F2915970.2915984&partnerID=40&md5=6da848a87faae7d7a8011bdf0aa7cb32},
	abstract = {Bad smells are symptoms that something may be wrong in the system design or code. There are many bad smells defined in the literature and detecting them is far from trivial. Therefore, several tools have been proposed to automate bad smell detection aiming to improve software maintainability. However, we lack a detailed study for summarizing and comparing the wide range of available tools. In this paper, we first present the findings of a systematic literature review of bad smell detection tools. As results of this review, we found 84 tools; 29 of them available online for download. Altogether, these tools aim to detect 61 bad smells by relying on at least six different detection techniques. They also target different programming languages, such as Java, C, C++, and C#. Following up the systematic review, we present a comparative study of four detection tools with respect to two bad smells: Large Class and Long Method. This study relies on two software systems and three metrics for comparison: agreement, recall, and precision. Our findings support that tools provide redundant detection results for the same bad smell. Based on quantitative and qualitative data, we also discuss relevant usability issues and propose guidelines for developers of detection tools. © 2016 Elsevier B.V., All rights reserved.},
	author_keywords = {Bad Smells; Comparative Study; Detection Tools; Systematic Literature Review; Computer Programming; Inspection Equipment; Java Programming Language; Object Oriented Programming; Odors; Software Engineering; Bad Smells; Comparative Studies; Detection Tools; Qualitative Data; Software Maintainability; Software Systems; Systematic Literature Review; Systematic Review; C++ (programming Language)},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{de França20161302,
	author = {de França, Breno Bernard Nicolau and Travassos, Guilherme Horta},
	title = {Experimentation with dynamic simulation models in software engineering: planning and reporting guidelines},
	year = {2016},
	journal = {Empirical Software Engineering},
	volume = {21},
	number = {3},
	pages = {1302 - 1345},
	doi = {10.1007/s10664-015-9386-4},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84930526496&doi=10.1007%2Fs10664-015-9386-4&partnerID=40&md5=197c0d555c3040e4c8572c69336c106a},
	abstract = {Simulation-based studies (SBS) have become an interesting investigation approach for Software Engineering (SE). However, the reports on experiments with dynamic simulation models found in the technical literature lack relevant information, hampering the full understanding of the procedures and results reported, as well as their replicability. Apart from the limitations on the length in conferences and journal papers, some of the relevant information seems to be missing due to methodological issues not considered when conducting such studies. This is the case of missing research questions and goals, lack of evidence regarding the dynamic simulation model validity, poorly designed simulation experiments, amongst others. Based on findings from a previous quasi-systematic literature review, we propose a set of reporting guidelines for SBS with dynamic models in the context of SE aiming at providing guidance on which information the report should contain. Furthermore, these guidelines were evolved to support SBS planning by identifying potential threats to simulation study validity and in making recommendations to avoid them, through qualitative analysis and external evaluation. Finally, we conducted different evaluations regarding both the reporting and planning guidelines, apart from using them to support the planning of a SBS as regards software evolution. A set of 33 reporting and planning guidelines for different stages of the simulation lifecycle and focused on the experimentation with dynamic simulation models have been put together. The first assessments point to a comprehensive set of guidelines, supporting a comprehensive preparation and review of the plans and reports from the studies, apart from the planning of a SBS focused on software evolution, potentially reducing the threats to the experimentation with the validity of dynamic simulation models. The 33 guidelines cannot be understood as separate groups for reporting and planning as they overlap in many aspects. The main goal is to use the guidelines to support the planning of a simulation-based study with dynamic models so that experimenters may identify potential threats to validity and produce relevant information for a complete simulation experiment report in advance. Despite their initial contribution to increase the validity of SBS, the reporting and planning of simulation-based experiments with dynamic models still has to be discussed and improved in SE. Therefore, additional assessments of this set of guidelines are needed to strengthen the confidence in their completeness and usefulness. © 2016 Elsevier B.V., All rights reserved.},
	author_keywords = {Guidelines; Planning; Reporting; Simulation-based Studies; Software Engineering; Computer Software; Planning; Software Engineering; Guidelines; Planning Guidelines; Qualitative Analysis; Reporting; Simulation-based Studies; Software Evolution; Systematic Literature Review; Technical Literature; Dynamic Models},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Neiva2016137,
	author = {Neiva, Frâncila Weidt and David, José Maria N. and Braga, Regina Maria Maciel and Campos, Fernanda Cláudia Alves},
	title = {Towards pragmatic interoperability to support collaboration: A systematic review and mapping of the literature},
	year = {2016},
	journal = {Information and Software Technology},
	volume = {72},
	pages = {137 - 150},
	doi = {10.1016/j.infsof.2015.12.013},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84958667521&doi=10.1016%2Fj.infsof.2015.12.013&partnerID=40&md5=300ef5d73689deab1fb063fbfe5ddcb5},
	abstract = {Context: Many researchers have argued that providing interoperability support only considering the format and meaning (i.e. syntax and semantic) of data exchange is not enough to achieve complete, effective and meaningful collaboration. Pragmatic interoperability has been highlighted as a key requirement to enhance collaboration. However, fulfilling this requirement is not a trivial task and there is a lack of works discussing solutions to achieve this level of interoperability. Objectives: The aim of this study is to present a systematic review and mapping of the literature in order to identify, analyse and classify the published solutions to achieve pragmatic interoperability. Method: To conduct a systematic review and mapping in accordance with the guidelines proposed in the evidence-based software engineering literature. Results: Our study identified 13 papers reporting pragmatic interoperability computational solutions. The first paper in our set of selected papers was published in 2004; the main strategies used to address pragmatic interoperability issues were service discovery, composition and/or selection and ontologies. The application domain of the identified solutions was mainly e-business. In addition, most of the identified solutions were software architectures. Conclusion: Mature proposals addressing pragmatic interoperability are still rare in the literature. Although many works have discussed the importance of pragmatic interoperability, it is necessary that researchers report solutions that implement and evaluate pragmatic interoperability in order to make progress in this area. © 2016 Elsevier B.V., All rights reserved.},
	author_keywords = {Collaboration; Collaborative Systems; Groupware; Interoperability; Pragmatic Interoperability; Electronic Data Interchange; Groupware; Mapping; Semantics; Software Engineering; Collaboration; Collaborative Systems; Computational Solutions; Ebusiness; Evidence Based Software Engineering; Service Discovery; Systematic Review; Interoperability},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Sobernig2016140,
	author = {Sobernig, Stefan and Hoisl, Bernhard and Strembeck, Mark},
	title = {Extracting reusable design decisions for UML-based domain-specific languages: A multi-method study},
	year = {2016},
	journal = {Journal of Systems and Software},
	volume = {113},
	pages = {140 - 172},
	doi = {10.1016/j.jss.2015.11.037},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84962437221&doi=10.1016%2Fj.jss.2015.11.037&partnerID=40&md5=00e925debab5603002ffc285e279359e},
	abstract = {When developing domain-specific modeling languages (DSMLs), software engineers have to make a number of important design decisions on the DSML itself, or on the software-development process that is applied to develop the DSML. Thus, making well-informed design decisions is a critical factor in developing DSMLs. To support this decision-making process, the model-driven development community has started to collect established design practices in terms of patterns, guidelines, story-telling, and procedural models. However, most of these documentation practices do not capture the details necessary to reuse the rationale behind these decisions in other DSML projects. In this paper, we report on a three-year research effort to compile and to empirically validate a catalog of structured decision descriptions (decision records) for UML-based DSMLs. This catalog is based on design decisions extracted from 90 DSML projects. These projects were identified - among others - via an extensive systematic literature review (SLR) for the years 2005-2012. Based on more than 8,000 candidate publications, we finally selected 84 publications for extracting design-decision data. The extracted data were evaluated quantitatively using a frequent-item-set analysis to obtain characteristic combinations of design decisions and qualitatively to document recurring documentation issues for UML-based DSMLs. We revised the collected decision records based on this evidence and made the decision-record catalog for developing UML-based DSMLs publicly available. Furthermore, our study offers insights into UML usage (e.g. diagram types) and into the adoption of UML extension techniques (e.g. metamodel extensions, profiles). © 2016 Elsevier B.V., All rights reserved.},
	author_keywords = {Design Decision; Design Rationale; Domain-specific Language; Domain-specific Modeling; Model-driven Development; Unified Modeling Language; Computational Linguistics; Computer Programming Languages; Decision Making; Embedded Systems; Graphical User Interfaces; Modeling Languages; Problem Oriented Languages; Software Design; Software Engineering; Specification Languages; Unified Modeling Language; Design Decisions; Design Rationale; Domain Specific Languages; Domain Specific Modeling; Model Driven Development; Design},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Gašparič2016101,
	author = {Gašparič, Marko and Janes, Andrea A.},
	title = {What recommendation systems for software engineering recommend: A systematic literature review},
	year = {2016},
	journal = {Journal of Systems and Software},
	volume = {113},
	pages = {101 - 113},
	doi = {10.1016/j.jss.2015.11.036},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84962376126&doi=10.1016%2Fj.jss.2015.11.036&partnerID=40&md5=898513f74f7e2201202cf4daf3c313a5},
	abstract = {A recommendation system for software engineering (RSSE) is a software application that provides information items estimated to be valuable for a software engineering task in a given context. Present the results of a systematic literature review to reveal the typical functionality offered by existing RSSEs, research gaps, and possible research directions. We evaluated 46 papers studying the benefits, the data requirements, the information and recommendation types, and the effort requirements of RSSE systems. We include papers describing tools that support source code related development published between 2003 and 2013. The results show that RSSEs typically visualize source code artifacts. They aim to improve system quality, make the development process more efficient and less expensive, lower developer's cognitive load, and help developers to make better decisions. They mainly support reuse actions and debugging, implementation, and maintenance phases. The majority of the systems are reactive. Unexploited opportunities lie in the development of recommender systems outside the source code domain. Furthermore, current RSSE systems use very limited context information and rely on simple models. Context-adapted and proactive behavior could improve the acceptance of RSSE systems in practice. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Recommendation System For Software Engineering; Systematic Literature Review; Application Programs; Codes (symbols); Computer Programming Languages; Context Information; Data Requirements; Development Process; Information Items; Proactive Behavior; Recommendation Systems For Software Engineerings; Software Applications; Systematic Literature Review; Recommender Systems},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Najafabadi2016167,
	author = {Najafabadi, Maryam Khanian and Naz’ri Mahrin, Mohd Naz Ri Bin},
	title = {A systematic literature review on the state of research and practice of collaborative filtering technique and implicit feedback},
	year = {2016},
	journal = {Artificial Intelligence Review},
	volume = {45},
	number = {2},
	pages = {167 - 201},
	doi = {10.1007/s10462-015-9443-9},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84954375447&doi=10.1007%2Fs10462-015-9443-9&partnerID=40&md5=97c1d4e941f9eb1714dc8cc3f147f048},
	abstract = {User profiles in collaborative filtering (CF) recommendation technique are built based on ratings given by users on a set of items. The most eminent shortcoming of the CF technique is the sparsity problem. This problem refers to the low ratio of rated items by users to the total number of available items; hence the quality of recommendation will be affected. Most researchers use implicit data as a solution for sparsity problem, to decrease the dependency of CF technique on the user’s rating and this term is more common in this field. The aim of this research is to aggregate evidence on state of research and practice of CF and implicit data applying systematic literature review (SLR) which is a method for evidence-based software engineering (EBSE). EBSE has the potential value for synthesizing evidence and make this evidence available to practitioners and researchers with providing the best references and appropriate software engineering solutions for sparsity problem. We executed the standard systematic literature review method using a manual search in 5 prestigious databases and 38 studies were finally included for analyzing. This paper follows manifestation of Kitchenham’s SLR guidelines and describes in a great detail the process of selecting and analyzing research papers. This paper is first academic systematic literature review of CF technique along with implicit data from user behaviors and activities to aggregate existing evidence as a synthesis of best quality scientific studies. The 38 research papers are categorized into eleven application fields (movie, shopping, books, Social systems, music and others) and six data mining techniques (dimensionality reduction, association rule, heuristic methods and other). According to the review results, neighborhood formation is a relevant aspect of CF and it can be improved with the use of user-item preference matrix as implicit feedback mechanism, the most common domains of CF are in e-commerce and movie software applications. © 2016 Elsevier B.V., All rights reserved.},
	author_keywords = {Collaborative Filtering; Evidence-based Software Engineering; Implicit Feedback; Sparsity Problem; Systematic Literature Review; User Activities; Aggregates; Application Programs; Behavioral Research; Data Mining; Feedback; Heuristic Methods; Software Engineering; Evidence Based Software Engineering; Implicit Feedback; Sparsity Problems; Systematic Literature Review; User Activity; Collaborative Filtering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{de Paula2016222,
	author = {de Paula, Antonio Carlos Marcelino and Carneiro, Glauco de Figueiredo},
	title = {A systematic literature review on cloud computing adoption and migration},
	year = {2016},
	journal = {Communications in Computer and Information Science},
	volume = {703},
	pages = {222 - 243},
	doi = {10.1007/978-3-319-56390-9_11},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85019098416&doi=10.1007%2F978-3-319-56390-9_11&partnerID=40&md5=a8b7bc7c4339ed17fc221c39ae09ab1f},
	abstract = {Context: The appealing features of Cloud computing has attracted the attention of the research and the industry due to the possibility of providing a customizable and resourceful platform to deploy software. There is a myriad of competing providers and available services that can provide organizations the access to computing services without owning the corresponding infrastructure. Goal: Identify the opportunities to migrate to the cloud, the challenges, difficulties and factors that affect the cost-benefit relationship of such adoption. Method: In our previous work, we performed a systematic review to identify the approaches adopted by organizations to migrate to cloud computing and their perception of the cost-benefit of this migration. In this paper, we extended our previous work through a new search in the selected repositories to identify studies published from June 2015 to June 2016. Results: We concluded from the collected data that a significant part of the companies perceived inclination towards the innovative adoption process influenced by technological, organizational and environmental contexts. Conclusion: The results in this systematic literature review can help the development of guidelines to support newcomers companies to adopt and migrate to the cloud, how the cost-benefit relationship can be evaluated as well as the selection of providers. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Cloud Computing; Cloud Migration; Cost-benefit Relationship; Provider Selection; Systematic Literature Review; Cloud Computing; Cost Benefit Analysis; Costs; Network Function Virtualization; Software Engineering; Adoption Process; Cloud Migrations; Computing Services; Cost Benefits; Environmental Contexts; Provider Selection; Systematic Literature Review; Systematic Review; Distributed Computer Systems},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Maric201656,
	author = {Maric, Mirjana and Matković, Predrag and Tumbas, Pere and Pavlicevic, Veselin},
	title = {Documenting agile architecture: Practices and recommendations},
	year = {2016},
	journal = {Lecture Notes in Business Information Processing},
	volume = {264},
	pages = {56 - 71},
	doi = {10.1007/978-3-319-46642-2_4},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84988837633&doi=10.1007%2F978-3-319-46642-2_4&partnerID=40&md5=37965c92d04062a1933d50e413fbcc4a},
	abstract = {Architecture is the foundation of every software product, regardless of the process used for its development. Traditional architecture development based on three architectural phases-architectural analysis, synthesis and evaluation is considered highly ceremonial, due to the great number of artifacts it produces. In agile development, architecture is generated gradually with each iteration, as a result of continuous code refactoring, not some predefined structure. In other words, agile processes do not include any of the traditional phases (analysis, synthesis, and evaluation) of the architecture development process, while self-documenting code is the predominant form agile architecture documentation. Excessive documentation is considered wasteful in agile development processes. However, complete elimination of documentation results in “evaporation” of architectural information and knowledge, which may compromise the entire development process. Therefore, development of complex software systems requires an architecture documenting strategy positioned between the described extremes. This paper presents results of theoretical and empirical research on documenting software architecture in agile development processes. Subsequent to the systematic literature review, an empirical research based on the classic Delphi method was carried out on a sample of 20 expert practitioners. In addition to an overview of current architecture documenting practices, the paper proposes structures of two artifacts for documenting agile architecture of complex systems, developed with regard to the results of the empirical research. These artifacts contain short descriptions of architectural decisions and rationale behind them. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile Software Development; Architecture Documentation; Software Architecture; Agile Manufacturing Systems; Information Systems; Iterative Methods; Software Architecture; Software Engineering; Agile Architectures; Agile Software Development; Architectural Analysis; Architectural Decision; Architecture Development Process; Complex Software Systems; Systematic Literature Review; Traditional Architecture; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Anu2016531,
	author = {Anu, Vaibhav K. and Walia, Gursimran Singh and Hu, Wenhua and Carver, Jeffrey C. and Bradshaw, Gary L.},
	title = {Effectiveness of human error taxonomy during requirements inspection: An empirical investigation},
	year = {2016},
	journal = {Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE},
	volume = {2016-January},
	pages = {531 - 536},
	doi = {10.18293/SEKE2016-177},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84988385355&doi=10.18293%2FSEKE2016-177&partnerID=40&md5=13ef71c19f8a3df302fc43151ade9e37},
	abstract = {Software inspections are an effective method for achieving high quality software. We hypothesize that inspections focused on identifying errors (i.e., root cause of faults) are better at finding requirements faults when compared to inspection methods that rely on checklists created using lessons-learned from historical fault-data. Our previous work verified that, error based inspections guided by an initial requirements errors taxonomy (RET) performed significantly better than standard fault-based inspections. However, RET lacked an underlying human information processing model grounded in Cognitive Psychology research. The current research reports results from a systematic literature review (SLR) of Software Engineering and Cognitive Science literature - Human Error Taxonomy (HET) that contains requirements phase human errors. The major contribution of this paper is a report of control group study that compared the fault detection effectiveness and usefulness of HET with the previously validated RET. Results of this study show that subjects using HET were not only more effective at detecting faults, but they found faults faster. Post-hoc analysis of HET also revealed meaningful insights into the most commonly occurring human errors at different points during requirements development. The results provide motivation and feedback for further refining HET and creating formal inspection tools based on HET. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Study; Human Error; Requirements Inspection; Taxonomy; Bionics; Computer Software Selection And Evaluation; Fault Detection; Inspection; Knowledge Engineering; Software Engineering; Systematic Errors; Taxonomies; Cognitive Psychology; Empirical Investigation; Empirical Studies; Fault Detection Effectiveness; High-quality Software; Human Errors; Human Information-processing Model; Systematic Literature Review (slr); Errors},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Bronze Open Access}
}

@ARTICLE{van der Linden2016222,
	author = {van der Linden, Dirk and Hadar, Irit},
	title = {Evaluating the evaluators: An analysis of cognitive effectiveness improvement efforts for visual notations},
	year = {2016},
	pages = {222 - 227},
	doi = {10.5220/0005895802220227},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84979642913&doi=10.5220%2F0005895802220227&partnerID=40&md5=41fec7689ff39b0aafaa517f521d3686},
	abstract = {This position paper presents the preliminary findings of a systematic literature review of applications of the Physics of Notations: a recently dominant framework for assessing the cognitive effectiveness of visual notations. We present our research structure in detail and discuss some initial findings, such as the kinds of notations the PoN has been applied to, whether its usage is justified and to what degree users are involved in eliciting requirements for the notation before its application. We conclude by summarizing and briefly discussing further analysis to be done and valorization of such results as guidelines for better application. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Modeling Languages; Requirements Engineering; User-centered Software Engineering; Visual Notations; Modeling Languages; Requirements Engineering; Software Engineering; Its Applications; Physics Of Notations; Position Papers; Research Structure; Systematic Literature Review; User-centered; Visual Notations; Visual Languages},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Final Open Access; Green Open Access}
}

@ARTICLE{de Paula201627,
	author = {de Paula, Antonio Carlos Marcelino and Carneiro, Glauco de Figueiredo},
	title = {Cloud computing adoption, cost-benefit relationship and strategies for selecting providers: A systematic review},
	year = {2016},
	pages = {27 - 39},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84979536674&partnerID=40&md5=4093c7c7c1b94e95857c9766d025019a},
	abstract = {Context: Cloud computing has been one of the most promising computing paradigms in industry to provide a customizable and resourceful platform to deploy software. There are a number of competing providers and available services that allows organizations to access computing services without owning the corresponding infrastructure. Goal: Identify the main characteristics of opportunities to migrate to the cloud, the respective challenges and difficulties as well as factors that affect the cost-benefit relationship of such adoption. Method: This paper presents a systematic literature review to compare reported strategies of organizations to migrate and adopt cloud computing and their perception of the cost-benefit of this adoption. Results: The overall data collected from these studies depicts that a significant part of the companies perceived inclination towards for the innovation adoption process influenced by technological, organizational and environmental contexts. Conclusion: Due to the variety of strategies, approaches and tools reported in the primary studies, it is expected that the results in this systematic literature review would help in establishing knowledge on how the companies should adopt and migrate to the cloud, how the cost-benefit relationship can be evaluated as well as providers can be selected. These findings can be a useful reference to develop guidelines for an effective use of cloud computing. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Cloud Computing; Cloud Migration; Cost-benefit Relationship; Provider Selection; Systematic Literature Review; Cloud Computing; Cost Benefit Analysis; Costs; Software Engineering; Cloud Migrations; Computing Paradigm; Computing Services; Cost Benefits; Environmental Contexts; Innovation Adoption; Provider Selection; Systematic Literature Review; Distributed Computer Systems},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Kossak2016213,
	author = {Kossak, Felix and Mashkoor, Atif},
	title = {How to select the suitable formal method for an industrial application: A survey},
	year = {2016},
	journal = {Lecture Notes in Computer Science},
	volume = {9675},
	pages = {213 - 228},
	doi = {10.1007/978-3-319-33600-8_13},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84978646513&doi=10.1007%2F978-3-319-33600-8_13&partnerID=40&md5=3939588685a2fc7fa5ed7db75eb8809c},
	abstract = {The share of formal methods is still marginal in contemporary systems and software engineering. One of the reasons is the absence of systematic guidelines and evaluation criteria that help software practitioners choose the right formal method for the problem at hand. In this paper, we present a comprehensive set of criteria, based on a systematic literature review and decade-long personal experience in industrial projects, for evaluating and comparing different formal methods. We argue that besides technical grounds (e.g.,modeling capabilities and supported development phases), formal methods should also be evaluated from social and industrial perspectives. At the end of the paper, we present an evaluation of “ABZ” methods based on the stipulated criteria. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Software Engineering; Development Phasis; Evaluation Criteria; Industrial Projects; Personal Experience; Software Practitioners; Systematic Literature Review; Systems And Software; Formal Methods},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{da Silva2016603,
	author = {da Silva, Gledston Carneiro and Carneiro, Glauco de Figueiredo},
	title = {Software process improvement in small and medium enterprises: A systematic literature review},
	year = {2016},
	journal = {Advances in Intelligent Systems and Computing},
	volume = {448},
	pages = {603 - 613},
	doi = {10.1007/978-3-319-32467-8_53},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84962637040&doi=10.1007%2F978-3-319-32467-8_53&partnerID=40&md5=ad2ec5d719071344748371ebc9aee538},
	abstract = {The knowledge of characteristics and profile of a company is the key to plan its software process improvement. It helps focusing efforts to promote alignment with organizational culture and to support the consolidation of best practices already implemented. This paper presents a systematic literature review to identify evidences in the literature related to the challenges and opportunities of the adoption of software process improvement in small and medium enterprises. The results from the study indicate that there are relevant issues that can be considered in the effective adoption of software engineering best practices in small and medium enterprises. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Small And Medium Enterprises; Software Process Improvement; Software Quality; Systematic Literature Review; Computer Software Selection And Evaluation; Enterprise Software; Best Practices; Engineering Best Practice; Organizational Cultures; Small-and-medium Enterprise; Software Process Improvement; Software Quality; Systematic Literature Review; Process Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Febrero201618,
	author = {Febrero, Felipe and Calero, Coral and Moraga, Mª Ángeles},
	title = {Software reliability modeling based on ISO/IEC SQuaRE},
	year = {2016},
	journal = {Information and Software Technology},
	volume = {70},
	pages = {18 - 29},
	doi = {10.1016/j.infsof.2015.09.006},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84949431570&doi=10.1016%2Fj.infsof.2015.09.006&partnerID=40&md5=456ca1a47280e7d053dc8b17c69bed95},
	abstract = {Context: The increasing dependence of our society on software driven systems has led Software Reliability to become a key factor as well as making it a highly active research area with hundreds of works being published every year. It would, however, appear that this activity is much more reduced as regards how to apply representative international standards on Product Quality to industrial environments, with just a few works on Standard Based software reliability modeling (SB-SRM). This is surprising given the relevance of such International Standards in industry. Objective: To identify and analyze the existing works on the modeling of Software Reliability based on International Standards as the starting point for a reliability assessment proposal based on ISO/IEC-25000 "Software Product Quality Requirements and Evaluation" (SQuaRE) series. Method: The work methodology is based on the guidelines provided in Evidence Based Software Engineering for Systematic Literature Reviews (SLR). Results: A total of 1820 works were obtained as a result of the SLR search, more than 800 primary studies were selected after data filtering. After scrutiny, over thirty of those were thoroughly analyze, the results obtained show a very limited application of SB-SRM particularly to industrial environment. Conclusion: Our analysis point to the complexity of the proposed models together with the difficulties involved in applying them to the management of engineering activities as a root cause to be considered for such limited application. The various stakeholder needs are also a point of paramount importance that should be better covered if the industrial applicability of the proposed models is to be increased. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {International Standard; Software Quality; Software Reliability Modeling; Square; Computer Software Selection And Evaluation; Quality Control; Reliability; Software Engineering; Standards; Evidence Based Software Engineering; Industrial Environments; International Standards; Software Product Quality; Software Quality; Software Reliability Models; Square; Systematic Literature Review (slr); Software Reliability},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Haselberger20161,
	author = {Haselberger, David},
	title = {A literature-based framework of performance-related leadership interactions in ICT project teams},
	year = {2016},
	journal = {Information and Software Technology},
	volume = {70},
	pages = {1 - 17},
	doi = {10.1016/j.infsof.2015.09.003},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84949428305&doi=10.1016%2Fj.infsof.2015.09.003&partnerID=40&md5=2001e1ef6995afdf8eb14d45f9bd5ff7},
	abstract = {Context: In Information and Communication Technology (ICT) projects, leadership interactions affect project team performance and so influence the outcomes of projects. While aspects of team performance have been vastly researched, leadership skills and interactions specific to the challenges of ICT project environments remain less investigated. Objective: A taxonomy of leadership interactions is developed and descriptions of interactions are collected to form a framework of leadership interactions that support team performance in ICT projects. Method: A systematic literature review was conducted to find resources on supportive leadership interactions in ICT project teams, including categorization schemas of leadership functions and behaviors. The review was limited by the selection of sources to be searched and comprises articles from 1977 until early 2014. The developed taxonomy was compared to benchmark work on team leadership. Risks and challenges of leading ICT project teams as well as descriptions of interactions were collected. Results: Throughout the search process, 2780 articles were examined, 218 of which were included in the review. 62 articles qualified to be accepted, 156 were rejected. 20 (including 4 meta-studies) papers holding leadership interaction categories were selected as taxonomy papers. The developed taxonomy holds 18 key dimensions of leadership team interaction. 13 areas of risks and challenges were discerned. 262 leadership interaction descriptions relevant in ICT project teams were retrieved. Conclusions: In collected studies, the categories "systems sensing", "planning and scheduling", "coaching", as well as "monitoring and controlling" were highly developed. Many risks deal with project complexity and interpersonal processes. However, leadership interactions addressing these challenges are scarce, indicating a research gap. Furthermore, prominent leadership team interactions such as monitoring or consulting may need to be adapted to deal with challenges specific to ICT project teams. Few studies describe best-practice examples of leadership interaction in ICT teams. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Classification; Clustering; Interpersonal Interaction; Leadership; Project Team; Team Performance; Classification (of Information); Information Systems; Software Engineering; Clustering; Interpersonal Interaction; Leadership; Project Team; Team Performance; Taxonomies},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Al-Baik20151861,
	author = {Al-Baik, Osama and Miller, James},
	title = {The kanban approach, between agility and leanness: a systematic review},
	year = {2015},
	journal = {Empirical Software Engineering},
	volume = {20},
	number = {6},
	pages = {1861 - 1897},
	doi = {10.1007/s10664-014-9340-x},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84944357875&doi=10.1007%2Fs10664-014-9340-x&partnerID=40&md5=4e445da4568469c70ee0cd1516dd0c16},
	abstract = {The interest in lean product development in general and the Kanban approach in particular has increased over the years. However, practitioners, in the software development field, have significant challenges in implementing the Kanban approach as it lacks a clear definition of its principles, practices, techniques and tools. This study aims to provide insight into the Kanban approach and its elements (concepts, principles, practices, techniques, and tools) that have been empirically reported by scholars and practitioners. This insight is produced by using the systematic review method to analyze the available literature. A total of 37 primary studies were selected from more than 3,000 unique studies. Our findings show that the primary studies have considered and reported 20 different elements as part of the Kanban approach based upon considerations of being an agile approach or a lean principle; these elements have realized great benefits and improvements to the software development teams. These benefits along with the challenges have been reported in this study. Due to the variety of organization types, contexts, and project sizes reported in the primary studies, it is expected that the results in this study would help in establishing knowledge on what are the different elements of the Kanban approach as well as offering a first step towards developing guidelines for practitioners to help in introducing the Kanban approach to software development organizations. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile; Kanban; Lean; Process Improvement; Software Development; Software Engineering; Systematic Review; Product Development; Software Engineering; Agile; Kanban; Lean; Process Improvement; Systematic Review; Software Design},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Hashim201555,
	author = {Hashim, Siti Noorasmah and Abdullah, Rusli Haji and Ibrahim, Hamidah D.},
	title = {Collaborative Knowledge Management System Strategic Planning (CKMS2P): A Systematic Literature Review},
	year = {2015},
	pages = {55 - 60},
	doi = {10.1109/ICSECS.2015.7333083},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84962052420&doi=10.1109%2FICSECS.2015.7333083&partnerID=40&md5=bd8231e38a486877ad5ab0ac92682419},
	abstract = {This paper is aimed to identify and review the previous studies pertaining to CKMS<sup>2</sup>P via a systematic and rigorous approach. The objective is to investigate the strategic plan or guideline on how to develop and implement an effective collaborative knowledge management system (KMS) in order to ease the decision making process. Systematic Literature Review (SLR) method is used to produce a strategic searching method to select, extract, review and discuss relevant studies concerning the research subject by adapting the guidelines established by [11]. A total of 12 previous studies carried out from 2010 till 2014 have been selected to fulfil this objective through thorough selection. Finding shows that there is a very limited study focusing on the strategic implementation of a KMS to enhance the quality of knowledge services in a collaborative environment. Although there is an increase in the studies that recommended KMS guidelines or strategic planning, the proposed solution were mostly unverified or validated. Therefore, it has become a motivation to conduct a study to propose a Collaborative KMS Strategic Planning Model that can significantly enhance the quality of knowledge services in an organization. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Collaborative Knowledge Management System Strategic Planning; Knowledge Management; Knowledge Management Strategy; Knowledge Management System; Big Data; Computer Software; Knowledge Based Systems; Knowledge Management; Software Engineering; Strategic Planning; Collaborative Environments; Collaborative Knowledge Management; Decision Making Process; Knowledge Management Strategy; Knowledge Management System; Knowledge Service; Systematic Literature Review; Systematic Literature Review (slr); Decision Making},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Clear20151,
	author = {Clear, Tony},
	title = {'Follow the moon' development: Writing a systematic literature review on Global Software Engineering Education},
	year = {2015},
	journal = {ACM International Conference Proceeding Series},
	volume = {19-22-Nov-2015},
	pages = {1 - 4},
	doi = {10.1145/2828959.28350190},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84959905465&doi=10.1145%2F2828959.28350190&partnerID=40&md5=2eefb4ec2e862d7b26213baaafe20781},
	abstract = {This presentation reflects on method and practice in Computer Science Education Research, through introducing the process of conducting a Systematic Literature Review. While Systematic Literature Reviews are an established research method within the Software Engineering discipline, they are a relatively unfamiliar research approach within Computer Science Education. Yet research disciplines can be strengthened by borrowing and adapting methods from other fields. I reflect on the rationale and underlying philosophy behind Systematic Reviews, and the implications for conducting a rigorous study and the quality of the resulting outputs. This chronicle of the journey of an ITiCSE working group, outlines the process we adopted and reflects on the methodological and logistical challenges we had to overcome in producing a review titled Challenges and Recommendations for the Design and Conduct of Global Software Engineering Courses. I conclude by discussing how systematic literature reviews can be adapted to an undergraduate teaching setting. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Capstone; Evidence-based Software Engineering; Global Software Development; Global Software Engineering Education; International Collaboration; Open Ended Group Project; Research Methodology; Systematic Literature Review; Teaching And Learning; Computer Software; Curricula; Education; Education Computing; International Cooperation; Software Design; Software Engineering; Teaching; Capstone; Evidence Based Software Engineering; Global Software Development; Global Software Engineering; International Collaborations; Open-ended Group Projects; Research Methodologies; Systematic Literature Review; Teaching And Learning; Engineering Education},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ulziit2015763,
	author = {Ulziit, Bayarbuyan and Warraich, Zeeshan Akhtar and Gencel, Cigdem and Petersen, Kai},
	title = {A conceptual framework of challenges and solutions for managing global software maintenance},
	year = {2015},
	journal = {Journal of Software: Evolution and Process},
	volume = {27},
	number = {10},
	pages = {763 - 792},
	doi = {10.1002/smr.1720},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84943163600&doi=10.1002%2Fsmr.1720&partnerID=40&md5=b822925fc67ab199afa184860fd28755},
	abstract = {Context Software maintenance process in globally distributed settings brings significant management challenges to software organizations. Objectives Investigate the factors specific to managing software maintenance process in globally distributed settings and best practices in software organizations. Method A systematic literature review and interviews with industry practitioners were conducted. For analysis and synthesis, the grounded theory method was used. Results We identified a number of management challenges and mitigation strategies and then classified them under people, process, product, and technology factors. Overall, a structure of challenges and solutions, the conceptual framework, has been developed that may be used to understand and classify global maintenance challenges. Conclusions Distributed software maintenance process has specific management challenges in relation to process, people, product, and technology. Therefore, companies performing maintenance in distributed settings should consider these factors, which are not present in the general global software development literature, although many lessons apply to both. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Distributed Development; Global Software Engineering; Management; Outsourcing; Software Maintenance; Management; Outsourcing; Software Design; Analysis And Synthesis; Distributed Development; Global Software Development; Global Software Engineering; Grounded Theory Methods; Performing Maintenance; Software Maintenance Process; Systematic Literature Review; Computer Software Maintenance},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Bronze Open Access}
}

@ARTICLE{Hu2015980,
	author = {Hu, Qing and Mason, Robert J. and Williams, Sharon Jayne and Anne Found, Pauline Anne},
	title = {Lean implementation within SMEs: A literature review},
	year = {2015},
	journal = {Journal of Manufacturing Technology Management},
	volume = {26},
	number = {7},
	pages = {980 - 1012},
	doi = {10.1108/JMTM-02-2014-0013},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84941638764&doi=10.1108%2FJMTM-02-2014-0013&partnerID=40&md5=86f16b1604e760da88c2e40f87fe5517},
	abstract = {Purpose - Lean business ideology has been one of the recent dominant research areas in operations management. However, there is a dearth of research focusing on Lean in small- and medium-sized enterprises (SMEs). The purpose of this paper is to fill this gap by systematically reviewing the literature in relation to the implementation of Lean in SMEs. Design/methodology/approach - Tranfield et al.'s (2003) systematic review methodology was employed covering three stages: planning, conducting and reporting/dissemination. Findings - A descriptive analysis of the papers reviewed is provided. From the thematic analysis of the literature four main themes are identified: the scope/type of Lean being adopted by SMEs, how Lean is used in SMEs, the impact of Lean implementation on SMEs and the critical success factors for Lean implementation in SMEs. Key inhibitors and enablers related to firm size when implementing Lean are also identified in the concluding discussion. Research limitations/implications - Nine recommendations for future research are developed associated with Lean implementation in SMEs. Practical implications - The authors suggest SMEs to integrate organisational factors such as employee empowerment and the development of a supportive strategy into their Lean implementation plans. A preliminary "Staircase Road Map" to guide SMEs in implementing Lean is also developed. Originality/value - This paper goes beyond previous literature reviews of Lean by systematically and critically evaluating key themes of Lean implementation within an SME environment. It not only provides a road map for SME owners/managers who intend to implement Lean, but also provides the academic community with an agenda for future research. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Lean; Literature Review; Small- And Medium-sized Enterprises; Industrial Management; Software Engineering; Critical Success Factor; Descriptive Analysis; Design/methodology/approach; Lean; Literature Reviews; Operations Management; Organisational Factors; Small And Medium Sized Enterprise; Enterprise Resource Planning},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Gao2015157,
	author = {Gao, Chao and Zhang, He and Jiang, Shu},
	title = {Constructing hybrid software process simulation models},
	year = {2015},
	journal = {ACM International Conference Proceeding Series},
	volume = {24-26-August-2015},
	pages = {157 - 166},
	doi = {10.1145/2785592.2785610},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84958536065&doi=10.1145%2F2785592.2785610&partnerID=40&md5=f82d13d2851cbad83f78fac53c666a5f},
	abstract = {Software process simulation (SPS) has become an active research area for managing and improving software development processes since its introduction in the last two decades. Hybrid simulation, the combination of simulation paradigms to address a problem, is becoming more popular as the problems we are presented with become more complex. However, integrating multiple simulation paradigms faces the issues of compatibility, interoperatability and synchronization when executing simulation. The objective of this research is to present the state-of-the-art of this research area, the hybrid mechanism when integrating paradigms, and more importantly provide practical support for the effective adoption of hybrid simulation in SPS context. Based on an extended systematic literature review, this paper presents the preliminary results by answering the research questions. Depending upon the way these simulation paradigms represent different aspects and levels of software process and the context in which they can be modeled by SPS, two hybrid mechanisms: Hierarchical Mechanism and Interlinked Mechanism, have been frequently employed. The detailed discussions of integration strategies and recommendations when applying hybrid simulation may offer reference value to the SPS community. © 2016 Elsevier B.V., All rights reserved.},
	author_keywords = {Hybrid Simulation; Software Process Modeling; Software Process Simulation; Systematic (literature) Review; Software Design; Software Engineering; Hybrid Simulation; Integration Strategy; Research Questions; Simulation Paradigm; Software Development Process; Software Process Modeling; Software Process Simulation; Systematic (literature) Review; Computer Software},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Jiang2015147,
	author = {Jiang, Shu and Zhang, He and Gao, Chao and Shao, Dong and Rong, Guoping},
	title = {Process simulation for software engineering education},
	year = {2015},
	journal = {ACM International Conference Proceeding Series},
	volume = {24-26-August-2015},
	pages = {147 - 156},
	doi = {10.1145/2785592.2785606},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84958525702&doi=10.1145%2F2785592.2785606&partnerID=40&md5=c4f61ca61a5157d3e0e957fe5b7b1a34},
	abstract = {Training and learning are one important purpose of Software Process Simulation (SPS). Some previous reviews showed a noticeable number of studies that combine SPS and Software Engineering Education (SEE). The objective of this research is to present the latest state-of-the-art of this area, and more importantly provide practical support for the effective adoption of SPS in educational contexts. We conducted an extended Systematic Literature Review (SLR) based on our previous reviews. The review identified 42 primary studies from 1992 to 2013. This paper presents the preliminary results by answering the research questions. The overall findings confirmed the positive impact of SPS on education. The detailed discussions and recommendations may offer reference value to the community. © 2016 Elsevier B.V., All rights reserved.},
	author_keywords = {Computer Game; Non-game Simulation; Process Simulation; Software Engineering Education; Computer Games; Computer Software; Education; Software Engineering; Educational Context; Game Simulation; Process Simulations; Reference Values; Research Questions; Software Process Simulation; State Of The Art; Systematic Literature Review (slr); Engineering Education},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Petersen20151,
	author = {Petersen, Kai and Vakkalanka, Sairam and Kuźniarz, Ludwik},
	title = {Guidelines for conducting systematic mapping studies in software engineering: An update},
	year = {2015},
	journal = {Information and Software Technology},
	volume = {64},
	pages = {1 - 18},
	doi = {10.1016/j.infsof.2015.03.007},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84929464206&doi=10.1016%2Fj.infsof.2015.03.007&partnerID=40&md5=7c783ad28341966a169bf7fc5069490c},
	abstract = {Context Systematic mapping studies are used to structure a research area, while systematic reviews are focused on gathering and synthesizing evidence. The most recent guidelines for systematic mapping are from 2008. Since that time, many suggestions have been made of how to improve systematic literature reviews (SLRs). There is a need to evaluate how researchers conduct the process of systematic mapping and identify how the guidelines should be updated based on the lessons learned from the existing systematic maps and SLR guidelines. Objective To identify how the systematic mapping process is conducted (including search, study selection, analysis and presentation of data, etc.); to identify improvement potentials in conducting the systematic mapping process and updating the guidelines accordingly. Method We conducted a systematic mapping study of systematic maps, considering some practices of systematic review guidelines as well (in particular in relation to defining the search and to conduct a quality assessment). Results In a large number of studies multiple guidelines are used and combined, which leads to different ways in conducting mapping studies. The reason for combining guidelines was that they differed in the recommendations given. Conclusion The most frequently followed guidelines are not sufficient alone. Hence, there was a need to provide an update of how to conduct systematic mapping studies. New guidelines have been proposed consolidating existing findings. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Guidelines; Software Engineering; Systematic Mapping Studies; Mapping; Software Engineering; Guidelines; Mapping Studies; Quality Assessment; Systematic Literature Review; Systematic Mapping; Systematic Mapping Studies; Systematic Maps; Systematic Review; Search Engines},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{de Magalhães201576,
	author = {de Magalhães, Cleyton Vanut Cordeiro and da Silva, Fabio Q.B. and Santos, Ronnie Edson De Souza and Suassuna, Marcos},
	title = {Investigations about replication of empirical studies in software engineering: A systematic mapping study},
	year = {2015},
	journal = {Information and Software Technology},
	volume = {64},
	pages = {76 - 101},
	doi = {10.1016/j.infsof.2015.02.001},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84929027242&doi=10.1016%2Fj.infsof.2015.02.001&partnerID=40&md5=98b205323fdf8a17bd1e314d87e9747e},
	abstract = {Context Two recent mapping studies which were intended to verify the current state of replication of empirical studies in Software Engineering (SE) identified two sets of studies: empirical studies actually reporting replications (published between 1994 and 2012) and a second group of studies that are concerned with definitions, classifications, processes, guidelines, and other research topics or themes about replication work in empirical software engineering research (published between 1996 and 2012). Objective In this current article, our goal is to analyze and discuss the contents of the second set of studies about replications to increase our understanding of the current state of the work on replication in empirical software engineering research. Method We applied the systematic literature review method to build a systematic mapping study, in which the primary studies were collected by two previous mapping studies covering the period 1996-2012 complemented by manual and automatic search procedures that collected articles published in 2013. Results We analyzed 37 papers reporting studies about replication published in the last 17 years. These papers explore different topics related to concepts and classifications, presented guidelines, and discuss theoretical issues that are relevant for our understanding of replication in our field. We also investigated how these 37 papers have been cited in the 135 replication papers published between 1994 and 2012. Conclusions Replication in SE still lacks a set of standardized concepts and terminology, which has a negative impact on the replication work in our field. To improve this situation, it is important that the SE research community engage on an effort to create and evaluate taxonomy, frameworks, guidelines, and methodologies to fully support the development of replications. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Studies; Experiments; Mapping Study; Replications; Software Engineering; Systematic Literature Review; Experiments; Mapping; Paper; Publishing; Software Engineering; Automatic Searches; Empirical Software Engineering; Empirical Studies; Mapping Studies; Replications; Research Communities; Systematic Literature Review; Systematic Mapping Studies; Engineering Research},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Clear20151,
	author = {Clear, Tony and Daniels, Mats and Beecham, Sarah and McDermott, Roger J. and Barr, John and Oudshoorn, Michael J. and Savickaite, Airina and Noll, John},
	title = {Challenges and recommendations for the design and conduct of global software engineering courses: A systematic review},
	year = {2015},
	pages = {1 - 39},
	doi = {10.1145/2858796.2858797},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84964794770&doi=10.1145%2F2858796.2858797&partnerID=40&md5=73052838bf9012a92a198ab290765b2c},
	abstract = {Context: Global Software Engineering (GSE) has become the predominant form of software development for global companies and has given rise to a demand for students trained in GSE. In response, universities are developing courses and curricula around GSE and researchers have begun to disseminate studies of these new approaches. Problem: GSE differs from most other computer science fields, however, in that practice is inseparable from theory. As a result, educators looking to create GSE courses face a daunting task: integrating global practice into the local classroom. Aim: This study aims to ameliorate the very difficult task of teaching GSE by delineating the challenges and providing some recommendations for overcoming them. Method: To meet our aims we pose two research questions ("When teaching GSE to students in Higher Education, what are the (a) challenges, and (b) recommendations for addressing them") and then conduct a systematic literature review (SLR) to determine the answers to these questions. Our SLR follows a carefully designed and validated protocol. Results: We found 82 papers that addressed our research questions. Our findings indicate that in addition to the challenges posed by GSE in general, particular problems arise in educational situations. The majority of these challenges fall into the "global distance" category, though teamwork challenges and people issues (such as trust) also commonly arise. Organizational differences between institutions, differing skill sets between students in different locations, and varying cultural work norms, for example, all operate within educational settings in quite different ways than in professional development teams. Integrating cultural training, conducting teamwork exercises to build trust, and instructor monitoring of team communication are all examples of techniques that have been used successfully by educators according to our review Conclusion: Despite the severity of the challenges in GSE education, many institutions have successfully developed courses and curricula targeting GSE. Indeed, for each of the challenges we have identified in the literature there are numerous recommendations for overcoming them. Instructors can use the recommendations given in this study as a starting point to running successful GSE courses. © 2016 Elsevier B.V., All rights reserved.},
	author_keywords = {Capstone; Global Software Development; Global Software Engineering; International Collaboration; Open Ended Group Project; Systematic Literature Review; Teaching And Learning; Computer Software; Education; Education Computing; Engineering Education; International Cooperation; Personnel Training; Societies And Institutions; Software Design; Software Engineering; Students; Teaching; Capstone; Global Software Development; Global Software Engineering; International Collaborations; Open-ended Group Projects; Systematic Literature Review; Teaching And Learning; Curricula},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{2015,
	title = {ITiCSE-WGP 2015 - Proceedings of the 2015 ITiCSE Conference on Working Group Reports},
	year = {2015},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84964711822&partnerID=40&md5=15e410a83baa5a7e492cd023872df74c},
	abstract = {The proceedings contain 7 papers. The topics discussed include: challenges and recommendations for the design and conduct of global software engineering courses: a systematic review; educational data mining and learning analytics in programming: literature review and case studies; a global snapshot of computer science education in K-12 schools; concepts in K-9 computer science education; new horizons in the assessment of computer science at school and beyond: leveraging on the ViVA platform; multinational perspectives on information technology from academia and industry; and what's in a name? international interpretations of computing education terminology. © 2016 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Ekaputra20151055,
	author = {Ekaputra, Fajar J. and Sabou, Marta and Serral, Estefanía and Biffl, Stefan},
	title = {Collaborative exchange of systematic literature review results: The case of empirical software engineering},
	year = {2015},
	pages = {1055 - 1056},
	doi = {10.1145/2740908.2742027},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84968648343&doi=10.1145%2F2740908.2742027&partnerID=40&md5=cc9224bc1788df9823cc9b2c8b1e339e},
	abstract = {Complementary to managing bibliographic information as done by digital libraries, the management of concrete research objects (e.g., experimental workflows, design patterns) is a pre-requisite to foster collaboration and re-use of research results. In this paper we describe the case of the Empirical Software Engineering domain, where researchers use systematic literature reviews (SLRs) to conduct and report on literature studies. Given their structured nature, the outputs of such SLR processes are a special and complex type of research object. Since performing SLRs is a time consuming process, it is highly desirable to enable sharing and reuse of the complex knowledge structures produced through SLRs. This would enable, for example, conducting new studies that build on the findings of previous studies. To support collaborative features necessary for multiple research groups to share and re-use each other's work, we hereby propose a solution approach that is inspired by software engineering best-practices and is implemented using Semantic Web technologies. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Collaboration; Emse; Research Publication; Slr; Computer Software Reusability; Digital Libraries; Semantic Web; Software Engineering; World Wide Web; Bibliographic Information; Collaboration; Empirical Software Engineering; Emse; Engineering Best Practice; Knowledge Structures; Semantic Web Technology; Systematic Literature Review; Engineering Research},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Liu2015,
	author = {Liu, Gaoxuan and Rong, Guoping and Zhang, He and Shan, Qi},
	title = {The adoption of capture-recapture in software engineering: A systematic literature review},
	year = {2015},
	journal = {ACM International Conference Proceeding Series},
	volume = {27-29-April-2015},
	pages = {},
	doi = {10.1145/2745802.2745816},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84961179776&doi=10.1145%2F2745802.2745816&partnerID=40&md5=2825ad3836904a1df471f193fbd275f3},
	abstract = {Context: Capture-recapture method has long been adopted in software engineering as a relatively objective way for de- fect estimation. While many relevant studies have been carried out to evaluate various capture-recapture models and estimators, there still lacks common understanding on the adoption status of the method in software engineering. It is necessary to systematically collect empirical evidence of Capture-recapture adoption hence form necessary under- standing on the method. Objective: This study aims to synthesize relevant primary studies on the adoption of capture-recapture method in soft- ware engineering, and try to identify possible gaps between the state-of-practice and the state-of-art so as to provide clues for future research. Method: By following the guidelines of Kitchenham, we conducted a Systematic Literature Review(SLR) on studies of the adoption of capture-recapture method in software en- gineering. Results: From 5 common digital libraries, we retrieved 506 published articles, among them 44 were identified as relevant primary studies. We identified 18 capture-recapture estima- tors under 4 basic models. Types of the currently existing studies as well as the relevant in uencing factors to adoption of the capture-recapture method are also discussed. Conclusion: Results show that there are no conclusive de- cisions on the best capture-recapture models and estimators. Besides, the number of inspectors and their capability to de- tect defects as well as the difficulty to detect defects are most critical in uencing factors. In addition, lacking of industrial application may be the major issue of current adoption sta- tus of capture-recapture method in software engineering. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Capture-recapture Method; Defect Estimation; Software Inspection; Systematic Literature Review; Application Programs; Computer Software Selection And Evaluation; Defects; Digital Libraries; Capture-recapture Method; Capture-recapture Models; Defect Estimations; Difficulty To Detect; Software Inspection; State Of Practice; Systematic Literature Review; Systematic Literature Review (slr); Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Zhou2015,
	author = {Zhou, You and Zhang, He and Huang, Xin and Yang, Song and Ali Babar, Muhammad Ali and Tang, Hao},
	title = {Quality assessment of systematic reviews in software engineering: A tertiary study},
	year = {2015},
	journal = {ACM International Conference Proceeding Series},
	volume = {27-29-April-2015},
	pages = {},
	doi = {10.1145/2745802.2745815},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84961170647&doi=10.1145%2F2745802.2745815&partnerID=40&md5=101457a30ace444387217146fec0a08e},
	abstract = {Context: The quality of an Systematic Literature Review (SLR) is as good as the quality of the reviewed papers. Hence, it is vital to rigorously assess the papers included in an SLR. There has been no tertiary study aimed at re- porting the state of the practice of quality assessment used in SLRs in Software Engineering (SE). Objective: We aimed to study the practices of quality as- sessment of the papers included in SLRs in SE. Method: We conducted a tertiary study of the SLRs that have performed quality assessment of the reviewed papers. Results: We identified and analyzed different aspects of the quality assessment of the papers included in 127 SLRs. Conclusion: Researchers use a variety of strategies for quality assessment of the papers reviewed, but report lit- tle about the justification for the used criteria. The focus is creditability but not relevance aspect of the papers. Appro- priate guidelines are required for devising quality assessment strategies. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Paper; Quality Assessment; State Of The Practice; Systematic Literature Review (slr); Systematic Review; Tertiary Study; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Zarour2015180,
	author = {Zarour, Mohammad and Abran, Alain and Desharnais, Jean Marc and Alarifi, Abdulrahman S.N.},
	title = {An investigation into the best practices for the successful design and implementation of lightweight software process assessment methods: A systematic literature review},
	year = {2015},
	journal = {Journal of Systems and Software},
	volume = {101},
	pages = {180 - 192},
	doi = {10.1016/j.jss.2014.11.041},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84921634197&doi=10.1016%2Fj.jss.2014.11.041&partnerID=40&md5=4004e4bd99c63dd10237379dc7cf9a05},
	abstract = {Software process assessment (SPA) is an effective tool to understand an organization's process quality and to explore improvement opportunities. However, the knowledge that underlies the best practices required to develop assessment methods, either lightweight or heavyweight methods, is unfortunately scattered throughout the literature. This paper presents the results of a systematic literature review to organize those recognized as the best practices in a way that helps SPA researchers and practitioners in designing and implementing their assessmentmethods. Such practices are presented in the literature as assessment requirements, success factors, observations, and lessons learned. Consequently, a set of 38 best practices has been collected and classified into five main categories, namely practices related to SPA methods, support tools, procedures, documentation, and users. While this collected set of best practices is important for designing lightweight as well as heavyweight assessment methods, it is of utmost importance in designing lightweight assessment methods, as the design of which depends on individual experience. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Assessment Method Design; Software Process Assessment; Systematic Literature Review; Software Engineering; Best Practices; Design And Implementations; Effective Tool; Process Quality; Software Process Assessment; Success Factors; Support Tool; Systematic Literature Review; Design},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Hydara2015170,
	author = {Hydara, Isatou and Sultan, Abu Bakar Md and Zulzalil, Hazura and Admodisastro, Novia},
	title = {Current state of research on cross-site scripting (XSS) - A systematic literature review},
	year = {2015},
	journal = {Information and Software Technology},
	volume = {58},
	pages = {170 - 186},
	doi = {10.1016/j.infsof.2014.07.010},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84914180842&doi=10.1016%2Fj.infsof.2014.07.010&partnerID=40&md5=43c20ce681db935649b6302c140d0cd7},
	abstract = {Context: Cross-site scripting (XSS) is a security vulnerability that affects web applications. It occurs due to improper or lack of sanitization of user inputs. The security vulnerability caused many problems for users and server applications. Objective: To conduct a systematic literature review on the studies done on XSS vulnerabilities and attacks. Method: We followed the standard guidelines for systematic literature review as documented by Barbara Kitchenham and reviewed a total of 115 studies related to cross-site scripting from various journals and conference proceedings. Results: Research on XSS is still very active with publications across many conference proceedings and journals. Attack prevention and vulnerability detection are the areas focused on by most of the studies. Dynamic analysis techniques form the majority among the solutions proposed by the various studies. The type of XSS addressed the most is reflected XSS. Conclusion: XSS still remains a big problem for web applications, despite the bulk of solutions provided so far. There is no single solution that can effectively mitigate XSS attacks. More research is needed in the area of vulnerability removal from the source code of the applications before deployment. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Cross-site Scripting; Security; Systematic Literature Review; Web Applications; Information Systems; Software Engineering; Area Of Vulnerability; Cross Site Scripting; Dynamic Analysis Techniques; Security; Security Vulnerabilities; Systematic Literature Review; Vulnerability Detection; Web Application; Technical Writing},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Bano2015148,
	author = {Bano, Muneera and Zowghi, Didar},
	title = {A systematic review on the relationship between user involvement and system success},
	year = {2015},
	journal = {Information and Software Technology},
	volume = {58},
	pages = {148 - 169},
	doi = {10.1016/j.infsof.2014.06.011},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84914094890&doi=10.1016%2Fj.infsof.2014.06.011&partnerID=40&md5=7eee32c65ee3f419e77ea1ec177f11f0},
	abstract = {Context: For more than four decades it has been intuitively accepted that user involvement (UI) during system development lifecycle leads to system success. However when the researchers have evaluated the user involvement and system success (UI-SS) relationship empirically, the results were not always positive. Objective: Our objective was to explore the UI-SS relationship by synthesizing the results of all the studies that have empirically investigated this complex phenomenon. Method: We performed a Systematic Literature Review (SLR) following the steps provided in the guidelines of Evidence Based Software Engineering. From the resulting studies we extracted data to answer our 9 research questions related to the UI-SS relationship, identification of users, perspectives of UI, benefits, problems and challenges of UI, degree and level of UI, relevance of stages of software development lifecycle (SDLC) and the research method employed on the UI-SS relationship. Results: Our systematic review resulted in selecting 87 empirical studies published during the period 1980-2012. Among 87 studies reviewed, 52 reported that UI positively contributes to system success, 12 suggested a negative contribution and 23 were uncertain. The UI-SS relationship is neither direct nor binary, and there are various confounding factors that play their role. The identification of users, their degree/level of involvement, stage of SDLC for UI, and choice of research method have been claimed to have impact on the UI-SS relationship. However, there is not sufficient empirical evidence available to support these claims. Conclusion: Our results have revealed that UI does contribute positively to system success. But it is a double edged sword and if not managed carefully it may cause more problems than benefits. Based on the analysis of 87 studies, we were able to identify factors for effective management of UI alluding to the causes for inconsistency in the results of published literature. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Software Development; Systematic Literature Review; User Involvement; Life Cycle; Software Engineering; Effective Management; Evidence Based Software Engineering; Problems And Challenges; Software Development Life Cycle; System Development; Systematic Literature Review; Systematic Literature Review (slr); User Involvement; Software Design},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@CONFERENCE{Santos20154,
	author = {Santos, Adrián},
	title = {Joint analysis of families of SE experiments},
	year = {2015},
	journal = {CEUR Workshop Proceedings},
	volume = {1469},
	pages = {4 - 9},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84954476854&partnerID=40&md5=5b898b07de1f9f66f83f3ddb8da1f951},
	abstract = {Context: Replication is of paramount importance for building solid theories in experimental disciplines and is a cornerstone of the evolution of science. Over the last few years, the role of replication in software engineering (SE), families of experiments and the need to aggregate the results of groups of experiments have attracted special attention. Frameworks, taxonomies, processes, recommendations and guidelines for reporting replications have been proposed to support the replication of SE experiments. There has been much less debate about the issue of the joint analysis of replications whose raw data are available to experimenters. Objectives: The aim of our research is to explore current trends in the joint analysis of SE experiments whose raw data are available to experimenters. Notice that the fact that experimenters have access to the raw data is what differentiates joint analysis from other methods for aggregating experimental results (e.g. systematic literature review (SLR), where the applicability of meta-analysis techniques is widely accepted). The objective of this three-year investigation is to shed light on the best joint analysis approach when the experimenters have access to raw data from several replications. Method: Narrative comparison, standard frequentist methods, meta-analysis and Bayesian methods have been used in SE literature. We will apply and evaluate each approach to the experiments on Test-Driven Development (TDD) carried out within the Experimental Software Engineering Industrial Laboratory (ESEIL) project. We will propose and rate a tentative framework for aggregating results within the ESEIL project. The proposed framework, as well as the different existing methods, will be evaluated on another set of replications of testing technique experiments. Current status: The thesis proposal was elicited on the 15 January 2015 and rounded out over the following six months. As a three-year thesis, its discussion and findings will be projected across the years 2015, 2016 and 2017. The first results are now being aggregated with the data from four different experiments on TDD (two in academia and two in industry), and preliminary results are expected to be available in October 2015. © 2016 Elsevier B.V., All rights reserved.},
	author_keywords = {Family Of Experiments; Joint Analysis; Raw Data; Se Replication; Aggregates; Bayesian Networks; Computer Programming; Software Engineering; Bayesian Methods; Experimental Software Engineering; Frequentist Methods; Joint Analysis; Raw Data; Systematic Literature Review (slr); Test Driven Development; Testing Technique; Software Testing},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Villarreal2015219,
	author = {Villarreal, Vladimir and Hervas, Ramon and Bravo, José},
	title = {Mobile monitoring review: Comparative with MoMo framework solution},
	year = {2015},
	journal = {Lecture Notes in Computer Science},
	volume = {9455},
	pages = {219 - 230},
	doi = {10.1007/978-3-319-26410-3_21},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84952683909&doi=10.1007%2F978-3-319-26410-3_21&partnerID=40&md5=fe780256f45555c9c1f1f6076ae4b8a8},
	abstract = {The systematic review allows us to identify, assess, and interpret all possible relevant work associated with a question in particular or subject of an area. In this paper we will use the Kitchenham protocol, which allow for the proper selection of primary and secondary research related to mobile monitoring solution. The main objective of this review is to identify work, research and publications made in the field of mobile monitoring of patients through a framework or application generators. Next, we compare the different solutions with our solution: MoMo Framework. Our systematic review is based on the methodology B. Kitchenham. She proposes specific guidelines to carry out the systematic review in software engineering. © 2016 Elsevier B.V., All rights reserved.},
	author_keywords = {M-health; Mobile Monitoring; Systematic Review; Ubiquitous Computing; Software Engineering; Ubiquitous Computing; Mhealth; Mobile Monitoring; Or Applications; Secondary Researches; Systematic Review; Engineering Research},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Aversano2015346,
	author = {Aversano, Lerina and Tortorella, Maria},
	title = {A review of enterprise modelling studies},
	year = {2015},
	volume = {3},
	pages = {346 - 351},
	doi = {10.5220/0005468003460351},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84939556661&doi=10.5220%2F0005468003460351&partnerID=40&md5=26077fc6019cb0fa538175278f5bfc0e},
	abstract = {This paper aims to provide a basis for the improvement of enterprise modelling research through a review of previous work published in literature. The review identifies 198 enterprise modelling papers in 49 journals and classifies the papers according to: research topic, modelling approach, research approach, study context and type of validation set. A database of these enterprise modelling papers is provided to ease the identification of relevant research results. The review results are combined with other knowledge and provide a support for modelling strategy recommendations for future enterprise modelling research, including: identification of relevant papers within a carefully selected set of journals when completeness is essential; need of conducting more studies on modelling methods commonly used from the software industry; and increase the awareness of how the properties of the case studies impact on the results when evaluating modelling methods. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Enterprise Assets; Enterprise Modelling; Modelling Language; Research Methods; Systematic Review; Enterprise Resource Planning; Software Engineering; Enterprise Modelling; Modelling Method; Modelling Strategies; Research Approach; Research Results; Research Topics; Software Industry; Systematic Review; Modeling Languages},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Final Open Access; Green Open Access}
}

@CONFERENCE{Maiani de Mello2015267,
	author = {Maiani de Mello, Rafael Maiani and Travassos, Guilherme Horta},
	title = {Characterizing sampling frames in software engineering surveys},
	year = {2015},
	pages = {267 - 280},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84936153608&partnerID=40&md5=e6bde84a05d8ef8cdd1d239a4bdf6f84},
	abstract = {Questionnaire-based Survey is a study strategy commonly applied in Software Engineering. It allows the researchers to perform descriptive largescale investigations without the rigorous control level required by experiments. A critical issue on planning surveys concerns with the characterization of adequate sampling frames and their units of analysis. Therefore, this paper presents the results of a structured review in order to identify how sampling frames and units of analysis have been usually characterized in Software Engineering surveys. This investigation allowed to observe the predominant behavior of sampling by convenience whitin units of analysis composed by individuals retrieved from non-representative sources of sampling. Besides, it was also identified many other design alternatives. Based on these results , a set of recommendations on characterizing sampling frames for software engineering surveys, including the attributes gathered from each kind of unit of analysis (organization, individual, project), is presented aiming at supporting future surveys studies in software engineering. © 2015 Elsevier B.V., All rights reserved.},
	author_keywords = {Sampling; Sampling Frame; Surveys; Systematic Literature Review; Unit Of Analysis; Unit Of Observation; Sampling; Surveying; Surveys; Control Level; Critical Issues; Design Alternatives; Structured Review; Systematic Literature Review; Unit Of Analysis; Unit Of Observation; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Medeiros2015859,
	author = {Medeiros, Juliana D.R.V. and Lins de Vasconcelos, Alexandre Marcos and Silva, Carla},
	title = {Integration of agile practices: An approach to improve the quality of software specifications},
	year = {2015},
	pages = {859 - 865},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84936139164&partnerID=40&md5=a29e96d77e413cb2b2a13fd1d48a38f2},
	abstract = {Customer unavailability and insufficient requirements gathering are challenges that have compromised the adoption of agile methodologies. This research proposes an exploratory study in the industry to investigate how requirements engineering is used in agile projects. A Systematic Literature Review (SLR) was conducted and its results indicated the existence of problems in requirements engineering activities applied to agile projects. This research plan to perform a Survey with software engineers who uses agile practices, aiming to understand the perception of professionals about the best practices, challenges and limitations of the requirements engineering approaches currently used by the software industry. Then a new approach to the specification of requirements will be proposed using principles such as: Decrease constant dependence customer; Document only what is necessary to implement a requirement; Agile Practices; Quality Requirements. A experiment will be conducted to evaluate the quality and productivity of the proposed approach. © 2015 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile; Quality Of Software Specifications; Quasi-experiment; Survey; Requirements Engineering; Specifications; Surveying; Surveys; Agile; Agile Methodologies; Exploratory Studies; Quality Of Softwares; Quality Requirements; Quasi-experiments; Requirements Gathering; Systematic Literature Review (slr); Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Santos2015488,
	author = {Santos, José Amâncio Macedo and Santos, Alcemir Rodrigues and Mendonça, Manoel Gomes De},
	title = {Investigating bias in the search phase of Software Engineering secondary studies},
	year = {2015},
	pages = {488 - 501},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84936076379&partnerID=40&md5=411114436eef7dc9947ab0ec41b60aa7},
	abstract = {Context. Researchers are increasingly resorting of secondary studies (e.g. systematic literature reviews and mapping studies) in Software Engineering. This method is strongly dependent on the source of primary studies adopted, which is a bias. We did not find guidelines or benchmarks to evaluate the sources in a systematic way. Objective. In this paper we aim to tackle the selection of electronic data sources while conducting such kind of studies evaluating the equilibrium between the volume and number of relevant papers. Method. In this sense, we proceed towards a secondary study to analyze the overlapping of three different electronic data sources. We also compared our results with other similar studies. Results. Our results show minimum overlapping and no effortless combination of electronic data sources at all. Conclusion. We conclude that researchers shall resort of completeness to work with a feasible set of papers to review. Specially in secondary studies adopting general and no standardized terms. © 2015 Elsevier B.V., All rights reserved.},
	author_keywords = {Electronic Data Sources; Feasible Set; Mapping Studies; Systematic Literature Review; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Méndez Porras2015195,
	author = {Méndez Porras, Abel and Quesada-Lopez, Christian and Jenkins, Marcelo},
	title = {Automated testing of mobile applications: A systematic map and review},
	year = {2015},
	pages = {195 - 208},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84936073784&partnerID=40&md5=84db3704c03d0f56599038ba8fca8d89},
	abstract = {Context: Software testing is a costly and time-consuming activity. Automated testing of mobile applications is considered complex and difficult. Indeed, several factors such as a variety of inputs (user, context, and environment) that a mobile application normally requires, and the heterogeneity of the technologies make automated testing not a trivial task. Two of the major challenges for automated testing are creation of the appropriate test cases scenarios and to decide in which devices to perform the testing. Objective: This paper reports on a systematic map and review. Automated testing approaches for mobile applications, testing techniques, and empirical assessment are identified, mapped, and characterized. We investigate the major challenges in automated testing of mobile applications. An analysis and synthesis of these studies is conducted. Method: A systematic mapping and systematic literature review research method has been conducted for identifying and aggregating evidence about automated testing of mobile applications. Results: A total 83 studies were identified. The results were tabulated and synthesized to provide recommendations to practitioners about automated testing of mobile applications. The main approaches identified were model-based testing (30%), capture/replay (15.5%), model-learning testing (10%), systematic testing (7.5%), fuzz testing (7.5%), random testing (5%) and scripted based testing (2.5%). Conclusions: In recent years, the number of proposals for automated software testing of mobile applications has increased. In 40% of the studies, the testing techniques use GUI-based models of the application. Further research is needed, in order to improve the creation of effective and efficient models for automated testing of mobile applications. © 2015 Elsevier B.V., All rights reserved.},
	author_keywords = {Capture/replay; Model-based Testing; Model-learning Testing; Random Testing; Scripted-based; Systematic Literature Review; Systematic Testing; Application Programs; Automation; Mobile Computing; Mobile Telecommunication Systems; Model Checking; Software Engineering; Testing; Capture/replay; Model Based Testing; Model Learning; Random Testing; Scripted-based; Systematic Literature Review; Systematic Testing; Software Testing},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Rouhani20151,
	author = {Rouhani, Babak Darvish and Naz’ri Mahrin, Mohd Naz Ri Bin and Nikpay, Fatemeh and Binti Ahmad, Rodina Binti and Nikfard, Pourya},
	title = {A systematic literature review on Enterprise Architecture Implementation Methodologies},
	year = {2015},
	journal = {Information and Software Technology},
	volume = {62},
	number = {1},
	pages = {1 - 20},
	doi = {10.1016/j.infsof.2015.01.012},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84932649763&doi=10.1016%2Fj.infsof.2015.01.012&partnerID=40&md5=07a95acd2d74dc805d61862a9d2a0a27},
	abstract = {Context: Enterprise Architecture (EA) is a strategy to align business and Information Technology (IT) within an enterprise. EA is managed, developed, and maintained throughout the EA Implementation Methodology (EAIM). Objective: The aims of this study are to identify the existing effective practices that are used by existing EAIMs, identify the factors that affect the effectiveness of EAIM, identify the current tools that are used by existing EAIMs, and identify the open problems and areas related to EAIM for improvement. Method: A Systematic Literature Review (SLR) was carried out. 669 papers were retrieved by a manual search in 6 databases and 46 primary studies were finally included. Result: From these studies 33% were journal articles, 41% were conference papers while 26% were contributions from the studies consisted of book chapters. Consequently, 28 practices, 19 factors, and 15 tools were identified and analysed. Conclusion: Several rigorous researches have been done in order to provide effective EAIM, however there are still problems in components of EAIM, including: there is lack of tool support for whole part of EA implementation, there are deficiency in addressing the EAIM's practices especially in modeling, management, and maintenance, there is lack of consideration on non-functional requirement in existing EAIM, there is no appropriate consideration on requirement analysis in most existing EAIM. This review provides researchers with some guidelines for future research on this topic. It also provides broad information on EAIM, which could be useful for practitioners. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Eaim; Enterprise Architecture; Enterprise Architecture Implementation; Methodology; Methodology; Slr; Information Systems; Eaim; Enterprise Architecture; Implementation Methodology; Methodology; Non-functional Requirements; Requirement Analysis; Systematic Literature Review; Systematic Literature Review (slr); Software Engineering},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Wohlin2014,
	author = {Wohlin, Claes},
	title = {Writing for synthesis of evidence in empirical software engineering},
	year = {2014},
	journal = {International Symposium on Empirical Software Engineering and Measurement},
	pages = {},
	doi = {10.1145/2652524.2652559},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84907818154&doi=10.1145%2F2652524.2652559&partnerID=40&md5=a064a1f1f0108db753552d067adec60e},
	abstract = {Context: Systematic literature reviews have become common in software engineering in the last decade, but challenges remain. Goal: Given the challenges, the objective is to describe improvement areas in writing primary studies, and hence provide a good basis for researchers aiming at synthesizing research evidence in a specific area. Method: The results presented are based on a literature review with respect to synthesis of research results in software engineering with a particular focus on empirical software engineering. The literature review is complemented and exemplified with experiences from conducting systematic literature reviews and working with research methodologies in empirical software engineering. Results: The paper presents three areas where improvements are needed to become more successful in synthesizing empirical evidence. These three areas are: terminology, paper content and reviewing. Conclusion: It is concluded that it must be possible to improve the primary studies, but it requires that researchers start having synthesis in mind when writing their research papers. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Evidence; Guidelines; Research Methodology; Research Synthesis; Systematic Literature Reviews; Systematic Mapping Studies; Evidence; Guidelines; Research Methodologies; Research Synthesis; Systematic Literature Review; Systematic Mapping Studies; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Bano20149,
	author = {Bano, Muneera and Zowghi, Didar and Ikram, Naveed},
	title = {Systematic reviews in requirements engineering: A tertiary study},
	year = {2014},
	pages = {9 - 16},
	doi = {10.1109/EmpiRE.2014.6890110},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84927530519&doi=10.1109%2FEmpiRE.2014.6890110&partnerID=40&md5=1f0bba2c12ff008ad51ae12eab379ff4},
	abstract = {There has been an increasing interest in conducting Systematic Literature Reviews (SLR) among Requirements Engineering (RE) researchers in recent years. However, so far there have been no tertiary studies conducted to provide a comprehensive overview of these published SLR in RE. In this paper we present a tertiary study of SLR that focus solely on RE related topics by following the guidelines of Evidence Based Software Engineering. We have conducted both automated search of major online sources and manual search of the RE and SLR related conferences and journals. Our tertiary study has identified 53 distinct systematic reviews published from 2006 to 2014 and reported in 64 publications. We have assessed the resulting SLR for their quality, and coverage of specific RE related topics thus identifying some gaps. We have observed that the quality of SLR in RE has been decreasing over the recent years. There is a strong need to replicate some of these SLR to increase the reliability of their results for future RE research. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Mapping Study; Requirements Engineering; Systematic Literature Review; Tertiary Study; Software Engineering; Automated Searches; Evidence Based Software Engineering; Mapping Studies; Online Sources; Systematic Literature Review; Systematic Literature Review (slr); Systematic Review; Tertiary Study; Requirements Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Final Open Access; Green Open Access}
}

@ARTICLE{Arcuri2014219,
	author = {Arcuri, Andrea and Briand, Lionel C.},
	title = {A Hitchhiker's guide to statistical tests for assessing randomized algorithms in software engineering},
	year = {2014},
	journal = {Software Testing Verification and Reliability},
	volume = {24},
	number = {3},
	pages = {219 - 250},
	doi = {10.1002/stvr.1486},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84898481924&doi=10.1002%2Fstvr.1486&partnerID=40&md5=7f3bacf4378904fb22975c304fa764dc},
	abstract = {SUMMARYRandomized algorithms are widely used to address many types of software engineering problems, especially in the area of software verification and validation with a strong emphasis on test automation. However, randomized algorithms are affected by chance and so require the use of appropriate statistical tests to be properly analysed in a sound manner. This paper features a systematic review regarding recent publications in 2009 and 2010 showing that, overall, empirical analyses involving randomized algorithms in software engineering tend to not properly account for the random nature of these algorithms. Many of the novel techniques presented clearly appear promising, but the lack of soundness in their empirical evaluations casts unfortunate doubts on their actual usefulness. In software engineering, although there are guidelines on how to carry out empirical analyses involving human subjects, those guidelines are not directly and fully applicable to randomized algorithms. Furthermore, many of the textbooks on statistical analysis are written from the viewpoints of social and natural sciences, which present different challenges from randomized algorithms. To address the questionable overall quality of the empirical analyses reported in the systematic review, this paper provides guidelines on how to carry out and properly analyse randomized algorithms applied to solve software engineering tasks, with a particular focus on software testing, which is by far the most frequent application area of randomized algorithms within software engineering. Copyright © 2012 John Wiley & Sons, Ltd. © 2021 Elsevier B.V., All rights reserved.},
	author_keywords = {Bonferroni Adjustment; Confidence Interval; Effect Size; Nonparametric Test; Parametric Test; Statistical Difference; Survey; Systematic Review; Application Programs; Statistical Tests; Surveying; Verification; Bonferroni Adjustment; Confidence Interval; Effect Size; Non-parametric Test; Parametric Test; Statistical Differences; Systematic Review; Software Testing},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Osborne O'Hagan2014182,
	author = {Osborne O'Hagan, Ann and Coleman, Gerry and O'Connor, Rory V.},
	title = {Software Development Processes for Games: A Systematic Literature Review},
	year = {2014},
	journal = {Communications in Computer and Information Science},
	volume = {425},
	pages = {182 - 193},
	doi = {10.1007/978-3-662-43896-1_16},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84906536210&doi=10.1007%2F978-3-662-43896-1_16&partnerID=40&md5=4056f29ae0a0f4ef1d9df996b6fd3480},
	abstract = {This paper describes the methodology and results from a Systematic Literature Review (SLR) of the software processes used in game development. A total of 404 papers were analyzed as part of the review and the various process models that are used in industry and academia/research are presented. Software Process Improvement (SPI) initiatives for game development are discussed. The factors that promote or deter the adoption of process models, and implementing SPI in practice are highlighted. Our findings indicate that there is no single model that serves as a best practice process model for game development and it is a matter of deciding which model is best suited for a particular game. Agile models such as Scrum and XP are suited to the knowledge intensive domain of game development where innovation and speed to market are vital. Hybrid approaches such as reuse can also be suitable for game development where the risk of the upfront investment in terms of time and cost is mitigated with a game that has stable requirements and a longer lifespan. © Springer-Verlag Berlin Heidelberg 2014. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Game Development; Software Engineering; Software Process; Software Process Improvement (spi); Systematic Literature Review (slr); Computer Science; Computers; Software Engineering; Game Development; Process Modeling; Software Development Process; Software Process; Software Process Improvements; Speed-to-market; Systematic Literature Review; Systematic Literature Review (slr); Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@CONFERENCE{de França2014308,
	author = {de França, Breno Bernard Nicolau and Travassos, Guilherme Horta},
	title = {Simulation based studies in software engineering: A matter of validity},
	year = {2014},
	pages = {308 - 321},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84906057310&partnerID=40&md5=96d097efcad90bd97419a6dded0c3390},
	abstract = {CONTEXT: Despite the possible lack of validity when compared with other science areas, Simulation-Based Studies (SBS) performed in the context of Software Engineering (SE) have supported the achievement of some results in the field. However, as it happens with any other sort of experimental study, to increase their validity and strength confidence in the results the threats to validity must be identified and dealt. OBJECTIVE: To identify potential threats to SBS validity in SE and suggest ways to mitigate them. METHOD: To apply a secondary qualitative analysis in a dataset resulted from the aggregation of data from a quasi-systematic literature review combined with information surveyed ad-hoc regarding other science areas. RESULTS: 28 different threats to validity and concerned with SBS in SE were identified and classified according Cook and Campbell's categories. Besides, 12 verification and validation procedures applicable to SBS were analyzed to understand their ability to detect these 28 threats to valitidy. After this, the observed behaviors were used to improve guidelines regarding the planning and reporting of SBS in SE. CONCLUSIONS: Simulation based studies have different threats to validity when compared with traditional studies. They are not well known. Therefore, it is not easy to realize all of them without explicit guidance yet. So, recommendations and guidelines are presented in this paper to support their identification and mitigation. © 2014 Elsevier B.V., All rights reserved.},
	author_keywords = {Simulation Models; Simulation-based Studies; Threats To Validity; Computer Simulation; Campbell; Literature Reviews; Potential Threats; Qualitative Analysis; Simulation-based Studies; Threats To Validity; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Usman201482,
	author = {Usman, Muhammad and Mendes, Emilia and Neiva, Frâncila Weidt and Britto, Ricardo De Sousa},
	title = {Effort estimation in Agile Software Development: A systematic literature review},
	year = {2014},
	journal = {ACM International Conference Proceeding Series},
	pages = {82 - 91},
	doi = {10.1145/2639490.2639503},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84905666395&doi=10.1145%2F2639490.2639503&partnerID=40&md5=f7ce35932f86b05de7cc685cd0355cf6},
	abstract = {Context: Ever since the emergence of agile methodologies in 2001, many software companies have shifted to Agile Software Development (ASD), and since then many studies have been conducted to investigate effort estimation within such context; however to date there is no single study that presents a detailed overview of the state of the art in effort estimation for ASD. Objectives: The aim of this study is to provide a detailed overview of the state of the art in the area of effort estimation in ASD. Method: To report the state of the art, we conducted a systematic literature review in accordance with the guidelines proposed in the evidence-based software engineering literature. Results: A total of 25 primary studies were selected; the main findings are: i) Subjective estimation techniques (e.g. expert judgment, planning poker, use case points estimation method) are the most frequently applied in an agile context; ii) Use case points and story points are the most frequently used size metrics respectively; iii) MMRE (Mean Magnitude of Relative Error) and MRE (Magnitude of Relative Error) are the most frequently used accuracy metrics; iv) team skills, prior experience and task size are cited as the three important cost drivers for effort estimation in ASD; and v) Extreme Programming (XP) and SCRUM are the only two agile methods that are identified in the primary studies. Conclusion: Subjective estimation techniques, e.g. expert judgment-based techniques, planning poker or the use case points method, are the one used the most in agile effort estimation studies. As for the size metrics, the ones that were used the most in the primary studies were story points and use case points. Several research gaps were identified, relating to the agile methods, size metrics and cost drivers, thus suggesting numerous possible avenues for future work. Copyright 2014 ACM. © 2014 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile Software Development; Effort Estimation; Systematic Literature Review; Computer Applications; Computer Programming; Agile Methodologies; Agile Software Development; Effort Estimation; Estimation Techniques; Evidence Based Software Engineering; Extreme Programming; Mean Magnitude Of Relative Errors; Systematic Literature Review; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Final Open Access; Green Open Access}
}

@CONFERENCE{Häser2014,
	author = {Häser, Florian and Felderer, Michael and Breu, Ruth},
	title = {Software paradigms, assessment types and non-functional requirements in model-based integration testing: A systematic literature review},
	year = {2014},
	journal = {ACM International Conference Proceeding Series},
	pages = {},
	doi = {10.1145/2601248.2601257},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84905489438&doi=10.1145%2F2601248.2601257&partnerID=40&md5=7cd4968d6823cb083704f36f3d0a2a9a},
	abstract = {Context: In modern systems, like cyber-physical systems, where software and physical services are interacting, safety, security or performance play an important role. In order to guarantee the correct interoperability of such systems, with respect to functional and non-functional requirements, integration testing is an effective measure to achieve this. Model-based testing moreover not only enables early definition and validation, but also test automation. This makes it a good choice to overcome urgent challenges of integration testing. Objective: Many publications on model-based integration testing (MBIT) approaches can be found. Nevertheless, a study giving a systematic overview on the underlying software paradigms, measures for guiding the integration testing process as well as non-functional requirements they are suitable for, is missing. The aim of this paper is to find and synthesize the relevant primary studies to gain a comprehensive understanding of the current state of model-based integration testing. Method: For synthesizing the relevant studies, we conducted a systematic literature review (SLR) according to the guidelines of Kitchenham. Results: The systematic search and selection retrieved 83 relevant studies from which data has been extracted. Our review identified three assessment criteria for guiding the testing process, namely static metrics, dynamic metrics and stochastic &random. In addition it shows that just a small fraction considers non-functional requirements. Most approaches are for component-oriented systems. Conclusion: Results from the SLR show that there are two major research gaps. First, there is an accumulated need for approaches in the MBIT field that support non-functional requirements, as they are gaining importance. Second, means for steering the integration testing process, especially together with automation, need to evolve. Copyright 2014 ACM. © 2014 Elsevier B.V., All rights reserved.},
	author_keywords = {Assessment Types; Model-based Integration Testing; Non-functional Requirements; Systematic Literature Review; Embedded Systems; Integration Testing; Search Engines; Software Engineering; Stochastic Systems; Assessment Types; Cyber Physical Systems (cpss); Model Based Testing; Model-based Integrations; Non-functional Requirements; Systematic Literature Review; Systematic Literature Review (slr); Systematic Searches; Interoperability},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Guzmán2014,
	author = {Guzmán, Liliana and Seaman, Carolyn Budinger and Lampasona, Constanza and Rombach, Dieter},
	title = {Survey on research synthesis in software engineering},
	year = {2014},
	journal = {ACM International Conference Proceeding Series},
	pages = {},
	doi = {10.1145/2601248.2601273},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84905483321&doi=10.1145%2F2601248.2601273&partnerID=40&md5=69c0ff8df92da1525741260ae5056814},
	abstract = {Building trustworthy knowledge in software engineering depends on the systematic synthesis of empirical evidence. In recent years the number of published syntheses has increased, but only a few showed high quality and scientific rigor. We performed an online survey of software engineering researchers to identify difficulties experienced when synthesizing evidence. The results confirm that the state of primary research and the low quality of reports are perceived as the most important difficulties. Respondents who were experienced in quantitative and qualitative synthesis methods claim a lack of support for selecting and applying synthesis methods. This indicates the need for identifying criteria for selecting synthesis methods, deriving recommendations, and developing more rigorous guidelines for applying them. Copyright 2014 ACM. © 2014 Elsevier B.V., All rights reserved.},
	author_keywords = {Qualitative; Quantitative; Research Synthesis; Systematic Reviews; Computer Applications; Computer Programming; High Quality; Low Qualities; Online Surveys; Qualitative; Quantitative; Research Synthesis; Synthesis Method; Systematic Review; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Wohlin2014,
	author = {Wohlin, Claes},
	title = {Guidelines for snowballing in systematic literature studies and a replication in software engineering},
	year = {2014},
	journal = {ACM International Conference Proceeding Series},
	pages = {},
	doi = {10.1145/2601248.2601268},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84905448310&doi=10.1145%2F2601248.2601268&partnerID=40&md5=fe342bacaf6dec3ebb5adfb46a22da64},
	abstract = {Background: Systematic literature studies have become common in software engineering, and hence it is important to understand how to conduct them efficiently and reliably. Objective: This paper presents guidelines for conducting literature reviews using a snowballing approach, and they are illustrated and evaluated by replicating a published systematic literature review. Method: The guidelines are based on the experience from conducting several systematic literature reviews and experimenting with different approaches. Results: The guidelines for using snowballing as a way to search for relevant literature was successfully applied to a systematic literature review. Conclusions: It is concluded that using snowballing, as a first search strategy, may very well be a good alternative to the use of database searches. Copyright 2014 ACM. © 2014 Elsevier B.V., All rights reserved.},
	author_keywords = {Replication; Snowball Search; Snowballing; Systematic Literature Review; Systematic Mapping Studies; Search Engines; Replication; Snowball Search; Snowballing; Systematic Literature Review; Systematic Mapping Studies; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Kalinowski201412,
	author = {Kalinowski, M. and Mendes, Emilia and Travassos, Guilherme Horta},
	title = {An industry ready defect causal analysis approach exploring Bayesian networks},
	year = {2014},
	journal = {Lecture Notes in Business Information Processing},
	volume = {166 LNBIP},
	pages = {12 - 33},
	doi = {10.1007/978-3-319-03602-1_2},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904577000&doi=10.1007%2F978-3-319-03602-1_2&partnerID=40&md5=de3f5d8b662153c7ccdc8545e561a924},
	abstract = {Defect causal analysis (DCA) has shown itself an efficient means to improve the quality of software processes and products. A DCA approach exploring Bayesian networks, called DPPI (Defect Prevention-Based Process Improvement), resulted from research following an experimental strategy. Its conceptual phase considered evidence-based guidelines acquired through systematic reviews and feedback from experts in the field. Afterwards, in order to move towards industry readiness the approach evolved based on results of an initial proof of concept and a set of primary studies. This paper describes the experimental strategy followed and provides an overview of the resulting DPPI approach. Moreover, it presents results from applying DPPI in industry in the context of a real software development lifecycle, which allowed further comprehension and insights into using the approach from an industrial perspective. © Springer International Publishing Switzerland 2014. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Bayesian Networks; Defect Causal Analysis; Defect Prevention; Experimental Software Engineering; Software Process Improvement; Software Quality; Bayesian Networks; Computer Software Selection And Evaluation; Defects; Life Cycle; Process Engineering; Quality Control; Defect Causal Analysis; Defect Prevention; Experimental Software Engineering; Software Process Improvement; Software Quality; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Galster2014282,
	author = {Galster, Matthias and Weyns, Danny and Tofan, Dan and Michalik, Bartosz and Avgeriou, Paris C.},
	title = {Variability in software systems-A systematic literature review},
	year = {2014},
	journal = {IEEE Transactions on Software Engineering},
	volume = {40},
	number = {3},
	pages = {282 - 306},
	doi = {10.1109/TSE.2013.56},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84897604910&doi=10.1109%2FTSE.2013.56&partnerID=40&md5=cf29bb898f22f5f61c7b9d1b479b9dac},
	abstract = {Context: Variability (i.e., the ability of software systems or artifacts to be adjusted for different contexts) became a key property of many systems. Objective: We analyze existing research on variability in software systems. We investigate variability handling in major software engineering phases (e.g., requirements engineering, architecting). Method: We performed a systematic literature review. A manual search covered 13 premium software engineering journals and 18 premium conferences, resulting in 15,430 papers searched and 196 papers considered for analysis. To improve reliability and to increase reproducibility, we complemented the manual search with a targeted automated search. Results: Software quality attributes have not received much attention in the context of variability. Variability is studied in all software engineering phases, but testing is underrepresented. Data to motivate the applicability of current approaches are often insufficient; research designs are vaguely described. Conclusions: Based on our findings we propose dimensions of variability in software engineering. This empirically grounded classification provides a step towards a unifying, integrated perspective of variability in software systems, spanning across disparate or loosely coupled research themes in the software engineering community. Finally, we provide recommendations to bridge the gap between research and practice and point to opportunities for future research. © 2013 IEEE. © 2014 Elsevier B.V., All rights reserved.},
	author_keywords = {Software Engineering; Systematic Review; Variability; Computer Software Selection And Evaluation; Research; Automated Searches; Engineering Community; Reproducibilities; Software Engineering Journals; Software Quality Attributes; Systematic Literature Review; Systematic Review; Variability; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Jia2013222,
	author = {Jia, Changjiang and Yu, Yuen Tak},
	title = {Using the 5W+1H model in reporting systematic literature review: A case study on software testing for cloud computing},
	year = {2013},
	pages = {222 - 229},
	doi = {10.1109/QSIC.2013.13},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84885587150&doi=10.1109%2FQSIC.2013.13&partnerID=40&md5=103390487e579189686c95073bd634ad},
	abstract = {This paper documents a case study of using the 5W+1H model for reporting systematic literature review on software testing for cloud computing. To our knowledge, this is the first systematic literature review that applies the 5W+1H model, which is widely used in the journalism domain, to report the full picture of the research area in both software engineering and services computing. Existing guidelines on systematic literature review heavily rely on the researcher to pose the right research questions, and the review results are tightly focused on these research questions. For researchers new to a field, defining the right research questions that are effective in revealing the critical issues in the field can be challenging. Our case study demonstrates that the 5W+1H model provides an easy aid for the researcher to get over such initial challenges. As the researcher becomes more familiar with the field, he/she may then refine the research questions by adding more topic-specific contexts. In this way, the 5W+1H model serves to provide an exploratory framework to shape a systematic literature review. Applying to software testing for cloud computing, we are able to synthesize a comprehensive picture of recent researches on the field, including publication pattern, article citation immediacy, research topic diversity, research ideas for addressing testing challenges at different cloud service architectural layers. Based on the case study, we summarize the lessons learned on using the 5W+1H model in reporting systematic literature review. © 2013 IEEE. © 2013 Elsevier B.V., All rights reserved.},
	author_keywords = {5w+1h; Cloud-based Application; Software Testing; Systematic Literature Review; 5w+1h; Architectural Layers; Cloud-based Applications; Recent Researches; Research Questions; Research Topics; Services Computing; Systematic Literature Review; Cloud Computing; Software Engineering; Software Testing; Research},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Suleiman2013,
	author = {Suleiman, Husam and Adepetu, Adedamola and Arnautovic, Edin and Svetinovic, Davor},
	title = {Comprehensive integrated checklists for requirements engineering and software project management},
	year = {2013},
	pages = {},
	doi = {10.1109/ICISA.2013.6579470},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883807586&doi=10.1109%2FICISA.2013.6579470&partnerID=40&md5=1706c3d78902df0bb54d86212ababf7b},
	abstract = {Software engineering processes are often challenged by overlooked tasks and misguided decisions that are simple but yet essential for the success of the system to be developed. A list of guidelines and steps is required to help facilitate software development processes by efficiently guiding engineers and managers at different stages of software development. Moreover, the ensuring of the execution of required tasks is essential to reduce the likelihood of the system failure. In other critical areas such as medical surgery or aerospace control, the use of checklists has proven as a successful practice to ensure the effective and efficient execution of the tasks in a process. Although several of the current practices in software development include using some art of checklists to monitor the software development processes, there are no unified and integrated checklists from research and industry resulting in significant disparities. Such ambiguity could be even counter-productive instead of easing the software development processes. In order to fill this gap, we developed comprehensive and integrated software engineering checklists for the critical areas of requirements engineering and software project management. To create such comprehensive checklists and ensure their completeness, we applied the systematic literature review method. We analyzed 323 documents from academia and industry, and identified a total of 183 requirements engineering checklist items and 263 project management checklist items. © 2013 IEEE. © 2013 Elsevier B.V., All rights reserved.},
	author_keywords = {Aerospace Control; Current Practices; Different Stages; Software Development Process; Software Engineering Process; Software Project Management; System Failures; Systematic Literature Review; Industrial Research; Information Science; Requirements Engineering; Software Design; Project Management},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Weyns2013249,
	author = {Weyns, Danny and Ahmad, Tanvir},
	title = {Claims and evidence for architecture-based self-adaptation: A systematic literature review},
	year = {2013},
	journal = {Lecture Notes in Computer Science},
	volume = {7957 LNCS},
	pages = {249 - 265},
	doi = {10.1007/978-3-642-39031-9_22},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84879864517&doi=10.1007%2F978-3-642-39031-9_22&partnerID=40&md5=22cf2882a55ca79cb4c238a2254669d5},
	abstract = {Engineering the upcoming generation of software systems and guaranteeing the required qualities is complex due to the inherent uncertainties at design time, such as new user needs and changing availability of resources. Architecture-based self-adaptation is a promising approach to tackle these challenges. In this approach, a system maintains a model of itself and adapts itself to realize particular quality objectives using a feedback loop. Despite a vast body of work, no systematic study has been performed on the claims associated with architecture-based self-adaptation and the evidence that exists for these claims. As such insight is important for researchers and engineers, we performed a systematic literature review covering 20 leading software engineering conferences and journals in the field, resulting in 121 studies used for data collection. The review shows that self-adaptation is primarily used to improve performance, reliability, and flexibility. The tradeoffs implied by self-adaptation have not received much attention, and evidence is mainly obtained from simple examples. From the study, we derive a number of recommendations for future research in architecture-based self-adaptive systems. © 2013 Springer-Verlag. © 2013 Elsevier B.V., All rights reserved.},
	author_keywords = {Architecture-based; Data Collection; Improve Performance; Self Adaptation; Self-adaptive System; Software Systems; Systematic Literature Review; Systematic Study; Software Architecture; Architecture},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@CONFERENCE{Oliveira2013223,
	author = {Oliveira, Lucas Bueno Ruas and Osorio, Fernando S. and Nakagawa, Elisa Yumi},
	title = {An investigation into the development of service-oriented robotic systems},
	year = {2013},
	journal = {Proceedings of the ACM Symposium on Applied Computing},
	pages = {223 - 228},
	doi = {10.1145/2480362.2480410},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84877956210&doi=10.1145%2F2480362.2480410&partnerID=40&md5=b48e89ca9c59470dee6427bc5296dc48},
	abstract = {Robotics has emerged as one of the most prominent research areas in the last years. To cope with the great variety of robots application areas, as well as the heterogeneity of the robots, Service-Oriented Architecture (SOA) has been adopted to develop robotic systems, i.e., the software systems that manage the robots. Nevertheless, there is a lack of studies that provide an updated, fair overview of the development of Service-Oriented Robotic Systems (SORS), i.e., software systems composed by services. The main contribution of this paper is to present a detailed, analytical panorama of SORS, their implementation technologies, and software engineering guidelines that support development of such systems. For this, we have applied steps of the systematic review technique. As main results, we have observed that, in spite of relevant contributions already found in this area, it is still necessary considerable efforts to consolidate the research in SORS. Furthermore, we intend that this work makes also possible to identify important research topics for future research. Copyright 2013 ACM. © 2013 Elsevier B.V., All rights reserved.},
	author_keywords = {Service-oriented Robotic System; Systematic Review; Application Area; Engineering Guidelines; Research Topics; Robotic Systems; Service Oriented; Software Systems; Systematic Review; Computer Software; Information Services; Robotics; Robots; Service Oriented Architecture (soa); Research},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Bano2013125,
	author = {Bano, Muneera and Zowghi, Didar},
	title = {User involvement in software development and system success: A systematic literature review},
	year = {2013},
	journal = {ACM International Conference Proceeding Series},
	pages = {125 - 130},
	doi = {10.1145/2460999.2461017},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84877271959&doi=10.1145%2F2460999.2461017&partnerID=40&md5=8131f7b7dafc3c0845ea7979bb109068},
	abstract = {Context: In the last four decades involving users in the software development process is claimed to have a positive impact on the success of that software. However, previous reviews on this topic have produced conflicting results. Objectives: Our aim is to present a review on user involvement in software development process and investigate its relationship to software system success. Methods: For our exploration, we performed a Systematic Literature Review using the guidelines provided in the Evidence Based Software Engineering literature. Results: 87 relevant empirical studies were selected and reviewed that investigate various perspectives and concepts of user involvement in software development process during the period of 1980-2012. Among 87 studies reviewed, 59 report that user involvement positively contributes to system success, 7 suggest a negative contribution and 21 are uncertain. Conclusions: Our results show an overall positive impact of user involvement on system success. It also suggests that the relationship between user involvement and system success is neither direct nor simple, and it depends on many different factors and conditions surrounding systems development processes. Copyright 2013 ACM. © 2013 Elsevier B.V., All rights reserved.},
	author_keywords = {Software Development; System Success; User Involvement; Empirical Studies; Evidence Based Software Engineering; Software Development Process; Software Systems; System Success; Systematic Literature Review; Systems Development Process; User Involvement; Computer Applications; Software Engineering; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Imtiaz2013177,
	author = {Imtiaz, Salma and Bano, Muneera and Ikram, Naveed and Niazi, Mahmood K.},
	title = {A tertiary study: Experiences of conducting systematic literature reviews in software engineering},
	year = {2013},
	journal = {ACM International Conference Proceeding Series},
	pages = {177 - 182},
	doi = {10.1145/2460999.2461025},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84877258226&doi=10.1145%2F2460999.2461025&partnerID=40&md5=977093ff22cab55867c610dd1f90269c},
	abstract = {Context: The use of Systematic Literature Review (SLR) requires expertise and poses many challenges for novice researchers. The experiences of those who have used this research methodology can benefit novice researchers in effectively dealing with these challenges. Objective: The aim of this study is to record the reported experiences of conducting Systematic Literature Reviews, for the benefit of new researchers. Such a review will greatly benefit the researchers wanting to conduct SLR for the very first time. Method: We conducted a tertiary study to gather the experiences published by researchers. Studies that have used the SLR research methodology in software engineering and have implicitly or explicitly reported their experiences are included in this review. Results: Our research has revealed 116 studies relevant to the theme. The data has been extracted by two researchers working independently and conflicts resolved after discussion with third researcher. Findings from these studies highlight Search Strategy, Online Databases, Planning and Data Extraction as the most challenging phases of SLR. Lack of standard terminology in software engineering papers, poor quality of abstracts and problems with search engines are some of the most cited challenges. Conclusion: Further research and guidelines is required to facilitate novice researchers in conducting these phases properly. Copyright 2013 ACM. © 2013 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Software Engineering; Experiences; Lessons Learnt; Systematic Literature Reviews; Tertiary Study; Empirical Software Engineering; Experiences; Lessons Learnt; Systematic Literature Review; Tertiary Study; Research; Search Engines; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Senapathi2013119,
	author = {Senapathi, Mali and Srinivasan, Ananth},
	title = {Sustained agile usage: A systematic literature review},
	year = {2013},
	journal = {ACM International Conference Proceeding Series},
	pages = {119 - 124},
	doi = {10.1145/2460999.2461016},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84877257656&doi=10.1145%2F2460999.2461016&partnerID=40&md5=4f6b8032365c2bab1098c212dc8eae42},
	abstract = {Context: Agile methodologies (AM) emerged as a popular alternative to formalized methods, and have gained widespread acceptance in both the academic and industrial contexts. While most research has focused on their early stages of adoption and use, there is little evidence that agile methodologies have been effectively used beyond the adoption stage. Objective: The objective of this paper is to gain a comprehensive understanding of the various factors that impact the sustained usage of agile methods. Method: We performed a systematic literature review to identify empirical studies relating to agile usage. We followed the guidelines provided for conducting systematic literature reviews in software engineering [1, 2] using the following distinct stages: 1) protocol development and the search strategy, 2) exclusion process, 3) data extraction, and 4) data synthesis. Results: Our review identified nine critical factors viz., Management Support, Attitude, Motivation, Team Composition, Training, Agile Mindset, Technical Competence and Expertise, Agile Engineering Practices, and Methodology Champion. Conclusions: Our review highlights the significance of nine critical factors that impact sustained usage of AM in organizations. Our findings also indicate that the right balance and combination of various factors with an emphasis on continuous improvement will be crucial for achieving true agile sustainability in organizations. Copyright 2013 ACM. © 2013 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile Usage; Critical Factors; Sustained Agile Usage; Agile Methodologies; Agile Usage; Continuous Improvements; Critical Factors; Protocol Development; Sustained Agile Usage; Systematic Literature Review; Technical Competence; Search Engines; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ullah2013,
	author = {Ullah, Azmat and Lai, Richard},
	title = {A systematic review of business and information technology alignment},
	year = {2013},
	journal = {ACM Transactions on Management Information Systems},
	volume = {4},
	number = {1},
	pages = {},
	doi = {10.1145/2445560.2445564},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84878560537&doi=10.1145%2F2445560.2445564&partnerID=40&md5=3956b03dd30d131feaba2652f290d4f8},
	abstract = {Business organizations have become heavily dependent on information technology (IT) services. The process of alignment is defined as the mutual synchronization of business goals and IT services. However, achieving mature alignment between business and IT is difficult due to the rapid changes in the business and IT environments. This article provides a systematic review of studies on the alignment of business and IT. The research articles reviewed are based on topics of alignment, the definition of alignment, history, alignment challenges, phases of alignment, alignment measurement approaches, the importance of alignment in business industries, how software engineering helps in better alignment, and the role of the business environment in aligning business with IT. It aims to present a thorough understanding of business-IT alignment and to provide a list of future research directions regarding alignment. To perform the systematic review, we used the guidelines developed by Kitchenham for reviewing the available research papers relevant to our topic. © 2013 ACM. © 2013 Elsevier B.V., All rights reserved.},
	author_keywords = {Alignment Measurement; Alignment Phases; Business And It Alignment; Business Environment Modeling; Business Issues; It Issues; It Support; Literature; Systematic Review; Alignment Measurement; Business And It Alignments; Business Environments; Business Issues; It Issues; It Supports; Literature; Systematic Review; Alignment; Computer Supported Cooperative Work; Research; Software Engineering; Information Technology},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Bronze Open Access}
}

@CONFERENCE{2013,
	title = {Proceedings - 2013 IEEE 8th International Conference on Global Software Engineering Workshops, ICGSEW 2013},
	year = {2013},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84897368649&partnerID=40&md5=5a8a0c44287e9fcb97e0573958ef7117},
	abstract = {The proceedings contain 14 papers. The topics discussed include: on the identification of best practices for improving the efficiency of testing activities in distributed software projects: preliminary findings from an empirical study; onboarding on open source software projects: a preliminary analysis; advancement of decision-making in agile projects by applying logistic regression on estimates; a systematic literature review of best practices and challenges in follow-th-sun software development; run-through practice as a collaboration facilitator in inter-organizational software construction; social network analysis for global software engineering: exploring developer relationships from a fine-grained perspective; understanding collaborative practices in distributed agile development research proposal; towards a communication maturity model for distributed software development; and GAME: governance for agile management of enterprises: a management model for agile governance. © 2014 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{2013,
	title = {2013 1st International Workshop on Conducting Empirical Studies in Industry, CESI 2013 - Proceedings},
	year = {2013},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84897368634&partnerID=40&md5=709c917b341ec1850e22636ff5021d01},
	abstract = {The proceedings contain 16 papers. The topics discussed include: software industry experiments: a systematic literature review; conducting empirical studies in industry: balancing rigor and relevance; industrial study on test driven development: challenges and experience; six reasons for rejecting an industrial survey paper; success factors for empirical studies in industry-academia collaboration: a reflection; mind the gap and find common ground: empirical research in multiple firms; generalizing by similarity: lessons learnt from industrial case studies; conducting a long-term case study in a software firm: an experience report; conducting interview studies: challenges, lessons learned, and open question; confounding factors when conducting industrial replications in requirements engineer; lessons learned from conducting industry surveys in software testing; and can we do useful industrial software engineering research in the shadow of lean and agile?. © 2014 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Bano201324,
	author = {Bano, Muneera and Zowghi, Didar},
	title = {Users' involvement in requirements engineering and system success},
	year = {2013},
	pages = {24 - 31},
	doi = {10.1109/EmpiRE.2013.6615212},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84887499158&doi=10.1109%2FEmpiRE.2013.6615212&partnerID=40&md5=482643c4b6c8ad78e3426b7e4d7505d2},
	abstract = {Involving users in software development in general, and in Requirements Engineering (RE) in particular, has been considered for over three decades. It is axiomatically believed to contribute significantly to a successful system. However, not much attention has been paid to ascertain in which phases of software development life cycle involvement or participation of users is most beneficial. In this paper we present an investigation into the concept of users' involvement during RE activities and explore its relationship with system success. We have conducted a systematic literature review (SLR) using guidelines of Evidence Based Software Engineering. Our SLR identified 87 empirical studies from the period of 1980 to 2012. Only 13 studies focused specifically on investigating users' involvement in RE and 9 of these confirmed benefits of involving users in requirements analysis and 4 remain inconclusive. Effective involvement of users in RE may reduce the need for their more active involvement in the rest of software development. This paper also offers a checklist we have created from the identified factors of all 87 empirical studies that should be utilised for effective users' involvement in RE. © 2013 IEEE. © 2014 Elsevier B.V., All rights reserved.},
	author_keywords = {Software Design; Empirical Studies; Evidence Based Software Engineering; Requirements Analysis; Software Development Life Cycle; System Success; Systematic Literature Review (slr); Requirements Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Venkatraman20131,
	author = {Venkatraman, Sitalakshmi},
	title = {Software engineering research gaps in the cloud},
	year = {2013},
	journal = {Journal of Information Technology Research},
	volume = {6},
	number = {1},
	pages = {1 - 19},
	doi = {10.4018/jitr.2013010101},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84887468641&doi=10.4018%2Fjitr.2013010101&partnerID=40&md5=68015b04543cf09ae8dc0ecb571089f2},
	abstract = {This paper takes a systematic review methodology to unearth the reason for a slow adoption of cloud computing by businesses, despite the user interests and cloud advancements gained recently. The key finding is that the IT industry has taken different modelling approaches to engineer and deliver the cloud services based on the goals of different key cloud players, thereby raising various adoption challenges and concerns. In this context, there is a need for rethinking Software Engineering concepts. This motivates us to question whether the existing Software Engineering theories and modelling principles are sufficient for the new cloud computing paradigm. Due to the paucity of a comprehensive review in literature, the main aim of this review article is to identify such research gaps and insufficiencies in Software Engineering, and to provide recommendations for bridging these gaps. In this work, the systemic review of the state of the art of cloud computing has resulted in identifying four major cloud modelling gaps that require prime attention. The paper discusses these gaps and identifies the key Software Engineering challenges prevalent in addressing each of these gaps. Finally, the author proposes five topmost research recommendations specifically designed for overcoming these gaps/ challenges in order to facilitate a sustainable cloud adoption. Overall, the author's findings have established the need to rethink Software Engineering theories for arriving at a multilateral or distributed cloud modelling approach. With such rethinking, the proposed cloud design automatically incorporates cloud user-roles, interoperability, intelligent automation and trusted cloud infrastructure strategies for achieving a sustainable cloud framework of the future. Copyright © 2013, IGI Global. © 2013 Elsevier B.V., All rights reserved.},
	author_keywords = {Cloud Computing; Gaps; Research Issues; Service Oriented Architecture (soa); Software Engineering; Computing Paradigm; Distributed Clouds; Engineering Challenges; Gaps; Intelligent Automation; Research Issues; Software Engineering Theories; Systematic Review; Cloud Computing; Information Services; Research; Service Oriented Architecture (soa); Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Kitchenham20132049,
	author = {Kitchenham, Barbara Ann and Brereton, Pearl},
	title = {A systematic review of systematic review process research in software engineering},
	year = {2013},
	journal = {Information and Software Technology},
	volume = {55},
	number = {12},
	pages = {2049 - 2075},
	doi = {10.1016/j.infsof.2013.07.010},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84885174213&doi=10.1016%2Fj.infsof.2013.07.010&partnerID=40&md5=455b50e47cc8271306a1bb852fc3fd57},
	abstract = {Context: Many researchers adopting systematic reviews (SRs) have also published papers discussing problems with the SR methodology and suggestions for improving it. Since guidelines for SRs in software engineering (SE) were last updated in 2007, we believe it is time to investigate whether the guidelines need to be amended in the light of recent research. Objective: To identify, evaluate and synthesize research published by software engineering researchers concerning their experiences of performing SRs and their proposals for improving the SR process. Method: We undertook a systematic review of papers reporting experiences of undertaking SRs and/or discussing techniques that could be used to improve the SR process. Studies were classified with respect to the stage in the SR process they addressed, whether they related to education or problems faced by novices and whether they proposed the use of textual analysis tools. Results: We identified 68 papers reporting 63 unique studies published in SE conferences and journals between 2005 and mid-2012. The most common criticisms of SRs were that they take a long time, that SE digital libraries are not appropriate for broad literature searches and that assessing the quality of empirical studies of different types is difficult. Conclusion: We recommend removing advice to use structured questions to construct search strings and including advice to use a quasi-gold standard based on a limited manual search to assist the construction of search stings and evaluation of the search process. Textual analysis tools are likely to be useful for inclusion/exclusion decisions and search string construction but require more stringent evaluation. SE researchers would benefit from tools to manage the SR process but existing tools need independent validation. Quality assessment of studies using a variety of empirical methods remains a major problem. © 2013 Elsevier B.V. All rights reserved. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Mapping Study; Systematic Literature Review; Systematic Review; Systematic Review Methodology; Digital Libraries; Empirical Studies; Literature Search; Mapping Studies; Quality Assessment; Recent Researches; Systematic Literature Review; Systematic Review; Textual Analysis; Software Engineering},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{2012,
	title = {Proceedings - 2012 IEEE 7th International Conference on Global Software Engineering Workshops, ICGSEW 2012},
	year = {2012},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84870692143&partnerID=40&md5=1fa4ad243b6ad8289096ee56f9c42238},
	abstract = {The proceedings contain 17 papers. The topics discussed include: a risk framework for new country compliance for global software companies; an extensible service for experts recommendation on distributed software development projects; DPMTool: a tool for decisions management in distributed software projects; configuration management: mother's little helper for global agile projects?; development of a set of best practices for distributed pair programming; elicitation of communication inherent risks in distributed software development; knowledge and contextual information management in global software development: challenges and perspectives; motivational factors for distributed software development teams; ontologies supporting the distributed software development: a systematic literature review; ReuseECOS: an approach to support global software development through software ecosystems; and DsdK: an ontology-based system to explore distributed software development experiments. © 2012 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Gomes2012154,
	author = {Gomes, Vanessa and Marczak, Sabrina},
	title = {Problems? We all know we have them. Do we have solutions too? A literature review on problems and their solutions in global software development},
	year = {2012},
	pages = {154 - 158},
	doi = {10.1109/ICGSE.2012.43},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84870667959&doi=10.1109%2FICGSE.2012.43&partnerID=40&md5=904c9eafa675ce96bad62b5125e53c0d},
	abstract = {Distribution of development processes has become common as a side effect of globalization. Working in a distributed setting brings challenges inherent to distance. The Software Engineering community has been investigating these challenges for over a decade, and issues regarding communication, coordination, and trust are frequently reported in literature. However, a few studies discuss solutions for these challenges. Frequently, best practices are described in a general context. In this paper we report our findings from a systematic literature review that aimed at identifying reported challenges and the proposed solutions to solve such challenges. In a time that distributed development has established its roots, it is important to move towards solutions to well-known problems. Our report aims to establish a baseline of problems that still need solutions. This baseline brings awareness to the global software engineering community. We finish discussing the implications for furthering the body of knowledge in the field. © 2012 IEEE. © 2012 Elsevier B.V., All rights reserved.},
	author_keywords = {Challenges; Global Software Development; Mitigation Strategies; Problems; Solutions; Systematic Literature Review; Challenges; Global Software Development; Mitigation Strategy; Problems; Systematic Literature Review; Engineering; Industrial Engineering; Solutions; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Azhar201249,
	author = {Azhar, Damir and Mendes, Emilia and Riddle, Patricia Jean},
	title = {A Systematic review of web resource estimation},
	year = {2012},
	journal = {ACM International Conference Proceeding Series},
	pages = {49 - 58},
	doi = {10.1145/2365324.2365332},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84867733071&doi=10.1145%2F2365324.2365332&partnerID=40&md5=a7f800509daf521ff4d3782685894e78},
	abstract = {Background: Web development plays an important role in today's industry, so an in depth view into Web resource estimation would be valuable. However a systematic review (SR) on Web resource estimation in its entirety has not been done. Aim: The aim of this paper is to present a SR of Web resource estimation in order to define the current state of the art, and to identify any research gaps that may be present. Method: Research questions that would address the current state of the art in Web resource estimation were first identified. A comprehensive literature search was then executed resulting in the retrieval of 84 empirical studies that investigated any aspect of Web resource estimation. Data extraction and synthesis was performed on these studies with these research questions in mind. Results: We have found that there are no guidelines with regards to what resource estimation technique should be used in a particular estimation scenario, how it should be implemented, and how its effectiveness should be evaluated. Accuracy results vary widely and are dependent on numerous factors. Research has focused on development effort/cost estimation, neglecting other facets of resource estimation like quality and maintenance. Size measures have been used in all but one study as a resource predictor. Conclusions: Our results suggest that there is plenty of work to be done in the field of Web resource estimation whether it be investigating a more comprehensive approach that considers more than a single resource facet, evaluating other possible resource predictors, or trying to determine guidelines that would help simplify the process of selecting a resource estimation technique. Copyright © 2012 ACM. © 2012 Elsevier B.V., All rights reserved.},
	author_keywords = {Systematic Review; Web Resource Estimation; Data Extraction; Empirical Studies; Literature Search; Research Questions; Resource Estimation; Size Measures; State Of The Art; Systematic Review; Web Development; Web Resources; Research; Software Engineering; World Wide Web; Estimation},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{2012,
	title = {PROMISE 2012 - 8th International Conference on Predictive Models in Software Engineering, Co-located with ESEM 2012},
	year = {2012},
	journal = {ACM International Conference Proceeding Series},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84867709309&partnerID=40&md5=75f158861d842d6bce5874155df2f138},
	abstract = {The proceedings contain 13 papers. The topics discussed include: factors characterizing reopened issues: a case study; learning to change projects; DRETOM: developer recommendation based on topic models for bug resolution; web effort estimation: the value of cross-company data set compared to single-company data set; StatREC: a graphical user interface tool for visual hypothesis testing of cost prediction models; a systematic review of web resource estimation; alternative methods using similarities in software effort estimation; can cross-company data improve performance in software effort estimation?; an adaptive approach with active learning in software fault prediction; size doesn't matter? on the value of software size features for effort estimation; a cost-benefit model for software quality assurance activities; and comparing the performance of fault prediction models which report multiple performance measures: reconstructing the confusion matrix. © 2012 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Dybå201219,
	author = {Dybå, Tore and Sjøberg, Dag I.K. and Cruzes, Daniela Soares},
	title = {What works for whom, where, when, and why? On the role of context in empirical software engineering},
	year = {2012},
	journal = {International Symposium on Empirical Software Engineering and Measurement},
	pages = {19 - 28},
	doi = {10.1145/2372251.2372256},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84867531768&doi=10.1145%2F2372251.2372256&partnerID=40&md5=45595f99af0a7a3ac8cca0c82081f50c},
	abstract = {Context is a central concept in empirical software engineering. It is one of the distinctive features of the discipline and it is an indispensable part of software practice. It is likely responsible for one of the most challenging methodological and theoretical problems: study-to-study variation in research findings. Still, empirical software engineering research is mostly concerned with attempts to identify universal relationships that are independent of how work settings and other contexts interact with the processes important to software practice. The aim of this paper is to provide an overview of how context affects empirical research and how empirical software engineering research can be better 'contextualized' in order to provide a better understanding of what works for whom, where, when, and why. We exemplify the importance of context with examples from recent systematic reviews and offer recommendations on the way forward. Copyright 2012 ACM. © 2012 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Methods; Evidence-based Software Engineering; Generalization; Sociotechnical System; Theory; Empirical Method; Evidence Based Software Engineering; Generalization; Sociotechnical Systems; Theory; Research; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Jalali201229,
	author = {Jalali, Samireh and Wohlin, Claes},
	title = {Systematic literature studies: Database searches vs. backward snowballing},
	year = {2012},
	journal = {International Symposium on Empirical Software Engineering and Measurement},
	pages = {29 - 38},
	doi = {10.1145/2372251.2372257},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84867499427&doi=10.1145%2F2372251.2372257&partnerID=40&md5=f9ade25e47f5c9d28d7a6ac63d30484e},
	abstract = {Systematic studies of the literature can be done in different ways. In particular, different guidelines propose different first steps in their recommendations, e.g. start with search strings in different databases or start with the reference lists of a starting set of papers. In software engineering, the main recommended first step is using search strings in a number of databases, while in information systems, snowballing has been recommended as the first step. This paper compares the two different search approaches for conducting literature review studies. The comparison is conducted by searching for articles addressing "Agile practices in global software engineering". The focus of the paper is on evaluating the two different search approaches. Despite the differences in the included papers, the conclusions and the patterns found in both studies are quite similar. The strengths and weaknesses of each first step are discussed separately and in comparison with each other. It is concluded that none of the first steps is outperforming the other, and the choice of guideline to follow, and hence the first step, may be context-specific, i.e. depending on the area of study. Copyright 2012 ACM. © 2012 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile Practices; Global Software Engineering; Snowballing; Systematic Literature Review; Agile Practices; Database Searches; Global Software Engineering; Literature Reviews; Reference List; Snowballing; Systematic Literature Review; Systematic Study; Search Engines; Software Engineering; Database Systems},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Final Open Access; Green Open Access}
}

@CONFERENCE{Riaz2012263,
	author = {Riaz, Mehwish},
	title = {Maintainability prediction of relational database-driven applications: A systematic review},
	year = {2012},
	volume = {2012},
	number = {1},
	pages = {263 - 272},
	doi = {10.1049/ic.2012.0034},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84865511715&doi=10.1049%2Fic.2012.0034&partnerID=40&md5=88ba81cdc5e442522104d3ab2e148415},
	abstract = {Background: Maintainability is an important quality attribute. Its prediction for relational database-driven applications can help organizations improve the maintainability of these applications. Aims: The aim of this paper is to present the results of a Systematic Literature Review - also known as Systematic Review (SR) - with an up-to-date account of the state of art on maintainability prediction and measures for relational database-driven applications, to compare these results with those from a previously conducted SR [19], and to provide a baseline for conducting further research in this area. Method: A SR on maintainability prediction for relational databasedriven applications was carried out using Kitchenham's guidelines for conducting SRs in Software Engineering. Results: The results show little evidence on maintainability prediction for relational database-driven applications with expert judgment as the most common prediction technique, coupling related measures as the most common predictors, and subjective assessment as most common maintainability measure. Conclusions: The presented results suggest a strong need for further investigating the area of maintainability prediction for relational database-driven applications. © 2012 Elsevier B.V., All rights reserved.},
	author_keywords = {Measures; Prediction; Relational Database-driven Sofwtare Applications.; Software Maintainability; Systematic Review; Expert Judgment; Measures; Prediction Techniques; Quality Attributes; Relational Database-driven Sofwtare Applications.; Software Maintainability; Subjective Assessments; Systematic Literature Review; Systematic Review; Database Systems; Forecasting; Software Engineering; Maintainability},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Sun2012171,
	author = {Sun, Yueming and Yang, Ye and Zhang, He and Zhang, Wen and Wang, Qing},
	title = {Towards evidence-based ontology for supporting systematic literature review},
	year = {2012},
	volume = {2012},
	number = {1},
	pages = {171 - 175},
	doi = {10.1049/ic.2012.0022},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84865497582&doi=10.1049%2Fic.2012.0022&partnerID=40&md5=7d2219866a47e27b7440790d5fdb9520},
	abstract = {[Background]: Systematic Literature Review (SLR) has become an important software engineering research method but costs tremendous efforts. [Aim]: This paper proposes an approach to leverage on empirically evolved ontology to support automating key SLR activities. [Method]: First, we propose an ontology, SLRONT, built on SLR experiences and best practices as a groundwork to capture common terminologies and their relationships during SLR processes; second, we present an extended version of SLRONT, the COSONT and instantiate it with the knowledge and concepts extracted from structured abstracts. Case studies illustrate the details of applying it for supporting SLR steps. [Results]: Results show that through using COSONT, we acquire the same conclusion compared with sheer manual works, but the efforts involved is significantly reduced. [Conclusions]: The approach of using ontology could effectively and efficiently support the conducting of systematic literature review. © 2012 Elsevier B.V., All rights reserved.},
	author_keywords = {Ontology; Software Cost Estimation; Structured Abstract; Systematic Literature Review; Extended Versions; Manual Work; Software Cost Estimations; Structured Abstract; Systematic Literature Review; Engineering; Ontology; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{de França2012156,
	author = {de França, Breno Bernard Nicolau and Travassos, Guilherme Horta},
	title = {Reporting guidelines for simulation-based studies in software engineering},
	year = {2012},
	volume = {2012},
	number = {1},
	pages = {156 - 160},
	doi = {10.1049/ic.2012.0019},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84865467353&doi=10.1049%2Fic.2012.0019&partnerID=40&md5=ed537d459b46331f539cee82f5cfa98c},
	abstract = {Background: Some scientific fields, such as automobile, drugs discovery or engineer have used simulation-based studies (SBS) to faster the observation of phenomena and evolve knowledge. All of them organize their working structure to perform computerized experiments based on explicit research protocols and evidence. The benefits have been many and great advancements are continuously obtained for the society. However, could the same approach be observed in Software Engineering (SE)? Are there research protocols and evidence based models available in SE for supporting SBS? Are the studies reports good enough to support their understanding and replication? AIM: To characterize SBS in SE and organize a set of reporting guidelines aiming at improving SBS' understandability, replicability, generalization and validity. METHOD: To undertake a secondary study to characterize SBS. Besides, to assess the quality of reports to understand the usually reported information regarding SBS. RESULTS: From 108 selected papers, it has been observed several relevant initiatives regarding SBS in software engineering. However, most of the reports lack information concerned with the research protocol, simulation model building and evaluation, used data, among others. SBS results are usually specific, making their generalization and comparison hard. No reporting standard has been observed. CONCLUSIONS: Advancements can be observed in SBS in Software Engineering. However, the lack of reporting consistency can reduce understandability, replicability, generalization and compromise their validity. Therefore, an initial set of guidelines is proposed aiming at improving SBS report quality. Further evaluation must be accomplished to assess the guidelines feasibility when used to report SBS in Software Engineering. © 2012 Elsevier B.V., All rights reserved.},
	author_keywords = {Computer Simulation; Guideline; Simulation Studies; Software Engineering; Systematic Review; Guideline; Replicability; Research Protocol; Scientific Fields; Simulation Model; Simulation Studies; Systematic Review; Understandability; Computer Simulation; Research; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{el-Attar2012187,
	author = {el-Attar, Mohamed and Miller, James},
	title = {Constructing high quality use case models: A systematic review of current practices},
	year = {2012},
	journal = {Requirements Engineering},
	volume = {17},
	number = {3},
	pages = {187 - 201},
	doi = {10.1007/s00766-011-0135-y},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84865720813&doi=10.1007%2Fs00766-011-0135-y&partnerID=40&md5=9e15444fd7686ea925522fb116bf00d1},
	abstract = {There is an increasing recognition for the need to develop high quality use case models from the professional and academic communities. Quality in use case models is of particular importance when they are utilized within a use case driven development process, whereby every aspect of development is driven by the models and influenced by their quality. Many practitioners and researchers have provided guidelines, suggestions and techniques to construct high quality use case models. This invaluable body of knowledge is disseminated across numerous literature resources. Without unifying this knowledge into one resource, it cannot be expected that a use case modeler would be fully aware of the entire body of knowledge and benefitting from it. This paper presents a systematic review that was conducted in order to identify and amalgamate this knowledge. The amalgamated knowledge is presented in a unified form, specifically as a set of 26 anti-patterns, which modelers can use to improve the quality of their models. © 2011 Springer-Verlag London Limited. © 2012 Elsevier B.V., All rights reserved.},
	author_keywords = {Anti-patterns; Systematic Review; Uml; Use Cases; Academic Community; Anti-patterns; Body Of Knowledge; Development Process; High Quality; Quality In Use; Systematic Review; Uml; Unified Form; Use Case Model; Use Cases; Requirements Engineering; Software Engineering},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Pacheco20122171,
	author = {Pacheco, Carla Leninca and García, Iván A.},
	title = {A systematic literature review of stakeholder identification methods in requirements elicitation},
	year = {2012},
	journal = {Journal of Systems and Software},
	volume = {85},
	number = {9},
	pages = {2171 - 2181},
	doi = {10.1016/j.jss.2012.04.075},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84863101018&doi=10.1016%2Fj.jss.2012.04.075&partnerID=40&md5=2628f1aeccfc9d51e18ddad8c791a298},
	abstract = {This paper presents a systematic review of relevant published studies related to topics in Requirements Engineering, specifically, concerning stakeholder identification methods in requirements elicitation, dated from 1984 to 2011. Addressing four specific research questions, this systematic literature review shows the following evidence gathered from these studies: current status of stakeholder identification in software requirement elicitation, the best practices recommended for its performance, consequences of incorrect identification in requirements quality, and, aspects which need to be improved. Our findings suggest that the analyzed approaches still have serious limitations in terms of covering all aspects of stakeholder identification as an important part of requirements elicitation. However, through correctly identifying and understanding the stakeholders, it is possible to develop high quality software. © 2012 Elsevier Inc. All rights reserved. © 2012 Elsevier B.V., All rights reserved.},
	author_keywords = {Requirements Elicitation; Requirements Engineering; Software Engineering; Stakeholder Identification; Systematic Review; Current Status; High-quality Software; Requirements Elicitation; Research Questions; Software Requirements; Stakeholder Identifications; Systematic Literature Review; Systematic Review; Software Engineering; Requirements Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Zumsteg2012S12,
	author = {Zumsteg, Jennifer M. and Cooper, Joyce Smith and Noon, Michael S.},
	title = {Systematic Review Checklist: A Standardized Technique for Assessing and Reporting Reviews of Life Cycle Assessment Data},
	year = {2012},
	journal = {Journal of Industrial Ecology},
	volume = {16},
	number = {SUPPL.1},
	pages = {S12 - S21},
	doi = {10.1111/j.1530-9290.2012.00476.x},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84860516354&doi=10.1111%2Fj.1530-9290.2012.00476.x&partnerID=40&md5=e4eceea72683dcd5a7747e5706509aaa},
	abstract = {Systematic review, including meta-analysis, is increasingly utilized in life cycle assessment (LCA). There are currently no widely recognized guidelines for designing, conducting, or reporting systematic reviews in LCA. Other disciplines such as medicine, ecology, and software engineering have both recognized the utility of systematic reviews and created standardized protocols for conducting and reporting systematic reviews. Based largely on the 2009 Preferred Reporting Items for Systematic Reviews and Meta-Analyses (PRISMA) statement, which updated the preferred format for reporting of such reviews in biomedical research, we provide an introduction to the topic and a checklist to guide the reporting of future LCA reviews in a standardized format. The standardized technique for assessing and reporting reviews of LCA (STARR-LCA) is a starting point for improving the utility of systematic reviews in LCA. © 2012 by Yale University. © 2012 Elsevier B.V., All rights reserved.},
	author_keywords = {Academic Publishing; Bias; Health Care; Industrial Ecology; Meta-analysis; Reporting Standards; Bias; Biomedical Research; Industrial Ecology; Life Cycle Assessment (lca); Meta-analysis; Systematic Review; Health Care; Life Cycle; Software Engineering; Reviews; Data Interpretation; Health Care; Industrial Ecology; Life Cycle Analysis; Literature Review; Medicine; Meta-analysis; Research Work; Standard (reference)},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Bronze Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{da Silva2012216,
	author = {da Silva, Fabio Q.B. and França, César},
	title = {Towards understanding the underlying structure of motivational factors for software engineers to guide the definition of motivational programs},
	year = {2012},
	journal = {Journal of Systems and Software},
	volume = {85},
	number = {2},
	pages = {216 - 226},
	doi = {10.1016/j.jss.2010.12.017},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-82955218872&doi=10.1016%2Fj.jss.2010.12.017&partnerID=40&md5=0db4f26900cfc7acbfe48560aa7f6f5f},
	abstract = {Aim: In this article, factors influencing the motivation of software engineers is studied with the goal of guiding the definition of motivational programs. Method: Using a set of 20 motivational factors compiled in a systematic literature review and a general theory of motivation, a survey questionnaire was created to evaluate the influence of these factors on individual motivation. Then, the questionnaire was applied on a semi-random sample of 176 software engineers from 20 software companies located in Recife-PE, Brazil. Results: The survey results show the actual level of motivation for each motivator in the target population. Using principal component analysis on the values of all motivators, a five factor structure was identified and used to propose a guideline for the creation of motivational programs for software engineers. Conclusions: The five factor structure provides an intuitive categorization for the set of variables and can be used to explain other motivational models presented in the literature. This contributes to a better understanding of motivation in software engineering. © 2010 Elsevier Inc. © 2012 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Software Engineering; Motivation; People Management; Software Development; Empirical Software Engineering; Factor Structure; General Theory; People Management; Semi-random; Software Company; Software Engineers; Systematic Literature Review; Engineering; Engineers; Motivation; Principal Component Analysis; Software Engineering; Surveys; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Kitchenham2012804,
	author = {Kitchenham, Barbara Ann and Sjøberg, Dag I.K. and Dybå, Tore and Pfahl, Dietmar and Brereton, Pearl and Budgen, David and Höst, Martin and Runeson, Per},
	title = {Three empirical studies on the agreement of reviewers about the quality of software engineering experiments},
	year = {2012},
	journal = {Information and Software Technology},
	volume = {54},
	number = {8},
	pages = {804 - 819},
	doi = {10.1016/j.infsof.2011.11.008},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84861576818&doi=10.1016%2Fj.infsof.2011.11.008&partnerID=40&md5=73150d3ae05327d448b56823a19a1818},
	abstract = {Context: During systematic literature reviews it is necessary to assess the quality of empirical papers. Current guidelines suggest that two researchers should independently apply a quality checklist and any disagreements must be resolved. However, there is little empirical evidence concerning the effectiveness of these guidelines. Aims: This paper investigates the three techniques that can be used to improve the reliability (i.e. the consensus among reviewers) of quality assessments, specifically, the number of reviewers, the use of a set of evaluation criteria and consultation among reviewers. We undertook a series of studies to investigate these factors. Method: Two studies involved four research papers and eight reviewers using a quality checklist with nine questions. The first study was based on individual assessments, the second study on joint assessments with a period of inter-rater discussion. A third more formal randomised block experiment involved 48 reviewers assessing two of the papers used previously in teams of one, two and three persons to assess the impact of discussion among teams of different size using the evaluations of the "teams" of one person as a control. Results: For the first two studies, the inter-rater reliability was poor for individual assessments, but better for joint evaluations. However, the results of the third study contradicted the results of Study 2. Inter-rater reliability was poor for all groups but worse for teams of two or three than for individuals. Conclusions: When performing quality assessments for systematic literature reviews, we recommend using three independent reviewers and adopting the median assessment. A quality checklist seems useful but it is difficult to ensure that the checklist is both appropriate and understood by reviewers. Furthermore, future experiments should ensure participants are given more time to understand the quality checklist and to evaluate the research papers. © 2012 Elsevier B.V. All rights reserved. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Studies; Experimentation; Human-intensive Experiments; Quality Evaluation; Software Engineering; Reliability; Software Engineering; Empirical Studies; Evaluation Criteria; Experimentation; Human-intensive Experiments; Inter-rater Reliabilities; Quality Evaluation; Quality Of Softwares; Systematic Literature Review; Quality Control},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Bronze Open Access; Green Accepted Open Access; Green Open Access}
}

@CONFERENCE{Dieste201136,
	author = {Dieste, Óscar and Fernández, Enrique and García-Martínez, Ramón and Juristo, Natalia},
	title = {Comparative analysis of meta-analysis methods: When to use which?},
	year = {2011},
	volume = {2011},
	number = {1},
	pages = {36 - 45},
	doi = {10.1049/ic.2011.0005},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-82955219713&doi=10.1049%2Fic.2011.0005&partnerID=40&md5=8c3f8335958123389c10dcc7d68c6341},
	abstract = {Background: Several meta-analysis methods can be used to quantitatively combine the results of a group of experiments, including the weighted mean difference, statistical vote counting, the parametric response ratio and the non-parametric response ratio. The software engineering community has focused on the weighted mean difference method. However, other meta-analysis methods have distinct strengths, such as being able to be used when variances are not reported. There are as yet no guidelines to indicate which method is best for use in each case. Aim: Compile a set of rules that SE researchers can use to ascertain which aggregation method is best for use in the synthesis phase of a systematic review. Method: Monte Carlo simulation varying the number of experiments in the meta analyses, the number of subjects that they include, their variance and effect size. We empirically calculated the reliability and statistical power in each case. Results: WMD is generally reliable if the variance is low, whereas its power depends on the effect size and number of subjects per meta-analysis; the reliability of RR is generally unaffected by changes in variance, but it does require more subjects than WMD to be powerful; NPRR is the most reliable method, but it is not very powerful; SVC behaves well when the effect size is moderate, but is less reliable with other effect sizes. Detailed tables of results are annexed. Conclusions: Before undertaking statistical aggregation in software engineering, it is worthwhile checking whether there is any appreciable difference in the reliability and power of the methods. If there is, software engineers should select the method that optimizes both parameters. © 2011 Elsevier B.V., All rights reserved.},
	author_keywords = {Effect Size; Meta-analysis; Reliability; Response Ratio (rr); Statistical Power; Vote Counting; Weighted Mean Difference (wmd); Effect Size; Meta-analysis; Response Ratio (rr); Statistical Power; Vote Counting; Weighted Mean; Computer Simulation; Engineering; Experiments; Reliability; Software Engineering; Software Reliability; Monte Carlo Methods},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Pardo-Calvache201161,
	author = {Pardo-Calvache, César Jesús and Pino, Francisco J. and García, Félix O. and Piattini, Mario Gerardo and Baldassarre, Maria Teresa},
	title = {Trends in Harmonization of Multiple Reference Models},
	year = {2011},
	journal = {Communications in Computer and Information Science},
	volume = {230},
	pages = {61 - 73},
	doi = {10.1007/978-3-642-23391-3_5},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84879477568&doi=10.1007%2F978-3-642-23391-3_5&partnerID=40&md5=9f06574788711818381a152bb8f30ce2},
	abstract = {Diverse models currently exist in the field of Software Engineering which help organizations to apply recommended practices in order to support ther multiple needs in the areas of software development, maintenance and operation, security, IT government, etc. Examples of such models are CMMI, ISO 9001, ISO 12207, ISO 27001, COBIT, ITIL. Nevertheless, many differences exist between these models, since each model defines its own structure, terminology, definitions and quality systems, amongst other aspects. This issue increases the complexity when an organization is required to apply two or more models in order to satisfy its needs. Organizations must, therefore, define the most appropriate means of choosing and implementing multi-models, and harmonization may be one solution. This paper presents a systematic literature review with the aim of analyzing the state of the art with regard to inititatives concerning the harmonization of multiple reference models. As a result, it has been concluded that there is currently a lack of guidelines with which to help organizations to implement the harmonization of multiple models, and of a unified terminology with which to homogenize the diversity of the structure of the different models and the harmonization techniques which can be applied. In order to address these issues, a framework to support the harmonization of multiple models is outlined. © Springer-Verlag Berlin Heidelberg 2011. © 2013 Elsevier B.V., All rights reserved.},
	author_keywords = {Harmonization; Multi-model; Multiple; Reference Models; Software Process Improvement; Systematic Review; Harmonization; Multi-model; Multiple; Reference Models; Software Process Improvement; Systematic Review; Societies And Institutions; Software Design; Terminology; Models},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Arcuri20111,
	author = {Arcuri, Andrea and Briand, Lionel C.},
	title = {A practical guide for using statistical tests to assess randomized algorithms in software engineering},
	year = {2011},
	journal = {Proceedings - International Conference on Software Engineering},
	pages = {1 - 10},
	doi = {10.1145/1985793.1985795},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79959871222&doi=10.1145%2F1985793.1985795&partnerID=40&md5=fea6b58cda20bb6d76ebbb6598039361},
	abstract = {Randomized algorithms have been used to successfully address many different types of software engineering problems. This type of algorithms employ a degree of randomness as part of their logic. Randomized algorithms are useful for difficult problems where a precise solution cannot be derived in a deterministic way within reasonable time. However, randomized algorithms produce different results on every run when applied to the same problem instance. It is hence important to assess the effectiveness of randomized algorithms by collecting data from a large enough number of runs. The use of rigorous statistical tests is then essential to provide support to the conclusions derived by analyzing such data. In this paper, we provide a systematic review of the use of randomized algorithms in selected software engineering venues in 2009. Its goal is not to perform a complete survey but to get a representative snapshot of current practice in software engineering research. We show that randomized algorithms are used in a significant percentage of papers but that, in most cases, randomness is not properly accounted for. This casts doubts on the validity of most empirical results assessing randomized algorithms. There are numerous statistical tests, based on different assumptions, and it is not always clear when and how to use these tests. We hence provide practical guidelines to support empirical research on randomized algorithms in software engineering © 2011 ACM. © 2011 Elsevier B.V., All rights reserved.},
	author_keywords = {Bonferroni Adjustment; Confidence Interval; Effect Size; Non-parametric Test; Parametric Test; Statistical Difference; Survey; Systematic Review; Bonferroni Adjustment; Confidence Interval; Effect Size; Non-parametric Test; Parametric Test; Statistical Differences; Systematic Review; Algorithms; Engineering; Parameter Estimation; Random Processes; Software Engineering; Statistical Tests; Surveys; Software Testing},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Zhang2011625,
	author = {Zhang, He and Ali Babar, Muhammad Ali and Tell, Paolo},
	title = {Identifying relevant studies in software engineering},
	year = {2011},
	journal = {Information and Software Technology},
	volume = {53},
	number = {6},
	pages = {625 - 637},
	doi = {10.1016/j.infsof.2010.12.010},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79953708792&doi=10.1016%2Fj.infsof.2010.12.010&partnerID=40&md5=bb7c19e0e182722d31546d77f2212740},
	abstract = {Context: Systematic literature review (SLR) has become an important research methodology in software engineering since the introduction of evidence-based software engineering (EBSE) in 2004. One critical step in applying this methodology is to design and execute appropriate and effective search strategy. This is a time-consuming and error-prone step, which needs to be carefully planned and implemented. There is an apparent need for a systematic approach to designing, executing, and evaluating a suitable search strategy for optimally retrieving the target literature from digital libraries. Objective: The main objective of the research reported in this paper is to improve the search step of undertaking SLRs in software engineering (SE) by devising and evaluating systematic and practical approaches to identifying relevant studies in SE. Method: We have systematically selected and analytically studied a large number of papers (SLRs) to understand the state-of-the-practice of search strategies in EBSE. Having identified the limitations of the current ad-hoc nature of search strategies used by SE researchers for SLRs, we have devised a systematic and evidence-based approach to developing and executing optimal search strategies in SLRs. The proposed approach incorporates the concept of 'quasi-gold standard' (QGS), which consists of collection of known studies, and corresponding 'quasi-sensitivity' into the search process for evaluating search performance. Results: We conducted two participant-observer case studies to demonstrate and evaluate the adoption of the proposed QGS-based systematic search approach in support of SLRs in SE research. Conclusion: We report their findings based on the case studies that the approach is able to improve the rigor of search process in an SLR, as well as it can serve as a supplement to the guidelines for SLRs in EBSE. We plan to further evaluate the proposed approach using a series of case studies on varying research topics in SE. © 2011 Elsevier B.V. All rights reserved. © 2011 Elsevier B.V., All rights reserved.},
	author_keywords = {Evidence-based Software Engineering; Quasi-gold Standard; Search Strategy; Systematic Literature Review; Critical Steps; Error Prones; Evidence Based Software Engineering; Gold Standards; Optimal Search Strategy; Quasi-gold Standard; Research Methodologies; Research Topics; Search Performance; Search Process; Search Steps; Search Strategies; Search Strategy; Systematic Literature Review; Digital Libraries; Gold; Software Engineering; Standards; Research},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Bai2011339,
	author = {Bai, Xu and Zhang, He and Huang, Liguo},
	title = {Empirical research in software process modeling: A systematic literature review},
	year = {2011},
	journal = {International Symposium on Empirical Software Engineering and Measurement},
	pages = {339 - 342},
	doi = {10.1109/esem.2011.43},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84863358063&doi=10.1109%2Fesem.2011.43&partnerID=40&md5=a1a77501620c0146622dd6234ef84066},
	abstract = {Recognized as one of the powerful technologies in software process engineering, Software Process Modeling (SPM) has received significant attention over the last three decades. Although empirical research plays a critical role in software engineering, the state-of-the-practice of empirical research in SPM has not been systematically reviewed. This paper serves as a status report of the assessment of empirical research in SPM by analyzing all refereed studies that were published in relevant venues from 1987 to 2008 using systematic review methodology. The primary findings indicate that in current SPM-related empirical studies, (1) software process management and improvement (SPI) was not yet the most popular primary research objectives; (2) exploratory empirical research methods, e.g., case study and action research, were dominantly used; (3) there were common issues in empirical research reports in terms of following rigorous reporting guidelines. Based on the review results, we also suggest the future needs for empirical research in SPM, in terms of research topics, SPM techniques, the strengths of research methodology and the rigors of empirical studies. © 2011 IEEE. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Research; Software Process Modeling And Simulation; Systematic Literature Review; Computer Software; Process Engineering; Empirical Research; Empirical Research Method; Research Methodologies; Software Process Engineerings; Software Process Management; Software Process Modeling; Software Process Modeling And Simulation; Systematic Literature Review; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{França2011154,
	author = {França, César and Gouveia, Tatiana B. and Santos, C. F. and Santana, Célio Andrade and da Silva, Fabio Q.B.},
	title = {Motivation in software engineering: A systematic review update},
	year = {2011},
	volume = {2011},
	number = {1},
	pages = {154 - 163},
	doi = {10.1049/ic.2011.0019},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-82955171616&doi=10.1049%2Fic.2011.0019&partnerID=40&md5=a2659f84f328dec4d837b041a0b432cc},
	abstract = {Background/Aim - Given the relevance and importance that the understanding of motivation has gained in the field of software engineering, this work was carried out in order to update the results of a literature review carried out in 2006 on motivation in software engineering. Method - Based on guidelines for this specific type of study, we replicated the original study protocol. Results - The combination of manual and automatic searches retrieved 6,534 papers, of which 53 relevant papers were selected for data extraction and analysis. Conclusions - Studies address motivation using several viewpoints and approaches and, even though the number of researches increased in this area, the overall understanding of what actually motivates software engineers does not seem to have significantly advanced in the last five years. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Characteristics; Motivation; Personality; Software Engineer; Software Engineering; Systematic Literature Review; Software Engineering; Automatic Searches; Characteristic; Data Extraction And Analysis; Literature Reviews; Personality; Software Engineer; Systematic Literature Review; Systematic Review; Motivation},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{van Hillegersberg2011133,
	author = {van Hillegersberg, Jos and Ligtenberg, Gerwin and Aydin, Mehmet Nafiz},
	title = {Getting agile methods to work for Cordys global software product development},
	year = {2011},
	journal = {Lecture Notes in Business Information Processing},
	volume = {91 LNBIP},
	pages = {133 - 152},
	doi = {10.1007/978-3-642-24815-3_8},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-80054777160&doi=10.1007%2F978-3-642-24815-3_8&partnerID=40&md5=f8d151ccada55707f20a97bb85e01aac},
	abstract = {Getting agile methods to work in global software development is a potentially rewarding but challenging task. Agile methods are relatively young and still maturing. The application to globally distributed projects is in its early stages. Various guidelines on how to apply and sometimes adapt agile methods have been proposed. However, systematic literature reviews reveal that detailed evaluative studies are scarce and limited to small and medium sized projects. This study presents a framework that integrates best practices of adapting and applying agile methods reported in the literature. The framework is applied to analyze the experiences of global software product development company Cordys in a seven year longitudinal case study. Both the framework and the experiences of Cordys documented in this paper will be of value to other larger projects that aim to be successful in applying agile in globally distributed projects. © 2011 Springer-Verlag. © 2014 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile Methods; Global Software Development; Global Teams; Globally Distributed Software Engineering; Offshoring; Scrum; Xp; Information Technology; Outsourcing; Product Development; Agile Methods; Distributed Software Engineering; Global Software Development; Global Teams; Off-shoring; Scrum; Xp; Software Design},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{da Silva2011899,
	author = {da Silva, Fabio Q.B. and Santos, André Luis Medeiros and Soares, Sergio Castelo Branco and França, César and Monteiro, Cleviton V.F. and MacIel, Felipe Farias},
	title = {Six years of systematic literature reviews in software engineering: An updated tertiary study},
	year = {2011},
	journal = {Information and Software Technology},
	volume = {53},
	number = {9},
	pages = {899 - 913},
	doi = {10.1016/j.infsof.2011.04.004},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79958214321&doi=10.1016%2Fj.infsof.2011.04.004&partnerID=40&md5=58f8a8bd7212f0bf800415cc020e0b51},
	abstract = {Context: Since the introduction of evidence-based software engineering in 2004, systematic literature review (SLR) has been increasingly used as a method for conducting secondary studies in software engineering. Two tertiary studies, published in 2009 and 2010, identified and analysed 54 SLRs published in journals and conferences in the period between 1st January 2004 and 30th June 2008. Objective: In this article, our goal was to extend and update the two previous tertiary studies to cover the period between 1st July 2008 and 31st December 2009. We analysed the quality, coverage of software engineering topics, and potential impact of published SLRs for education and practice. Method: We performed automatic and manual searches for SLRs published in journals and conference proceedings, analysed the relevant studies, and compared and integrated our findings with the two previous tertiary studies. Results: We found 67 new SLRs addressing 24 software engineering topics. Among these studies, 15 were considered relevant to the undergraduate educational curriculum, and 40 appeared of possible interest to practitioners. We found that the number of SLRs in software engineering is increasing, the overall quality of the studies is improving, and the number of researchers and research organisations worldwide that are conducting SLRs is also increasing and spreading. Conclusion: Our findings suggest that the software engineering research community is starting to adopt SLRs consistently as a research method. However, the majority of the SLRs did not evaluate the quality of primary studies and fail to provide guidelines for practitioners, thus decreasing their potential impact on software engineering practice. © 2011 Elsevier B.V. All rights reserved. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Mapping Studies; Software Engineering; Systematic Reviews; Tertiary Studies; Publishing; Software Engineering; Evidence Based Software Engineering; Mapping Studies; Research Methods; Software Engineering Practices; Systematic Literature Review; Systematic Literature Review (slr); Systematic Review; Tertiary Study; Engineering Education},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Dieste2011283,
	author = {Dieste, Óscar and Juristo, Natalia},
	title = {Systematic review and aggregation of empirical studies on elicitation techniques},
	year = {2011},
	journal = {IEEE Transactions on Software Engineering},
	volume = {37},
	number = {2},
	pages = {283 - 304},
	doi = {10.1109/TSE.2010.33},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79953167813&doi=10.1109%2FTSE.2010.33&partnerID=40&md5=dcfce962c74c244864927895ddb945dc},
	abstract = {We have located the results of empirical studies on elicitation techniques and aggregated these results to gather empirically grounded evidence. Our chosen surveying methodology was systematic review, whereas we used an adaptation of comparative analysis for aggregation because meta-analysis techniques could not be applied. The review identified 564 publications from the SCOPUS, IEEEXPLORE, and ACM DL databases, as well as Google. We selected and extracted data from 26 of those publications. The selected publications contain 30 empirical studies. These studies were designed to test 43 elicitation techniques and 50 different response variables. We got 100 separate results from the experiments. The aggregation generated 17 pieces of knowledge about the interviewing, laddering, sorting, and protocol analysis elicitation techniques. We provide a set of guidelines based on the gathered pieces of knowledge. © 2006 IEEE. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Elicitation Methods; Experimentation; Performance Measures; Systematic Literature Review; Software Engineering; Comparative Analysis; Elicitation Methods; Elicitation Techniques; Experimentation; Performance Measure; Protocol Analysis; Systematic Literature Review; Systematic Review; Computer Software},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Petersen2011317,
	author = {Petersen, Kai},
	title = {Measuring and predicting software productivity: A systematic map and review},
	year = {2011},
	journal = {Information and Software Technology},
	volume = {53},
	number = {4},
	pages = {317 - 343},
	doi = {10.1016/j.infsof.2010.12.001},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79951812187&doi=10.1016%2Fj.infsof.2010.12.001&partnerID=40&md5=c20bb55734ce8b0b0e6d446a03a9fcf0},
	abstract = {Context: Software productivity measurement is essential in order to control and improve the performance of software development. For example, by identifying role models (e.g. projects, individuals, tasks) when comparing productivity data. The prediction is of relevance to determine whether corrective actions are needed, and to discover which alternative improvement action would yield the best results. Objective: In this study we identify studies for software productivity prediction and measurement. Based on the identified studies we first create a classification scheme and map the studies into the scheme (systematic map). Thereafter, a detailed analysis and synthesis of the studies is conducted. Method: As a research method for systematically identifying and aggregating the evidence of productivity measurement and prediction approaches systematic mapping and systematic review have been used. Results: In total 38 studies have been identified, resulting in a classification scheme for empirical research on software productivity. The mapping allowed to identify the rigor of the evidence with respect to the different productivity approaches. In the detailed analysis the results were tabulated and synthesized to provide recommendations to practitioners. Conclusion: Risks with simple ratio-based measurement approaches were shown. In response to the problems data envelopment analysis seems to be a strong approach to capture multivariate productivity measures, and allows to identify reference projects to which inefficient projects should be compared. Regarding simulation no general prediction model can be identified. Simulation and statistical process control are promising methods for software productivity prediction. Overall, further evidence is needed to make stronger claims and recommendations. In particular, the discussion of validity threats should become standard, and models need to be compared with each other. © 2010 Elsevier B.V. All rights reserved. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Efficiency; Measurement; Performance; Prediction; Software Development; Software Productivity; Computer Software; Data Envelopment Analysis; Efficiency; Forecasting; Mapping; Measurement; Risk Assessment; Software Design; Software Engineering; Statistical Process Control; Analysis And Synthesis; Classification Scheme; Corrective Actions; Performance; Productivity Measure; Productivity Measurements; Software Productivity; Software Productivity Measurement; Productivity},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ghapanchi2011238,
	author = {Ghapanchi, Amir Hossein and Aurum, Aybüke},
	title = {Antecedents to IT personnel's intentions to leave: A systematic literature review},
	year = {2011},
	journal = {Journal of Systems and Software},
	volume = {84},
	number = {2},
	pages = {238 - 249},
	doi = {10.1016/j.jss.2010.09.022},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650604580&doi=10.1016%2Fj.jss.2010.09.022&partnerID=40&md5=56de97b87294f7f929f1b497b29a2d87},
	abstract = {This paper undertakes a systematic review to gain insight into existing studies on the turnover of information technology (IT) personnel. Our systematic review of 72 studies from 1980 to 2008 examines the background and trend of research into IT personnel's intentions to leave their workplaces, in addition to providing a taxonomy of the determinants of their intentions to quit as captured in IT literature. We note a huge growth in the number of academic papers on the topic since 1998. Moreover, most of the research on IT turnover has been undertaken in North America, followed by Asia. Based on the 72 extracted studies, we found a total of 70 conceptually distinct IT turnover drivers. We classified them into the 5 broad categories of individual, organisational, job-related, psychological, and environmental, each containing three to four sub-categories. Finally, this paper presents insightful recommendations for IT practitioners as well as for the research community. © 2010 Elsevier Inc. All rights reserved. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Employee Retention; Employee Turnover; Intention To Leave; It Personnel; Systematic Review; Hardware; Software Engineering; Academic Paper; Employee Retention; Employee Turnover; Intention To Leave; Organisational; Research Communities; Systematic Literature Review; Systematic Review; Job Satisfaction},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Falessi2010250,
	author = {Falessi, Davide and Ali Babar, Muhammad Ali and Cantone, Giovanni and Kruchten, Philippe},
	title = {Applying empirical software engineering to software architecture: Challenges and lessons learned},
	year = {2010},
	journal = {Empirical Software Engineering},
	volume = {15},
	number = {3},
	pages = {250 - 276},
	doi = {10.1007/s10664-009-9121-0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954757381&doi=10.1007%2Fs10664-009-9121-0&partnerID=40&md5=aec2730f915b1861a1ca4ec9946930d2},
	abstract = {In the last 15 years, software architecture has emerged as an important software engineering field for managing the development and maintenance of large, software-intensive systems. Software architecture community has developed numerous methods, techniques, and tools to support the architecture process (analysis, design, and review). Historically, most advances in software architecture have been driven by talented people and industrial experience, but there is now a growing need to systematically gather empirical evidence about the advantages or otherwise of tools and methods rather than just rely on promotional anecdotes or rhetoric. The aim of this paper is to promote and facilitate the application of the empirical paradigm to software architecture. To this end, we describe the challenges and lessons learned when assessing software architecture research that used controlled experiments, replications, expert opinion, systematic literature reviews, observational studies, and surveys. Our research will support the emergence of a body of knowledge consisting of the more widely-accepted and well-formed software architecture theories. © Springer Science+Business Media, LLC 2009. © 2010 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Software Engineering; Software Architecture; Body Of Knowledge; Controlled Experiment; Empirical Evidence; Empirical Software Engineering; Expert Opinion; Industrial Experience; Lessons Learned; Observational Study; Software Intensive Systems; Systematic Literature Review; Tools And Methods; Computer Software; Computer Software Maintenance; Software Architecture},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{González2010114,
	author = {González, Laura Sánchez and Rubio, Félix García and Ruiz-González, Francisco and Piattini, Mario Gerardo},
	title = {Measurement in business processes: A systematic review},
	year = {2010},
	journal = {Business Process Management Journal},
	volume = {16},
	number = {1},
	pages = {114 - 134},
	doi = {10.1108/14637151011017976},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-76449110206&doi=10.1108%2F14637151011017976&partnerID=40&md5=2996eb730ca95b5bba236b0d8a8dca66},
	abstract = {Purpose - The purpose of this paper is to analyze the current state of the art and trends with regard to business process measurement by means of a systematic review of literature. Design/methodology/approach - The results are obtained through a systematic review carried out according to existing relevant guidelines. Additionally, a specific methodology through which to systematically obtain all the most important journals is followed. In total, 19 relevant articles are selected and later analyzed. A subsequent critical analysis of the data obtained is applied to identify the gaps in the current literature. Findings - A considerable effort has been made by researchers in the field of business process measurement, particularly in recent years. Many of the defined measures for business processes have been applied to models (approximately 77 per cent). Most of the initiatives concerning business measurement have been adapted from the software engineering field. A small percentage of the existing business process measures has been empirically validated. Originality/value - The results presented contribute towards providing an updated overview of the current state of research into business process measurement, in order to identify existing research gaps and concerns on which ongoing and future research efforts on this topic can be focused. © Emerald Group Publishing Limited. © 2010 Elsevier B.V., All rights reserved.},
	author_keywords = {Business Process Re-engineering; Measurement; Process Management; Research Work},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Šmite201091,
	author = {Šmite, Darja and Wohlin, Claes and Gorschek, Tony and Feldt, Robert},
	title = {Empirical evidence in global software engineering: A systematic review},
	year = {2010},
	journal = {Empirical Software Engineering},
	volume = {15},
	number = {1},
	pages = {91 - 118},
	doi = {10.1007/s10664-009-9123-y},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-76749155713&doi=10.1007%2Fs10664-009-9123-y&partnerID=40&md5=68314c3be5b818abdd717a1695bcc7b9},
	abstract = {Recognized as one of the trends of the 21st century, globalization of the world economies brought significant changes to nearly all industries, and in particular it includes software development. Many companies started global software engineering (GSE) to benefit from cheaper, faster and better development of software systems, products and services. However, empirical studies indicate that achieving these benefits is not an easy task. Here, we report our findings from investigating empirical evidence in GSE-related research literature. By conducting a systematic review we observe that the GSE field is still immature. The amount of empirical studies is relatively small. The majority of the studies represent problem-oriented reports focusing on different aspects of GSE management rather than in-depth analysis of solutions for example in terms of useful practices or techniques. Companies are still driven by cost reduction strategies, and at the same time, the most frequently discussed recommendations indicate a necessity of investments in travelling and socialization. Thus, at the same time as development goes global there is an ambition to minimize geographical, temporal and cultural separation. These are normally integral parts of cross-border collaboration. In summary, the systematic review results in several descriptive classifications of the papers on empirical studies in GSE and also reports on some best practices identified from literature. © 2009 Springer Science+Business Media, LLC. © 2010 Elsevier B.V., All rights reserved.},
	author_keywords = {Distributed Software Engineering; Empirical Evidence; Empirical Studies; Global Software Engineering; Systematic Review; Distributed Software Engineering; Empirical Evidence; Empirical Studies; Global Software Engineering; Systematic Review; Economics; Engineering; Computer Software},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{2010,
	title = {14th International Conference on Evaluation and Assessment in Software Engineering, EASE 2010},
	year = {2010},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85180349551&partnerID=40&md5=3ec3b75e034acd3b78a5192cb2f7ce04},
	abstract = {The proceedings contain 17 papers. The topics discussed include: alignment of software product quality goals in two outsourcing relationships; a controlled experiment on team meeting style in software architecture evaluation; SCRUM and productivity in software projects: a systematic literature review; towards an evidence-based understanding of electronic data sources; models and tools for managing distributed software development: a systematic literature review; an approach based on visual text mining to support categorization and classification in the systematic mapping; field study on requirements engineering artefacts and patterns; and the effect of reasoning strategies on success in early learning of programming: lessons learned from an external experiment replication. © 2023 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Zhang2010,
	author = {Zhang, He and Ali Babar, Muhammad Ali},
	title = {On Searching Relevant Studies in Software Engineering},
	year = {2010},
	pages = {},
	doi = {10.14236/ewic/EASE2007.14},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85180147657&doi=10.14236%2Fewic%2FEASE2007.14&partnerID=40&md5=ee4e53b84364b40111399f214f12d9ea},
	abstract = {BACKGROUND: Systematic Literature Review (SLR) has become an important research methodology in software engineering since 2004. One critical step in applying this methodology is to design and execute appropriate and effective search strategy. This is quite time consuming and error-prone step, which needs to be carefully planned and implemented. There is an apparent need of a systematic approach to designing, executing, and evaluating a suitable search strategy for optimally retrieving the target literature from digital libraries. OBJECTIVE: The main objective of the research reported in this paper is to improve the search step of doing SLRs in SE by devising and evaluating systematic and practical approaches to identifying relevant studies in SE. OUTCOMES: We have systematically selected and analytically studied a large number of papers to understand the state-of-the-practice of search strategies in EBSE. Having identified the limitations of the current ad-hoc nature of search strategies used by SE researchers for SLR, we have devised a systematic approach to developing and executing optimal search strategies in SLRs. The proposed approach incorporates the concept of ‘quasi-gold standard’, which consists of collection of known studies and corresponding ‘quasi-sensitivity’ into the search process for evaluating search performance. We report the case study and its finding to demonstrate that the approach is able to improve the rigor of search process in an SLR, and can serves as the supplements to the guidelines for SLRs in EBSE. We plan to further evaluate the proposed approach using several case studies with varying topics in software engineering. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Evidence-based Software Engineering; Quasi-gold Standard; Search Strategy; Systematic Literature Review; Digital Libraries; Case-studies; Critical Steps; Evidence Based Software Engineering; Gold Standards; Informatics; Quasi-gold Standard; Research Methodologies; Search Process; Search Strategies; Systematic Literature Review; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Chen2010,
	author = {Chen, Lianipng and Ali Babar, Muhammad Ali and Zhang, He},
	title = {Towards an Evidence-Based Understanding of Electronic Data Sources},
	year = {2010},
	pages = {},
	doi = {10.14236/ewic/EASE2007.17},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85180147148&doi=10.14236%2Fewic%2FEASE2007.17&partnerID=40&md5=0d4d4b01fac7649707ce09b7490e7908},
	abstract = {Systematic Literature Reviews and Systematic Mapping Studies are relatively new forms of secondary studies in software engineering. Identifying relevant papers from various Electronic Data Sources (EDS) is one of the key activities of conducting these kinds of studies. Hence, the selection of EDS for searching the potentially relevant papers is an important decision, which can affect a study’s coverage of relevant papers. Researchers usually select EDS mainly based on personal knowledge, experience, and preferences and/or recommendations by other researchers. We believe that building an evidence-based understanding of EDS can enable researchers to make more informed decisions about the selection of EDS. This paper reports our initial effort towards this end. We propose an initial set of metrics for characterizing the EDS from the perspective of the needs of secondary studies. We explain the usage and benefits of the proposed metrics using the data gathered from two secondary studies. We also tried to synthesize the data from the two studies and that from literature to provide initial evidence-based heuristics for EDS selection. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Database Selection; Evidence-based Software Engineering; Primary Study Selection; Search Engine Selection; Systematic Literature Review; Systematic Mapping Study; Mapping; Database Selection; Electronic Data Sources; Engine Selection; Evidence Based Software Engineering; Evidence-based; Informatics; Primary Study Selection; Search Engine Selection; Systematic Literature Review; Systematic Mapping Studies; Search Engines},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Park2010208,
	author = {Park, Shelly S. and Maurer, Frank},
	title = {A literature review on story test driven development},
	year = {2010},
	journal = {Lecture Notes in Business Information Processing},
	volume = {48 LNBIP},
	pages = {208 - 213},
	doi = {10.1007/978-3-642-13054-0_20},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84876212133&doi=10.1007%2F978-3-642-13054-0_20&partnerID=40&md5=db5420772b9e6ddf2fbd378e25e38c78},
	abstract = {This paper presents a literature review on story-test driven development. Our findings suggest that there are many lessons learned papers that provide anecdotal evidence about the benefits and issues related to the story test driven development. We categorized these findings into seven themes: cost, time, people, code design, testing tools, what to test and test automation. We analyzed research papers on story test driven development to find out how many of these anecdotal findings were critically examined by researchers and analyzed the gaps in between. The analysis can be used by researchers as a ground for further empirical investigation. © 2010 Springer-Verlag Berlin Heidelberg. © 2014 Elsevier B.V., All rights reserved.},
	author_keywords = {Agile Software Development; Empirical Software Engineering; Executable Acceptance Test Driven Development; Requirements; Story Test Driven Development; Systematic Review; Testing; Acceptance Tests; Research; Testing; Agile Software Development; Empirical Software Engineering; Requirements; Systematic Review; Test Driven Development; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Kitchenham2010792,
	author = {Kitchenham, Barbara Ann and Pretorius, Rialette and Budgen, David and Brereton, Pearl and Turner, Mark and Niazi, Mahmood K. and Linkman, Stephen G.},
	title = {Systematic literature reviews in software engineering-A tertiary study},
	year = {2010},
	journal = {Information and Software Technology},
	volume = {52},
	number = {8},
	pages = {792 - 805},
	doi = {10.1016/j.infsof.2010.03.006},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79953727654&doi=10.1016%2Fj.infsof.2010.03.006&partnerID=40&md5=760b97495535e4a33e4b0ee071e7e355},
	abstract = {Context: In a previous study, we reported on a systematic literature review (SLR), based on a manual search of 13 journals and conferences undertaken in the period 1st January 2004 to 30th June 2007. Objective: The aim of this on-going research is to provide an annotated catalogue of SLRs available to software engineering researchers and practitioners. This study updates our previous study using a broad automated search. Method: We performed a broad automated search to find SLRs published in the time period 1st January 2004 to 30th June 2008. We contrast the number, quality and source of these SLRs with SLRs found in the original study. Results: Our broad search found an additional 35 SLRs corresponding to 33 unique studies. Of these papers, 17 appeared relevant to the undergraduate educational curriculum and 12 appeared of possible interest to practitioners. The number of SLRs being published is increasing. The quality of papers in conferences and workshops has improved as more researchers use SLR guidelines. Conclusion: SLRs appear to have gone past the stage of being used solely by innovators but cannot yet be considered a main stream software engineering research methodology. They are addressing a wide range of topics but still have limitations, such as often failing to assess primary study quality. © 2010 Elsevier B.V. All rights reserved. © 2017 Elsevier B.V., All rights reserved.},
	author_keywords = {Mapping Study; Software Engineering; Systematic Literature Review; Tertiary Study; Software Engineering; Automated Searches; Mapping Studies; Study Qualities; Systematic Literature Review; Systematic Literature Review (slr); Tertiary Study; Time-periods; Engineering Research},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{da Silva201087,
	author = {da Silva, Fabio Q.B. and Costa, Catarina De Souza and França, César and Prikladnicki, Rafael},
	title = {Challenges and solutions in Distributed Software Development Project Management: A systematic literature review},
	year = {2010},
	pages = {87 - 96},
	doi = {10.1109/ICGSE.2010.18},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-78149334329&doi=10.1109%2FICGSE.2010.18&partnerID=40&md5=23b736cfe4cba407ad6bcd61a9f1d7dd},
	abstract = {This paper presents a systematic literature review of the challenges, best practices, models, and tools in Distributed Software Development (DSD) Project Management. The objective is to collect and systematize reported knowledge in terms of what are the difficulties in managing DSD projects, what are the best practices to overcome these difficulties, and how existing models and tools support these practices. We found 54 works related to DSD project management, published between 1998 and 2009. Using the data systematically extracted from these works, we propose an evidence-based DSD project management improvement model. Our contention is that this model can support practitioners and researchers to better understand the landscape of DSD project challenges and devise more effective solutions to improve project management in a distributed setting. © 2010 IEEE. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Distributed Software Development; Project Management; Software Engineering; Systematic Literature Review; Project Management; Software Design; Software Engineering; Best Practices; Distributed Software Development; Effective Solution; Evidence-based; Systematic Literature Review; Information Management},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{da Silva2010,
	author = {da Silva, Fabio Q.B. and Santos, André Luis Medeiros and Soares, Sergio Castelo Branco and França, César and Monteiro, Cleviton V.F.},
	title = {A critical appraisal of systematic reviews in software engineering from the perspective of the research questions asked in the reviews},
	year = {2010},
	pages = {},
	doi = {10.1145/1852786.1852830},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-78149269054&doi=10.1145%2F1852786.1852830&partnerID=40&md5=3b4eea30614b5188589f7d7e86a3ed59},
	abstract = {After a seminal article introducing-evidence based software engineering in 2004, systematic reviews (SR) have been increasingly used as a method for conducting secondary studies in software engineering. Our goal is to critically appraise the use of SR in software engineering with respect to the research questions asked and the ways the questions were used in the reviews. We analyzed 53 literature reviews that had been collected in two published tertiary studies. We found that over 65% of the research questions asked in the reviews were exploratory and only 15% investigated causality questions. We concluded that there is a need for a consistent use of terminology to classify secondary studies and that reports of literature reviews should follow reporting guidelines to support assessment and comparison. © 2010 ACM. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Mapping Studies; Software Engineering; Systematic Reviews; Computer Software; Measurement; Evidence Based Software Engineering; Literature Reviews; Mapping Studies; Research Questions; Systematic Review; Tertiary Study; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Ali Babar2009346,
	author = {Ali Babar, Muhammad Ali and Zhang, He},
	title = {Systematic literature reviews in software engineering: Preliminary results from interviews with researchers},
	year = {2009},
	pages = {346 - 355},
	doi = {10.1109/ESEM.2009.5314235},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-72449188610&doi=10.1109%2FESEM.2009.5314235&partnerID=40&md5=c8ea168ddabe310c1d71507fa1abc52a},
	abstract = {Systematic Literature Reviews (SLRs) have been gaining significant attention from software engineering researchers since 2004. Several researchers have reported their experiences of and lessons learned from applying systematic reviews to different subject matters in software engineering. However, there has been no attempt at independently exploring experiences and perceptions of the practitioners of systematic reviews in order to gain an in-depth understanding of various aspects of systemic reviews as a new research methodology in software engineering. We assert that there is a need of evidence-based body of knowledge about the application of systematic reviews in software engineering. To address this need, we have started an empirical research program that aims to contribute to the growing body of knowledge about systematic reviews in software engineering. This paper reports the design, logistics, and results of the first phase empirical study carried out in this program. The results provide interesting insights into different aspects of systematic reviews based on the analysis of the data gathered from 17 interviewees with varying levels of knowledge of and experiences in systematic reviews. The findings from this study are expected to contribute to the existing knowledge about using systematic reviews and help further improve the state-of-the-practice of this research methodology in software engineering. © 2009 IEEE. © 2010 Elsevier B.V., All rights reserved.},
	author_keywords = {Body Of Knowledge; Empirical Research; Empirical Studies; In-depth Understanding; Lessons Learned; Research Methodologies; Subject Matters; Systematic Literature Review; Systematic Review; Computer Software; Research; Knowledge Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Pérez Lamancha200923,
	author = {Pérez Lamancha, Beatriz and Polo, Macario and Piattini, Mario Gerardo},
	title = {Software product line testing - A systematic review},
	year = {2009},
	volume = {1},
	pages = {23 - 30},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-74549172117&partnerID=40&md5=73298cb437e08a44dabb388f074d6efb},
	abstract = {Software product lines constitute a new paradigm where industrial production techniques are adapted and applied to software development. Reuse and the maintenance of traceability between the different artefacts in the line are fundamental requirements in this paradigm, articulating the best practices for software development in an environment that is perfectly controlled by software engineering methods. This article presents a systematic review of the literature which deals with testing in software product lines. The objective is to analyse the existing approaches to testing in software product lines, discussing the significant issues related to this area of knowledge and providing an up-to-date state of the art which can serve as a basis for innovative research activities. The paper also analyses how SPL research can contribute and dynamise the research in software testing. © 2010 Elsevier B.V., All rights reserved.},
	author_keywords = {Software Product Line; Systematic Review; Testing; Best Practice; Industrial Production; Innovative Research; Software Development; Software Engineering Methods; Software Product Line; State Of The Art; Systematic Review; Computer Software Maintenance; Computer Software Selection And Evaluation; Network Architecture; Research; Software Design; Software Testing; Computer Software Reusability},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Budgen2009410,
	author = {Budgen, David and Bailey, John and Turner, Mark and Kitchenham, Barbara Ann and Brereton, Pearl and Charters, Stuart M.},
	title = {Cross-domain investigation of empirical practices},
	year = {2009},
	journal = {IET Software},
	volume = {3},
	number = {5},
	pages = {410 - 421},
	doi = {10.1049/iet-sen.2008.0106},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-70349741123&doi=10.1049%2Fiet-sen.2008.0106&partnerID=40&md5=2c828c188f1604210bff20b1dbb7e823},
	abstract = {The authors are seeking the best ways to employ evidence-based practices in software engineering research and practice so that the outcomes can inform practice and policy-making. The objective of this study is to investigate how other academic disciplines use evidence-based practices in order to help assess the guidelines that the authors have developed for conducting systematic literature reviews in software engineering. They undertook two studies to investigate how other domains used evidence-based practices. One used a questionnaire that was administered to a set of experts, and this was then followed up with a study that used semi-structured interviews to gain a deeper understanding. As a result, the authors have identified how a number of disciplines that experience similar empirical constraints to those that apply to software engineering employ and rank different forms of empirical data. In conclusion, the authors describe the resulting changes that they made to their systematic literature review guidelines and also identify some issues that this study raises for empirical software engineering. © 2009 The Institution of Engineering and Technology. © 2009 Elsevier B.V., All rights reserved.},
	author_keywords = {Cross-domain; Empirical Data; Empirical Software Engineering; Evidence-based Practices; Policy Making; Semi Structured Interviews; Systematic Literature Review; Occupational Therapy; Computer Software},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Oates2009,
	author = {Oates, Briony J. and Capper, Graham},
	title = {Using systematic reviews and evidence-based software engineering with masters students},
	year = {2009},
	pages = {},
	doi = {10.14236/ewic/ease2009.10},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85086058770&doi=10.14236%2Fewic%2Fease2009.10&partnerID=40&md5=e55e54969387dea309ce820371906568},
	abstract = {Context: The problem of teaching research skills to masters students. In particular, improving their literature reviews, assessing them and providing good feedback. Objectives: To introduce systematic reviews and evidence-based software engineering (EBSE) guidance into our teaching, provide an experience report and empirical data, and investigate the results. Methods: A systematic review requirement was introduced into the students’ assessed work. The format of the assessment brief (also provided in this paper) was influenced by previous research on EBSE work with students. Qualitative and quantitative data was generated, and statistical analysis investigated the students’ performance across the different elements of the systematic review. Results: Most students could do a systematic review and more useful feedback could be given. The assessment brief deviated from the normal EBSE guidelines in order to address previous difficulties. This modification was successful. Differences were found in student marks for different elements of the systematic reviews, with a large effect size for differing scores between ‘search’ and’criteria’, and ‘search’ and ‘evaluation’. Conclusions: Introducing systematic reviews and EBSE guidance can improve students’ literature handing skills and support improved feedback. The EBSE guidance should be modified for students and novice researchers to incorporate the process of developing a well-defined research question. Further work should investigate the differing performance across different elements of the systematic review. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Assessment; Evidence-based Software Engineering; Feedback; Research Methods; Systematic Review; Teaching; Engineering Research; Feedback; Software Engineering; Teaching; Assessment; Evidence Based Software Engineering; Evidence Based Software Engineerings (ebse); Literature Reviews; Quantitative Data; Research Questions; Systematic Review; Teaching Researches; Students},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{2009,
	title = {13th International Conference on Evaluation and Assessment in Software Engineering, EASE 2009},
	year = {2009},
	pages = {},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85067454195&partnerID=40&md5=e616a6f0692528b734b5b410865bbe01},
	abstract = {The proceedings contain 16 papers. The topics discussed include: investigating the use of chronological splitting to compare software cross-company and single-company effort predictions: a replicated study; empirical validation of a requirements engineering process guide; reference-based search strategies in systematic reviews; building an expert-based web effort estimation model using Bayesian networks; does an 80:20 rule apply to Java coupling?; an evaluation of quality checklist proposals – a participant-observer case study; preliminary reporting guidelines for experience papers; factors explaining external quality in 54 case studies of software development projects; and using systematic reviews and evidence-based software engineering with masters students. © 2019 Elsevier B.V., All rights reserved.},
	type = {Conference review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Stol2009156,
	author = {Stol, Klaas Jan and Ali Babar, Muhammad Ali},
	title = {Reporting empirical research in open source software: The state of practice},
	year = {2009},
	journal = {IFIP Advances in Information and Communication Technology},
	volume = {299},
	pages = {156 - 169},
	doi = {10.1007/978-3-642-02032-2_15},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84944251760&doi=10.1007%2F978-3-642-02032-2_15&partnerID=40&md5=ae6b837de0de4ca0618b06fe8c19af13},
	abstract = {Background: The number of reported empirical studies of Open Source Software (OSS) has continuously been increasing. However, there has been no effort to systematically review the state of the practice of reporting empirical studies of OSS with respect to the recommended standards of performing and reporting empirical studies in software engineering. It is important to understand, how to report empirical studies of OSS in order to make them useful for practitioners and researchers. Research aim: The aim of our research is to gain insights in the state of the practice of reporting empirical studies of OSS in order to identify the gaps to be filled for improving the quality of evidence being provided for OSS. Method: To that end, we decided to systematically review the empirical studies of OSS. A total of 63 papers reporting empirical studies were selected from the four editions of the Proceedings of the International Conference on Open Source Systems. The data were extracted and synthesised from the selected papers for analysis. Results and conclusions: We have found that the quality of the reported OSSrelated empirical studies needs to be significantly improved. Based on the results of our systematic review and general principles of reporting good empirical research, we present a set of guidelines for reporting OSS-related empirical studies. The suggested guidelines are expected to help the research community to improve the quality of reported studies. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Research; Open Source; Reporting Guidelines; Information Dissemination; Open Systems; Empirical Research; Open Source System; Open Sources; Reporting Guidelines; Research Communities; State Of Practice; State Of The Practice; Systematic Review; Open Source Software},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Bronze Open Access}
}

@ARTICLE{Budgen2009,
	author = {Budgen, David and Zhang, Cheng},
	title = {Preliminary reporting guidelines for experience papers},
	year = {2009},
	pages = {},
	doi = {10.14236/ewic/ease2009.8},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84865526606&doi=10.14236%2Fewic%2Fease2009.8&partnerID=40&md5=ec0b78078af1e1c0ae4944b60caf8312},
	abstract = {Context: When undertaking a systematic literature review or a mapping study software engineering, it is likely that only a small set of experimental studies will be available. In conducting a mapping study on the theme of software design patterns, we found only 11 papers describing experiments that studied the use of patterns. Objectives: To investigate whether we could obtain further evidence by examining the experiences offered in papers that were essentially observational in nature. To use this experience to suggest how such studies can best be reported. Method: We identified suitable studies from those identified in our systematic search and undertook data extraction from them. We then analysed those that were of most use, to identify what characteristics made their reporting useful. Results: We found 18 experience papers, but after analysis, this set was reduced to four. Only one of these provided a clear link between practical experiences and the lessons they reported. Our preliminary reporting guidelines are based upon both good and poor papers, as well as the guidelines proposed for other forms of empirical study. Conclusions: We draw upon our experiences of data extraction, and of the one good example to suggest reporting guidelines for experience papers. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Design Patterns; Empirical Studies; Evidence-based; Observational Studies; Data Mining; Extraction; Mapping; Paper; Software Design; Design Patterns; Empirical Studies; Evidence-based; Observational Study; Practical Experience; Software Design Patterns; Systematic Literature Review; Systematic Searches; Search Engines},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Kitchenham2009,
	author = {Kitchenham, Barbara Ann and Brereton, Pearl and Budgen, David and Li, Zhi},
	title = {An evaluation of quality checklist proposals – A participant-observer case study},
	year = {2009},
	pages = {},
	doi = {10.14236/ewic/ease2009.7},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-77956740113&doi=10.14236%2Fewic%2Fease2009.7&partnerID=40&md5=a122e0370ecf95b2efd130783333cfde},
	abstract = {Background: A recent set of guidelines for software engineering systematic literature reviews (SLRs) includes a list of quality criteria obtained from the literature. The guidelines suggest that the list can be used to construct a tailored set of questions to evaluate the quality of primary studies. Aim: This paper aims to evaluate whether the list of quality criteria help researchers construct tailored quality checklists. Method: We undertook a participant-observer case study to investigate the list of quality criteria. The “case” in this study was the planning stage of a systematic literature review on unit testing. Results: The checklists in our SLR guidelines do not provide sufficient help with the construction of a quality checklist for a specific SLR either for novices or for experienced researchers. However, the checklists are reasonably complete and lead to the use of a common terminology for quality questions selected for a specific systematic literature review. Conclusions: The guidelines document should be amended to include a much shorter generic checklist. Researchers might find it useful to adopt a team-based process for quality checklist construction and provide suggestions for answering quality checklist questions. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Case Study; Guidelines Evaluation; Primary Study Quality; Quality Checklists; Systematic Literature Review; Software Engineering; Guidelines Evaluation; Planning Stages; Quality Criteria; Set Of Questions; Study Qualities; Systematic Literature Review; Unit Testing; Quality Control},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@CONFERENCE{Dieste2008769,
	author = {Dieste, Óscar and López, Marta and Ramos, Felicidad},
	title = {Obtaining well-founded practices about elicitation techniques by means of an update of a previous systematic review},
	year = {2008},
	pages = {769 - 772},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84870456219&partnerID=40&md5=2cc387ec5f7f80516f4aacb0bb9e5602},
	abstract = {Several studies point out that elicitation techniques achieve different results when applied in different contexts. This paper presents some recommendations about the situations in which elicitation techniques are useful. Recommendations are based on a previous systematic review, which was updated and expanded with 13 new empirical studies and more than 60 new empirical results. The aggregation process generated 5 new evidences and modified 4 existing ones. In the previous review, it was found that interviews were one of the most adequate techniques in most situations. The new evidence supports the same conclusion. © 2013 Elsevier B.V., All rights reserved.},
	author_keywords = {Aggregation Process; Elicitation Techniques; Empirical Studies; Systematic Review; Agglomeration; Knowledge Engineering; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Dybå2008178,
	author = {Dybå, Tore and Dingsøyr, Torgeir},
	title = {Strength of Evidence in Systematic Reviews in Software Engineering},
	year = {2008},
	pages = {178 - 187},
	doi = {10.1145/1414004.1414034},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-62949200408&doi=10.1145%2F1414004.1414034&partnerID=40&md5=93647a0939bc92cfb912448503603cfb},
	abstract = {Systematic reviews are only as good as the evidence they are based on. It is important, therefore, that users of systematic reviews know how much confidence they can place in the conclusions and recommendations arising from such reviews. In this paper we present an overview of some of the most influential systems for assessing the quality of individual primary studies and for grading the overall strength of a body of evidence. We also present an example of the use of such systems based on a systematic review of empirical studies of agile software development. Our findings suggest that the systems used in other disciplines for grading the strength of evidence for and reporting of systematic reviews, especially those that take account of qualitative and observational studies are of particular relevance for software engineering. Copyright 2008 ACM. © 2009 Elsevier B.V., All rights reserved.},
	author_keywords = {Quality Assessment; Strength Of Evidence; Systematic Review; Software Engineering; Agile Software Development; Empirical Studies; Know Hows; Observational Studies; Quality Assessment; Strength Of Evidence; Systematic Review; Computer Software Selection And Evaluation},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Bjørnson20081055,
	author = {Bjørnson, Finn Olav and Dingsøyr, Torgeir},
	title = {Knowledge management in software engineering: A systematic review of studied concepts, findings and research methods used},
	year = {2008},
	journal = {Information and Software Technology},
	volume = {50},
	number = {11},
	pages = {1055 - 1068},
	doi = {10.1016/j.infsof.2008.03.006},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-49549089759&doi=10.1016%2Fj.infsof.2008.03.006&partnerID=40&md5=bf70ab1ece84a4e34f589717d3fadbd1},
	abstract = {Software engineering is knowledge-intensive work, and how to manage software engineering knowledge has received much attention. This systematic review identifies empirical studies of knowledge management initiatives in software engineering, and discusses the concepts studied, the major findings, and the research methods used. Seven hundred and sixty-two articles were identified, of which 68 were studies in an industry context. Of these, 29 were empirical studies and 39 reports of lessons learned. More than half of the empirical studies were case studies. The majority of empirical studies relate to technocratic and behavioural aspects of knowledge management, while there are few studies relating to economic, spatial and cartographic approaches. A finding reported across multiple papers was the need to not focus exclusively on explicit knowledge, but also consider tacit knowledge. We also describe implications for research and for practice. © 2008 Elsevier B.V. All rights reserved. © 2008 Elsevier B.V., All rights reserved.},
	author_keywords = {Knowledge Management; Learning Software Organization; Software Engineering; Software Process Improvement; Systematic Review; Administrative Data Processing; Data Mining; Engineering Research; Industrial Management; Information Management; Information Science; Knowledge Management; Management; Management Information Systems; Management Science; Mapping; Software Engineering; Technology; Behavioural Aspects; Case Studies; Empirical Studies; Engineering Knowledge; Explicit Knowledge; Learning Software Organization; Lessons Learned; Research Methods; Software Process Improvement; Systematic Review; Systematic Reviews; Tacit Knowledge; Knowledge Engineering},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Green Accepted Open Access; Green Open Access}
}

@ARTICLE{Petersen2008,
	author = {Petersen, Kai and Feldt, Robert and Mujtaba, Shahid and Mattsson, Michael},
	title = {Systematic mapping studies in software engineering},
	year = {2008},
	pages = {},
	doi = {10.14236/ewic/ease2008.8},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85088075417&doi=10.14236%2Fewic%2Fease2008.8&partnerID=40&md5=5c6c40ee118a1cd1a87ce888a77f590a},
	abstract = {BACKGROUND: A software engineering systematic map is a defined method to build a classification scheme and structure a software engineering field of interest. The analysis of results focuses on frequencies of publications for categories within the scheme. Thereby, the coverage of the research field can be determined. Different facets of the scheme can also be combined to answer more specific research questions. OBJECTIVE: We describe how to conduct a systematic mapping study in software engineering and provide guidelines. We also compare systematic maps and systematic reviews to clarify how to chose between them. This comparison leads to a set of guidelines for systematic maps. METHOD: We have defined a systematic mapping process and applied it to complete a systematic mapping study. Furthermore, we compare systematic maps with systematic reviews by systematically analyzing existing systematic reviews. RESULTS: We describe a process for software engineering systematic mapping studies and compare it to systematic reviews. Based on this, guidelines for conducting systematic maps are defined. CONCLUSIONS: Systematic maps and reviews are different in terms of goals, breadth, validity issues and implications. Thus, they should be used complementarily and require different methods (e.g., for analysis). © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Evidence Based Software Engineering; Systematic Mapping Studies; Systematic Reviews; Mapping; Classification Scheme; Evidence Based Software Engineering; Research Fields; Research Questions; Systematic Mapping; Systematic Mapping Studies; Systematic Maps; Systematic Review; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Rainer2008,
	author = {Rainer, Austen W. and Beecham, Sarah},
	title = {A follow-up empirical evaluation of evidence based software engineering by undergraduate students},
	year = {2008},
	pages = {},
	doi = {10.14236/ewic/ease2008.9},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85086687942&doi=10.14236%2Fewic%2Fease2008.9&partnerID=40&md5=624f3d4d1639dc56060fbbab9dfcae10},
	abstract = {Context: Evidence Based Software Engineering (EBSE) has recently been proposed as a methodology to help practitioners improve their technology adoption decisions given their particular circumstances. Formally, Systematic Literature Reviews (SLRs) are a part of EBSE. There has been a noticeable take up of SLRs by researchers, but little has been published on whether, and then how, the EBSE methodology has been applied in full. Objectives: To empirically evaluate the use of EBSE by undergraduate students. To consider how insights into the students’ performance with EBSE can be applied to software practitioners’ expected performance with EBSE. To gain insights into the use of Supplementary EBSE Guidelines and associated Assessment Schemes. Method: 37 final-year undergraduate students completed a coursework assessment that required them to use EBSE to evaluate one or more of four Requirements Management Tools (RMTs): Telelogic DOORs®, Borland’s Caliber® Analyst, Compuware Optimal Trace™, and GODA ARTS. Students were provided with a range of EBSE resources, including a set of Supplementary EBSE Guidelines, to assist them with their EBSE evaluation. An Assessment Scheme was development to assess the degree to which students followed the Supplementary Guidelines. A feedback questionnaire, completed by 12 of the 37 students, complemented the Assessment Scheme. Results: 78% of students chose to evaluate a RMT that is currently a market leader. 62% of students subsequently recommended the adoption of their chosen RTM. Some students made a recommendation because the Guidelines indicated they should, rather than making a recommendation because the evidence ‘entailed’ that recommendation. Only 8% of students intentionally made no recommendation, and this seems to be on the basis of the poor quality of evidence available on the chosen RMT(s). All 12 students who completed the feedback questionnaire reported that this was the hardest or nearly the hardest assessment that the student had ever done! 67% of these 12 students reported that they had not given themselves sufficient time to complete the evaluation, and 83% reported that they had to balance their time on this evaluation with other commitments. The12 students found EBSE steps 1 and 4 to be the easiest and EBSE steps 2 and 3 to be the hardest, and they generally reported that they had received sufficient support from the EBSE resources made available to them. Conclusion: This study presents independent, empirical evidence of the full use of EBSE, to complement the growing body of published SLRs. We believe that the findings on students’ use of EBSE are relevant to understanding professional practitioners’ prospective use of EBSE. Both students and professionals would: find EBSE very challenging, in particular the SLRs; be subject to constraints and trade-offs; may not be able to find relevant and rigorous evidence; and may make errors in their critical thinking whilst conducting the evaluation. Our findings should benefit researchers, practitioners and educators. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Borland Caliber® Analyst; Compuware Optimal Trace™; Decision Making; Ebse; Empirical Methods; Evaluation Of Software Methods And Tools; Evidence Based Software Engineering; Goda Arts; Requirements Management Tools; Rmts; Slr; Systematic Literature Review; Teaching; Telelogic Doors®; Behavioral Research; Commerce; Decision Making; Economic And Social Effects; Requirements Engineering; Software Engineering; Surveys; Teaching; Compuware; Ebse; Empirical Method; Evidence Based Software Engineering; Goda Arts; Requirements Management Tool; Rmts; Software Methods; Systematic Literature Review; Students},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Turner2008,
	author = {Turner, Mark and Kitchenham, Barbara Ann and Budgen, David and Brereton, Pearl},
	title = {Lessons learnt undertaking a large-scale systematic literature review},
	year = {2008},
	pages = {},
	doi = {10.14236/ewic/ease2008.12},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85085408285&doi=10.14236%2Fewic%2Fease2008.12&partnerID=40&md5=2f42703397377796a3c0feb86ac43911},
	abstract = {We have recently undertaken a large-scale Systematic Literature Review (SLR) of a research question concerning the Technology Acceptance Model (TAM). At the end of the study, we observed some anomalies during the analysis of the extracted data. In our attempts to identify the cause of the anomalies, we found a number of mistakes that had been made during the data extraction process. We discuss each of the mistakes in terms of why they occurred and how they might have been avoided. We suggest a number of ways in which the available guidelines for conducting SLRs should be amended to help avoid such problems occurring in future reviews. © 2020 Elsevier B.V., All rights reserved.},
	author_keywords = {Lessons Learnt; Systematic Literature Reviews; Data Mining; Data Extraction; Lessons Learnt; Research Questions; Systematic Literature Review; Systematic Literature Review (slr); Technology Acceptance Model; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@ARTICLE{Budgen2008,
	author = {Budgen, David and Bailey, John and Turner, Mark and Kitchenham, Barbara Ann and Brereton, Pearl and Charters, Stuart M.},
	title = {Lessons from a cross-domain investigation of empirical practices},
	year = {2008},
	pages = {},
	doi = {10.14236/ewic/ease2008.10},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-70349741424&doi=10.14236%2Fewic%2Fease2008.10&partnerID=40&md5=efe7bb034f4df44e86e5e52ea83dd195},
	abstract = {Context: We are seeking the best ways to employ evidence-based practices in software engineering research and practice. Objectives: To help assess our guidelines for conducting systematic literature reviews we have investigated how other academic disciplines use evidence-based practices. Method: This involved performing two studies, one using a questionnaire with a set of experts, and a second using semi-structured interviews. Results: We have identified how disciplines with similar empirical constraints to software engineering place weight upon different forms of empirical data. Conclusions: We describe both the resulting changes to our systematic literature review guidelines and some issues this raises for empirical software engineering. © 2022 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Studies; Evidence-based; Occupational Therapy; Surveys; Cross-domain; Empirical Data; Empirical Software Engineering; Empirical Studies; Evidence-based; Evidence-based Practices; Semi Structured Interviews; Systematic Literature Review; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

@CONFERENCE{Dieste2008143,
	author = {Dieste, Óscar and López, Marta and Ramos, Felicidad},
	title = {Formalizing a systematic review updating process},
	year = {2008},
	pages = {143 - 150},
	doi = {10.1109/SERA.2008.35},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-53149131367&doi=10.1109%2FSERA.2008.35&partnerID=40&md5=9e59d68904790ee68cc96745834395e1},
	abstract = {The objective of a systematic review is to obtain empirical evidence about the topic under review and to allow moving forward the body of knowledge of a discipline. Therefore, systematic reviewing is a tool we can apply in Software Engineering to develop well founded guidelines with the final goal of improving the quality of the software systems. However, we still do not have as much experience in performing systematic reviews as in other disciplines like medicine, and therefore we need detailed guidance. This paper presents a proposal of a improved process to perform systematic reviews in software engineering. This process is the result of the tasks carried out in a first review and a subsequent update concerning the effectiveness of elicitation techniques. © 2008 IEEE. © 2018 Elsevier B.V., All rights reserved.},
	author_keywords = {Engineering Research; Body Of Knowledge; Elicitation Techniques; Improved Process; Software Systems; Systematic Review; Application Programs},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@CONFERENCE{Dybå2007225,
	author = {Dybå, Tore and Dingsøyr, Torgeir and Hanssen, Geir Kjetil},
	title = {Applying systematic reviews to diverse study types: An experience report},
	year = {2007},
	pages = {225 - 234},
	doi = {10.1109/ESEM.2007.21},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-45449103227&doi=10.1109%2FESEM.2007.21&partnerID=40&md5=2df1bd363f38e86f9d5b335c9119ab0f},
	abstract = {Systematic reviews are one of the key building blocks of evidence-based software engineering. Current guidelines for such reviews are, for a large part, based on standard meta-analytic techniques. However, such quantitative techniques have only limited applicability to software engineering research. In this paper, therefore, we describe our experience with an approach to combine diverse study types in a systematic review of empirical research of agile software development. © 2007 IEEE. © 2008 Elsevier B.V., All rights reserved.},
	author_keywords = {Research; Software Engineering; Standards; Technology; Agile Software Development; Analytic Techniques; Building Blocks; Empirical Research; Empirical Software Engineering; Experience Report; International Symposium; Quantitative Techniques; Software Engineering Research; Systematic Reviews; Engineering Research},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Staples20071425,
	author = {Staples, Mark and Niazi, Mahmood K.},
	title = {Experiences using systematic review guidelines},
	year = {2007},
	journal = {Journal of Systems and Software},
	volume = {80},
	number = {9},
	pages = {1425 - 1437},
	doi = {10.1016/j.jss.2006.09.046},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-34547730839&doi=10.1016%2Fj.jss.2006.09.046&partnerID=40&md5=776b32114a10d358ff69efdb9cc35905},
	abstract = {Systematic review is a method to identify, assess and analyse published primary studies to investigate research questions. We critique recently published guidelines for performing systematic reviews on software engineering, and comment on systematic review generally with respect to our experience conducting one. Overall we recommend the guidelines. We recommend researchers clearly and narrowly define research questions to reduce overall effort, and to improve selection and data extraction. We suggest that "complementary" research questions can help clarify the main questions and define selection criteria. We show our project timeline, and discuss possibilities for automating and increasing the acceptance of systematic review. © 2006 Elsevier Inc. All rights reserved. © 2008 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Software Engineering; Systematic Review; Electronic Data Interchange; Electronic Publishing; Mathematical Models; Software Engineering; Empirical Software Engineering; Research Questions; Systematic Review; Systematic Errors},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Kitchenham2007316,
	author = {Kitchenham, Barbara Ann and Mendes, Emilia and Travassos, Guilherme Horta},
	title = {Cross versus within-company cost estimation studies: A systematic review},
	year = {2007},
	journal = {IEEE Transactions on Software Engineering},
	volume = {33},
	number = {5},
	pages = {316 - 329},
	doi = {10.1109/TSE.2007.1001},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-34247611323&doi=10.1109%2FTSE.2007.1001&partnerID=40&md5=50fbbd948d8588c0721066d65eac9426},
	abstract = {The objective of this paper is to determine under what circumstances individual organizations would be able to rely on cross-company-based estimation models. We performed a systematic review of studies that compared predictions from cross-company models with predictions from within-company models based on analysis of project data. Ten papers compared cross-company and within-company estimation models; however, only seven presented independent results. Of those seven, three found that cross-company models were not significantly different from within-company models, and four found that cross-company models were significantly worse than within-company models. Experimental procedures used by the studies differed making it impossible to undertake formal meta-analysis of the results. The main trend distinguishing study results was that studies with small within-company data sets (i.e., ≤20 projects) that used leave-one-out cross validation all found that the within-company model was significantly different (better) from the cross-company model. The results of this review are inconclusive. It is clear that some organizations would be ill-served by cross-company models whereas others would benefit. Further studies are needed, but they must be independent (i.e., based on different data bases or at least different single company data sets) and should address specific hypotheses concerning the conditions that would favor cross-company or within-company models. In addition, experimenters need to standardize their experimental procedures to enable formal meta-analysis, and recommendations are made in Section 3. © 2007 IEEE. © 2008 Elsevier B.V., All rights reserved.},
	author_keywords = {Cost Estimation; Management; Software Engineering; Systematic Review; Costs; Estimation; Industrial Management; Mathematical Models; Cost Estimation; Cross-company-based Estimation Models; Systematic Review; Software Engineering},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Jørgensen200733,
	author = {Jørgensen, Magne and Shepperd, Martin},
	title = {A systematic review of software development cost estimation studies},
	year = {2007},
	journal = {IEEE Transactions on Software Engineering},
	volume = {33},
	number = {1},
	pages = {33 - 53},
	doi = {10.1109/TSE.2007.256943},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-33845788381&doi=10.1109%2FTSE.2007.256943&partnerID=40&md5=2f846de3b7cd407f40401dab15bcc669},
	abstract = {This paper aims to provide a basis for the improvement of software estimation research through a systematic review of previous work. The review identifies 304 software cost estimation papers in 76 journals and classifies the papers according to research topic, estimation approach, research approach, study context and data set. A Web-based library of these cost estimation papers is provided to ease the identification of relevant estimation research results. The review results combined with other knowledge provide support for recommendations for future software cost estimation research, including 1) increase the breadth of the search for relevant studies, 2) search manually for relevant papers within a carefully selected set of journals when completeness is essential, 3) conduct more studies on estimation methods commonly used by the software industry, and 4) increase the awareness of how properties of the data sets impact the results when evaluating estimation methods. © 2007 IEEE. © 2008 Elsevier B.V., All rights reserved.},
	author_keywords = {Research Methods; Software Cost Estimation; Software Cost Prediction; Software Effort Estimation; Software Effort Prediction; Systematic Review; Costs; Digital Libraries; Engineering Research; Estimation; Software Cost Estimation; Software Cost Prediction; Software Effort Estimation; Software Effort Prediction; Software Engineering},
	type = {Review},
	publication_stage = {Final},
	source = {Scopus}
}

@ARTICLE{Staples2006,
	author = {Staples, Mark and Niazi, Mahmood K.},
	title = {Experiences Using Systematic Review Guidelines},
	year = {2006},
	pages = {},
	doi = {10.14236/ewic/EASE2006.9},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-48349140009&doi=10.14236%2Fewic%2FEASE2006.9&partnerID=40&md5=64ce46501a92b812aa59eb5f65ba601c},
	abstract = {A systematic review is a defined and methodical way to identify, assess and analyse published primary studies in order to investigate a specific research question. Kitchenham has recently published guidelines for software engineering researchers performing systematic reviews. The objective of our paper is to critique Kitchenham’s guidelines and to comment on systematic review generally with respect to our experiences conducting our first systematic review. Our perspective as neophytes may be particularly illuminating for other software engineering researchers who are also considering conducting their first systematic review. Overall we can recommend Kitchenham’s guidelines to other researchers considering systematic reviews. We caution researchers to clearly and narrowly define the research questions they will investigate by systematic review, to reduce the overall effort and to improve the quality of the selection of papers and extraction of data. In particular we recommend defining complementary research questions that are not within the scope of the systematic review in order to clarify the boundaries of the specific research question of interest. An instance of this recommendation is that researchers should clearly define the unit of study for the systematic review. © 2023 Elsevier B.V., All rights reserved.},
	author_keywords = {Empirical Software Engineering; Systematic Review; Empirical Software Engineering; Research Questions; Systematic Review; Software Engineering},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {All Open Access; Hybrid Gold Open Access}
}

