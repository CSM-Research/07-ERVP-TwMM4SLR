@inproceedings{10.1145/3530019.3531329,
author = {Khan, Arif Ali and Badshah, Sher and Liang, Peng and Waseem, Muhammad and Khan, Bilal and Ahmad, Aakash and Fahmideh, Mahdi and Niazi, Mahmood and Akbar, Muhammad Azeem},
title = {Ethics of AI: A Systematic Literature Review of Principles and Challenges},
year = {2022},
isbn = {9781450396134},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3530019.3531329},
doi = {10.1145/3530019.3531329},
abstract = {Ethics in AI becomes a global topic of interest for both policymakers and academic researchers. In the last few years, various research organizations, lawyers, think tankers, and regulatory bodies get involved in developing AI ethics guidelines and principles. However, there is still debate about the implications of these principles. We conducted a systematic literature review (SLR) study to investigate the agreement on the significance of AI principles and identify the challenging factors that could negatively impact the adoption of AI ethics principles. The results reveal that the global convergence set consists of 22 ethical principles and 15 challenges. Transparency, privacy, accountability and fairness are identified as the most common AI ethics principles. Similarly, lack of ethical knowledge and vague principles are reported as the significant challenges for considering ethics in AI. The findings of this study are the preliminary inputs for proposing a maturity model that assesses the ethical capabilities of AI systems and provides best practices for further improvements.},
booktitle = {Proceedings of the 26th International Conference on Evaluation and Assessment in Software Engineering},
pages = {383–392},
numpages = {10},
keywords = {AI Ethics, Challenges, Machine Ethics, Principles, Systematic Literature Review},
location = {Gothenburg, Sweden},
series = {EASE '22}
}

@inproceedings{10.1145/3661167.3661238,
author = {Akbar, Muhammad Azeem and Rafi, Saima and Hyrynsalmi, Sami and Khan, Arif Ali},
title = {Towards People Maturity for Secure Development and Operations: A vision},
year = {2024},
isbn = {9798400717017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3661167.3661238},
doi = {10.1145/3661167.3661238},
abstract = {DevOps (development and operations) is a set of collaborative practices that automate continuous delivery of new software versions with an aim to reduce the development life cycle and produce quality software products. Security is an important attribute of quality software. Software is secure if it does not allow the confidentiality, integrity, and availability of its data, code, or service to be compromised. In order to take full advantage of DevOps, security needs to play an integral part in the development life cycle of a software. The DevSecOps (development, security, and operations) refers to the integrating security practices within the DevOps process. DevSecOps promotes the shifting security to the early stages of a project. Traditionally, security testing is done towards the end of the software lifecycle. However, fixing issues later in the process is more costly than making sure defects do not happen in the beginning. DevSecOps goes beyond automation, continuous integration, testing and delivery processes, since it also encompasses people. In fact, DevSecOps promotes the collaboration between the development, operations, and security teams. When security comes into DevOps routines, people play an even more relevant role involving the collaboration between those teams and security team. In any organization policies, standards, procedures and code of conducts are designed for people to follow. People are executers of policies. The human factor is one of the major forces behind effectiveness, or failure of a security system. Traditionally, the organizations focus on protecting their infrastructure, from security threats and they ignore human behavior that may result in malicious activities during software development process. Human aspect is considered as one of the major reasons of security vulnerability is due to malicious human behavior, who are involved in DevSecOps process; human may make mistakes due to lack of security perceptions, skills, and knowledge.These mistakes would bring a great loss if they are not properly handled. To overcome this challenge, there is a need of a specific maturity model that help to assess and guide the DevSecOps adoption. The key objective of this research project is to develop a people maturity model for DevSecOps (PMM-DevSecOps), that could help the practitioners to assess and manage their security vulnerability caused by human malicious behavior and lack of skills. To address the objective of this research project, we will use the systematic literature review (SLR), multivocal literature review (MLR) and questionnaire survey approach to identify and validate the critical success factors (CSFs), critical challenges (CCHs) and the related best practices of human related vulnerabilities for DevSecOps. Using the identified CSFs, CCHs and their related best practices, we will develop the maturity levels of proposed maturity model (i.e., PMM-DevSecOps), based on the concepts of the existing maturity models in other software engineering domains and the perceptions of the practitioners and academic researchers. Every maturity level will comprise of different CSFs and CCHs that can help in assessing and managing security vulnerability caused by human malicious behavior and lack of skills. We are confident that the proposed model will provide a roadmap for software development organizations to measure their maturity to assess and improve their security vulnerability caused by human malicious behavior and lack of skills while executing DevSecOps process.},
booktitle = {Proceedings of the 28th International Conference on Evaluation and Assessment in Software Engineering},
pages = {528–533},
numpages = {6},
keywords = {Challenges, DevOps, DevSecOps, Maturity Model, Success Factors},
location = {Salerno, Italy},
series = {EASE '24}
}

@inproceedings{10.1145/3364641.3364678,
author = {Vilela, J\'{e}ssyka and Castro, Jaelson and Martins, Luiz Eduardo G.},
title = {Uni-REPM SCS: A Safety Maturity Model for Requirements Engineering Process},
year = {2019},
isbn = {9781450372824},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3364641.3364678},
doi = {10.1145/3364641.3364678},
abstract = {Context: Software is an important part in safety-critical system (SCS) development since it is becoming a major source of hazards. Software has been responsible to implement innovative and complex functions and to send instructions to the hardware. Requirements-related hazards have been associated with many accidents and safety incidents. Requirements issues tend to be mitigated in companies with high processes maturity levels since they adopt good practices from software engineering in a systematic, consistent and proactive way. However, requirements engineers need systematic guidance to consider safety concerns early in the development process. Objective: This thesis investigates which safety practices/actions are suitable to be used in the Requirements Engineering process of SCS as well as to propose a safety maturity model to this area. Method: A set of empirical studies were used in this work. The data collection was done through systematic literature review and case studies. We followed the Design Science methodology to propose Uni-REPM SCS, a safety module for Unified Requirements Engineering Process Maturity Model (Uni-REPM), and the technology transfer framework to perform the safety module validation. Besides, comprehensive literature review was also conducted to provide background and support for the empirical studies. Results: The safety module has seven main processes, 14 sub-processes and 148 safety actions describing principles and practices that form the basis of safety processes maturity. Moreover, we describe its usage through a tool. We conducted a static validation with two practitioners and nine academic experts to evaluate its coverage, correctness, usefulness and applicability. Furthermore, we performed a dynamic validation with seven industry practitioners to evaluate the safety maturity level of seven industry projects. Conclusions: The validation indicates a good coverage of practices and good receptivity by the experts. Finally, the module can help companies in evaluating their current practices as well as offers a step-wise improvement strategy to reach higher maturity.},
booktitle = {Proceedings of the XVIII Brazilian Symposium on Software Quality},
pages = {313},
numpages = {1},
keywords = {Maturity Models, Requirements Engineering, Safety Engineering, Safety-critical systems, Uni-REPM},
location = {Fortaleza, Brazil},
series = {SBQS '19}
}

@inproceedings{10.1145/3457784.3457803,
author = {Ferdinansyah, Alex and Purwandari, Betty},
title = {Challenges in Combining Agile Development and CMMI: A Systematic Literature Review},
year = {2021},
isbn = {9781450388825},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3457784.3457803},
doi = {10.1145/3457784.3457803},
abstract = {Recently, Agile Development has emerged as an alternative approach in software engineering. The Agile Software Development (ASD) process provides the ability to cope with ever-changing requirements. On the other hand, the Capability Maturity Model Integration, one of the Software Process Improvement Framework, is widely used to provide software development organizations with structure and stability in their software process. It enables organizations to generate software processes with better quality software, the productivity increase of the development team, and minimal risk of failure. The idea behind combining the Capability Maturity Model Integration (CMMI) and Agile aims to create a software development procedure that is stable and continues to improve while also providing agility for dealing with dynamic business needs. This research compiles the experiences of combining both software and identifies challenges for the collaborative implementation process. This study also highlights the extent of the compatibility of CMMI and Agile Development. This research followed a standardized Systematic Literature Review procedure and used the approach known as Preferred Reporting Items for Systematic Reviews and Meta-Analyses or PRISMA. The findings indicate that the main challenges with regard to combining CMMI and Agile are the lack of relevant knowledge and experience and the culture of CMMI, Agile, or sometimes both. The limited scope of Agile itself poses another considerable challenge. Agile focuses on software development projects, while CMMI has a broader range, from project-level development to organization-level process improvement. This review also finds that Agile Development is compatible with CMMI at a maturity level of 2 and 3. Future studies should determine the optimal method for overcoming the obstacles associated with combining CMMI and Agile.},
booktitle = {Proceedings of the 2021 10th International Conference on Software and Computer Applications},
pages = {63–69},
numpages = {7},
keywords = {Agile, CMMI, Extreme Programming, PRISMA, Scrum, Software Process Improvement, Systematic Literature Review},
location = {Kuala Lumpur, Malaysia},
series = {ICSCA '21}
}

@inproceedings{10.1145/3383219.3383280,
author = {Badshah, Sher and Khan, Arif Ali and Khan, Bilal},
title = {Towards Process Improvement in DevOps: A Systematic Literature Review},
year = {2020},
isbn = {9781450377317},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3383219.3383280},
doi = {10.1145/3383219.3383280},
abstract = {In recent years, the software release cost has been reduced dramatically due to the alteration from traditional shrink-wrapped software to software as a service. Organizations that can deliver their services continuously and with a high frequency have a higher ability to compete in the market. As a response to this, a substantial number of software companies acquired DevOps to establish a culture of effective communication and collaboration between development and operation teams and in order to enhance the production release frequency as well as to maintain the product quality. However, the DevOps environment requires a platform that aid in evaluating the performance of existing processes and provide improvement recommendations. On top of that, organizations can only achieve the perceived benefits of DevOps if their processes are mature and continuously measured. The objective of this research is to investigate the process improvement contributions made by researchers in the DevOps field. For this purpose, we performed a systematic literature review that resulted in several maturity models and best practices. Our ultimate aim is to develop a DevOps maturity model that can appraise and improve the processes in the DevOps environment.},
booktitle = {Proceedings of the 24th International Conference on Evaluation and Assessment in Software Engineering},
pages = {427–433},
numpages = {7},
keywords = {Continuous software engineering, DevOps, maturity models, process improvement, systematic review},
location = {Trondheim, Norway},
series = {EASE '20}
}

@inproceedings{10.1145/3383219.3383286,
author = {Hamza, Muhammad and Hu, Haibo and Akbar, Muhammad Azeem and Mehmood, Faisal and Hussain, Yasir and Baddour, Ali Mahmoud},
title = {SIOT-RIMM: Towards Secure IOT-Requirement Implementation Maturity Model},
year = {2020},
isbn = {9781450377317},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3383219.3383286},
doi = {10.1145/3383219.3383286},
abstract = {It is very crucial for an organization to encapsulate the requirements in its early stage when they are intending to build a novel system such as the internet of things (IoT), particularly when it comes to capturing privacy and security requirements to gain the public confidence. The proposed research is focused to develop a secure IoT-requirement implementation maturity model (SIOT-RIMM). The proposed model will assist the software development organizations to improve and modify their requirement engineering processes in terms of security and privacy of IoT. The SIOT-RIMM model will be developed based on the existing IoT literature pertaining to security and privacy, industrial empirical study and understanding of the challenges that could negatively influence the implementation of security and privacy in IoT. To develop the maturity levels of SIOT-RIMM, we will consider the concepts of existing maturity models of other software engineering domains. In this preliminary study, 19 challenges were identified using the SLR approach that might have a negative impact on the IoT requirements engineering process. The identified challenges will contribute to the development of SIOT-RIMM maturity levels.},
booktitle = {Proceedings of the 24th International Conference on Evaluation and Assessment in Software Engineering},
pages = {463–468},
numpages = {6},
keywords = {Empirical investigations, IoT requirements, Maturity model, Systematic literature review},
location = {Trondheim, Norway},
series = {EASE '20}
}

